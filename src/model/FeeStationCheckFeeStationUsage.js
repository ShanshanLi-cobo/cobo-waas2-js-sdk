/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FeeStationCheckFeeStationUsage model module.
 * @module model/FeeStationCheckFeeStationUsage
 */
class FeeStationCheckFeeStationUsage {
    /**
     * Constructs a new <code>FeeStationCheckFeeStationUsage</code>.
     * The information about a check fee station usage.
     * @alias module:model/FeeStationCheckFeeStationUsage
     * @param request_id {String} The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
     * @param amount {String} The amount of tokens to be transferred in this request.
     * @param token_id {String} The token ID of the transferred token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).
     * @param estimated_fee_amount {String} The estimated transaction fee required for this transfer, before applying any fee station rules.
     * @param from_address {String} The blockchain address that initiates the transfer.
     * @param from_wallet_id {String} The wallet ID.
     */
    constructor(request_id, amount, token_id, estimated_fee_amount, from_address, from_wallet_id) { 
        
        FeeStationCheckFeeStationUsage.initialize(this, request_id, amount, token_id, estimated_fee_amount, from_address, from_wallet_id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, request_id, amount, token_id, estimated_fee_amount, from_address, from_wallet_id) { 
        obj['request_id'] = request_id;
        obj['amount'] = amount;
        obj['token_id'] = token_id;
        obj['estimated_fee_amount'] = estimated_fee_amount;
        obj['from_address'] = from_address;
        obj['from_wallet_id'] = from_wallet_id;
    }

    /**
     * Constructs a <code>FeeStationCheckFeeStationUsage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeeStationCheckFeeStationUsage} obj Optional instance to populate.
     * @return {module:model/FeeStationCheckFeeStationUsage} The populated <code>FeeStationCheckFeeStationUsage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeeStationCheckFeeStationUsage();

            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('estimated_fee_amount')) {
                obj['estimated_fee_amount'] = ApiClient.convertToType(data['estimated_fee_amount'], 'String');
            }
            if (data.hasOwnProperty('from_address')) {
                obj['from_address'] = ApiClient.convertToType(data['from_address'], 'String');
            }
            if (data.hasOwnProperty('from_wallet_id')) {
                obj['from_wallet_id'] = ApiClient.convertToType(data['from_wallet_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeeStationCheckFeeStationUsage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeeStationCheckFeeStationUsage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FeeStationCheckFeeStationUsage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is a string
        if (data['estimated_fee_amount'] && !(typeof data['estimated_fee_amount'] === 'string' || data['estimated_fee_amount'] instanceof String)) {
            throw new Error("Expected the field `estimated_fee_amount` to be a primitive type in the JSON string but got " + data['estimated_fee_amount']);
        }
        // ensure the json data is a string
        if (data['from_address'] && !(typeof data['from_address'] === 'string' || data['from_address'] instanceof String)) {
            throw new Error("Expected the field `from_address` to be a primitive type in the JSON string but got " + data['from_address']);
        }
        // ensure the json data is a string
        if (data['from_wallet_id'] && !(typeof data['from_wallet_id'] === 'string' || data['from_wallet_id'] instanceof String)) {
            throw new Error("Expected the field `from_wallet_id` to be a primitive type in the JSON string but got " + data['from_wallet_id']);
        }

        return true;
    }


}

FeeStationCheckFeeStationUsage.RequiredProperties = ["request_id", "amount", "token_id", "estimated_fee_amount", "from_address", "from_wallet_id"];

/**
 * The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
 * @member {String} request_id
 */
FeeStationCheckFeeStationUsage.prototype['request_id'] = undefined;

/**
 * The amount of tokens to be transferred in this request.
 * @member {String} amount
 */
FeeStationCheckFeeStationUsage.prototype['amount'] = undefined;

/**
 * The token ID of the transferred token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).
 * @member {String} token_id
 */
FeeStationCheckFeeStationUsage.prototype['token_id'] = undefined;

/**
 * The estimated transaction fee required for this transfer, before applying any fee station rules.
 * @member {String} estimated_fee_amount
 */
FeeStationCheckFeeStationUsage.prototype['estimated_fee_amount'] = undefined;

/**
 * The blockchain address that initiates the transfer.
 * @member {String} from_address
 */
FeeStationCheckFeeStationUsage.prototype['from_address'] = undefined;

/**
 * The wallet ID.
 * @member {String} from_wallet_id
 */
FeeStationCheckFeeStationUsage.prototype['from_wallet_id'] = undefined;






export default FeeStationCheckFeeStationUsage;

