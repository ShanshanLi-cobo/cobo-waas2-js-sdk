/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FeeType from './FeeType';
import SOLBase from './SOLBase';
import SOLComputeUnit from './SOLComputeUnit';

/**
 * The TransactionSOLFee model module.
 * @module model/TransactionSOLFee
 */
class TransactionSOLFee {
    /**
     * Constructs a new <code>TransactionSOLFee</code>.
     * The transaction fee actually charged by the chain that uses the SOL fee model.  In the SOL fee model, the calculation method for the fee is: fee &#x3D; base_fee + compute_unit_price * compute_unit_limit + rent_amount, refer to [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).  Switch between the tabs to display the properties for different transaction fee models. 
     * @alias module:model/TransactionSOLFee
     * @implements module:model/SOLBase
     * @implements module:model/SOLComputeUnit
     * @param fee_type {module:model/FeeType} 
     */
    constructor(fee_type) { 
        SOLBase.initialize(this);SOLComputeUnit.initialize(this);
        TransactionSOLFee.initialize(this, fee_type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fee_type) { 
        obj['fee_type'] = fee_type;
    }

    /**
     * Constructs a <code>TransactionSOLFee</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionSOLFee} obj Optional instance to populate.
     * @return {module:model/TransactionSOLFee} The populated <code>TransactionSOLFee</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionSOLFee();
            SOLBase.constructFromObject(data, obj);
            SOLComputeUnit.constructFromObject(data, obj);

            if (data.hasOwnProperty('base_fee')) {
                obj['base_fee'] = ApiClient.convertToType(data['base_fee'], 'String');
            }
            if (data.hasOwnProperty('rent_amount')) {
                obj['rent_amount'] = ApiClient.convertToType(data['rent_amount'], 'String');
            }
            if (data.hasOwnProperty('compute_unit_price')) {
                obj['compute_unit_price'] = ApiClient.convertToType(data['compute_unit_price'], 'String');
            }
            if (data.hasOwnProperty('compute_unit_limit')) {
                obj['compute_unit_limit'] = ApiClient.convertToType(data['compute_unit_limit'], 'String');
            }
            if (data.hasOwnProperty('fee_type')) {
                obj['fee_type'] = FeeType.constructFromObject(data['fee_type']);
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('fee_used')) {
                obj['fee_used'] = ApiClient.convertToType(data['fee_used'], 'String');
            }
            if (data.hasOwnProperty('estimated_fee_used')) {
                obj['estimated_fee_used'] = ApiClient.convertToType(data['estimated_fee_used'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionSOLFee</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionSOLFee</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransactionSOLFee.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['base_fee'] && !(typeof data['base_fee'] === 'string' || data['base_fee'] instanceof String)) {
            throw new Error("Expected the field `base_fee` to be a primitive type in the JSON string but got " + data['base_fee']);
        }
        // ensure the json data is a string
        if (data['rent_amount'] && !(typeof data['rent_amount'] === 'string' || data['rent_amount'] instanceof String)) {
            throw new Error("Expected the field `rent_amount` to be a primitive type in the JSON string but got " + data['rent_amount']);
        }
        // ensure the json data is a string
        if (data['compute_unit_price'] && !(typeof data['compute_unit_price'] === 'string' || data['compute_unit_price'] instanceof String)) {
            throw new Error("Expected the field `compute_unit_price` to be a primitive type in the JSON string but got " + data['compute_unit_price']);
        }
        // ensure the json data is a string
        if (data['compute_unit_limit'] && !(typeof data['compute_unit_limit'] === 'string' || data['compute_unit_limit'] instanceof String)) {
            throw new Error("Expected the field `compute_unit_limit` to be a primitive type in the JSON string but got " + data['compute_unit_limit']);
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is a string
        if (data['fee_used'] && !(typeof data['fee_used'] === 'string' || data['fee_used'] instanceof String)) {
            throw new Error("Expected the field `fee_used` to be a primitive type in the JSON string but got " + data['fee_used']);
        }
        // ensure the json data is a string
        if (data['estimated_fee_used'] && !(typeof data['estimated_fee_used'] === 'string' || data['estimated_fee_used'] instanceof String)) {
            throw new Error("Expected the field `estimated_fee_used` to be a primitive type in the JSON string but got " + data['estimated_fee_used']);
        }

        return true;
    }


}

TransactionSOLFee.RequiredProperties = ["fee_type"];

/**
 * The fundamental fee required for each transaction. It is charged to prevent spam transactions and network congestion, ensuring that only meaningful transactions consume network resources.
 * @member {String} base_fee
 */
TransactionSOLFee.prototype['base_fee'] = undefined;

/**
 * The fee charged as rent for maintaining the state of accounts on the blockchain. This rent ensures accounts are stored on-chain over the long term and that there's sufficient balance to sustain the account state.
 * @member {String} rent_amount
 */
TransactionSOLFee.prototype['rent_amount'] = undefined;

/**
 * The cost per compute unit. Transactions consume computational resources measured in compute units, and this price helps determine the cost of executing transactions, especially complex ones involving smart contracts.
 * @member {String} compute_unit_price
 */
TransactionSOLFee.prototype['compute_unit_price'] = undefined;

/**
 * The maximum number of compute units allowed for a transaction. This limits the resources any single transaction can consume, preventing excessive resource usage that could impact network performance negatively.
 * @member {String} compute_unit_limit
 */
TransactionSOLFee.prototype['compute_unit_limit'] = undefined;

/**
 * @member {module:model/FeeType} fee_type
 */
TransactionSOLFee.prototype['fee_type'] = undefined;

/**
 * The token ID of the transaction fee.
 * @member {String} token_id
 */
TransactionSOLFee.prototype['token_id'] = undefined;

/**
 * The transaction fee.
 * @member {String} fee_used
 */
TransactionSOLFee.prototype['fee_used'] = undefined;

/**
 * The estimated transaction fee.
 * @member {String} estimated_fee_used
 */
TransactionSOLFee.prototype['estimated_fee_used'] = undefined;


// Implement SOLBase interface:
/**
 * The fundamental fee required for each transaction. It is charged to prevent spam transactions and network congestion, ensuring that only meaningful transactions consume network resources.
 * @member {String} base_fee
 */
SOLBase.prototype['base_fee'] = undefined;
/**
 * The fee charged as rent for maintaining the state of accounts on the blockchain. This rent ensures accounts are stored on-chain over the long term and that there's sufficient balance to sustain the account state.
 * @member {String} rent_amount
 */
SOLBase.prototype['rent_amount'] = undefined;
// Implement SOLComputeUnit interface:
/**
 * The cost per compute unit. Transactions consume computational resources measured in compute units, and this price helps determine the cost of executing transactions, especially complex ones involving smart contracts.
 * @member {String} compute_unit_price
 */
SOLComputeUnit.prototype['compute_unit_price'] = undefined;
/**
 * The maximum number of compute units allowed for a transaction. This limits the resources any single transaction can consume, preventing excessive resource usage that could impact network performance negatively.
 * @member {String} compute_unit_limit
 */
SOLComputeUnit.prototype['compute_unit_limit'] = undefined;




export default TransactionSOLFee;

