/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AmountDetailsInner from './AmountDetailsInner';
import BabylonValidator from './BabylonValidator';
import StakingPoolId from './StakingPoolId';
import StakingsExtra from './StakingsExtra';

/**
 * The Stakings model module.
 * @module model/Stakings
 */
class Stakings {
    /**
     * Constructs a new <code>Stakings</code>.
     * The information about a staking position.
     * @alias module:model/Stakings
     * @param id {String} The ID of the staking position.
     * @param wallet_id {String} The staker's wallet ID.
     * @param address {String} The staker's wallet address.
     * @param amounts {Array.<module:model/AmountDetailsInner>} The details about the staking amount.
     * @param pool_id {module:model/StakingPoolId} 
     * @param token_id {String} The token ID.
     * @param created_timestamp {Number} The time when the staking position was created.
     * @param updated_timestamp {Number} The time when the staking position was last updated.
     */
    constructor(id, wallet_id, address, amounts, pool_id, token_id, created_timestamp, updated_timestamp) { 
        
        Stakings.initialize(this, id, wallet_id, address, amounts, pool_id, token_id, created_timestamp, updated_timestamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, wallet_id, address, amounts, pool_id, token_id, created_timestamp, updated_timestamp) { 
        obj['id'] = id;
        obj['wallet_id'] = wallet_id;
        obj['address'] = address;
        obj['amounts'] = amounts;
        obj['pool_id'] = pool_id;
        obj['token_id'] = token_id;
        obj['created_timestamp'] = created_timestamp;
        obj['updated_timestamp'] = updated_timestamp;
    }

    /**
     * Constructs a <code>Stakings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Stakings} obj Optional instance to populate.
     * @return {module:model/Stakings} The populated <code>Stakings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Stakings();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('wallet_id')) {
                obj['wallet_id'] = ApiClient.convertToType(data['wallet_id'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('amounts')) {
                obj['amounts'] = ApiClient.convertToType(data['amounts'], [AmountDetailsInner]);
            }
            if (data.hasOwnProperty('pool_id')) {
                obj['pool_id'] = StakingPoolId.constructFromObject(data['pool_id']);
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('rewards_info')) {
                obj['rewards_info'] = ApiClient.convertToType(data['rewards_info'], Object);
            }
            if (data.hasOwnProperty('created_timestamp')) {
                obj['created_timestamp'] = ApiClient.convertToType(data['created_timestamp'], 'Number');
            }
            if (data.hasOwnProperty('updated_timestamp')) {
                obj['updated_timestamp'] = ApiClient.convertToType(data['updated_timestamp'], 'Number');
            }
            if (data.hasOwnProperty('validator_info')) {
                obj['validator_info'] = BabylonValidator.constructFromObject(data['validator_info']);
            }
            if (data.hasOwnProperty('validators')) {
                obj['validators'] = ApiClient.convertToType(data['validators'], [BabylonValidator]);
            }
            if (data.hasOwnProperty('extra')) {
                obj['extra'] = StakingsExtra.constructFromObject(data['extra']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Stakings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Stakings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Stakings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['wallet_id'] && !(typeof data['wallet_id'] === 'string' || data['wallet_id'] instanceof String)) {
            throw new Error("Expected the field `wallet_id` to be a primitive type in the JSON string but got " + data['wallet_id']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        if (data['amounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['amounts'])) {
                throw new Error("Expected the field `amounts` to be an array in the JSON data but got " + data['amounts']);
            }
            // validate the optional field `amounts` (array)
            for (const item of data['amounts']) {
                AmountDetailsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // validate the optional field `validator_info`
        if (data['validator_info']) { // data not null
          if (!!BabylonValidator.validateJSON) {
            BabylonValidator.validateJSON(data['validator_info']);
          }
        }
        if (data['validators']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['validators'])) {
                throw new Error("Expected the field `validators` to be an array in the JSON data but got " + data['validators']);
            }
            // validate the optional field `validators` (array)
            for (const item of data['validators']) {
                BabylonValidator.validateJSON(item);
            };
        }
        // validate the optional field `extra`
        if (data['extra']) { // data not null
          if (!!StakingsExtra.validateJSON) {
            StakingsExtra.validateJSON(data['extra']);
          }
        }

        return true;
    }


}

Stakings.RequiredProperties = ["id", "wallet_id", "address", "amounts", "pool_id", "token_id", "created_timestamp", "updated_timestamp"];

/**
 * The ID of the staking position.
 * @member {String} id
 */
Stakings.prototype['id'] = undefined;

/**
 * The staker's wallet ID.
 * @member {String} wallet_id
 */
Stakings.prototype['wallet_id'] = undefined;

/**
 * The staker's wallet address.
 * @member {String} address
 */
Stakings.prototype['address'] = undefined;

/**
 * The details about the staking amount.
 * @member {Array.<module:model/AmountDetailsInner>} amounts
 */
Stakings.prototype['amounts'] = undefined;

/**
 * @member {module:model/StakingPoolId} pool_id
 */
Stakings.prototype['pool_id'] = undefined;

/**
 * The token ID.
 * @member {String} token_id
 */
Stakings.prototype['token_id'] = undefined;

/**
 * The information about the staking rewards.
 * @member {Object} rewards_info
 */
Stakings.prototype['rewards_info'] = undefined;

/**
 * The time when the staking position was created.
 * @member {Number} created_timestamp
 */
Stakings.prototype['created_timestamp'] = undefined;

/**
 * The time when the staking position was last updated.
 * @member {Number} updated_timestamp
 */
Stakings.prototype['updated_timestamp'] = undefined;

/**
 * @member {module:model/BabylonValidator} validator_info
 */
Stakings.prototype['validator_info'] = undefined;

/**
 * @member {Array.<module:model/BabylonValidator>} validators
 */
Stakings.prototype['validators'] = undefined;

/**
 * @member {module:model/StakingsExtra} extra
 */
Stakings.prototype['extra'] = undefined;






export default Stakings;

