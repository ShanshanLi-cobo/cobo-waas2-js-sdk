/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FeeType from './FeeType';
import TransactionRequestEvmEip1559Fee from './TransactionRequestEvmEip1559Fee';
import TransactionRequestEvmLegacyFee from './TransactionRequestEvmLegacyFee';
import TransactionRequestFILFee from './TransactionRequestFILFee';
import TransactionRequestFixedFee from './TransactionRequestFixedFee';
import TransactionRequestSOLFee from './TransactionRequestSOLFee';
import TransactionRequestUtxoFee from './TransactionRequestUtxoFee';

/**
 * The TransactionRequestFee model module.
 * @module model/TransactionRequestFee
 */
class TransactionRequestFee {
    /**
     * Constructs a new <code>TransactionRequestFee</code>.
     * @alias module:model/TransactionRequestFee
     * @param {(module:model/TransactionRequestEvmEip1559Fee|module:model/TransactionRequestEvmLegacyFee|module:model/TransactionRequestFILFee|module:model/TransactionRequestFixedFee|module:model/TransactionRequestSOLFee|module:model/TransactionRequestUtxoFee)} instance The actual instance to initialize TransactionRequestFee.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        var discriminatorValue = instance["fee_type"];

        if (discriminatorValue) {
            switch(discriminatorValue) {
                case "EVM_EIP_1559":
                    this.actualInstance = TransactionRequestEvmEip1559Fee.constructFromObject(instance);
                    match++;
                    break;
                case "EVM_Legacy":
                    this.actualInstance = TransactionRequestEvmLegacyFee.constructFromObject(instance);
                    match++;
                    break;
                case "FIL":
                    this.actualInstance = TransactionRequestFILFee.constructFromObject(instance);
                    match++;
                    break;
                case "Fixed":
                    this.actualInstance = TransactionRequestFixedFee.constructFromObject(instance);
                    match++;
                    break;
                case "SOL":
                    this.actualInstance = TransactionRequestSOLFee.constructFromObject(instance);
                    match++;
                    break;
                case "UTXO":
                    this.actualInstance = TransactionRequestUtxoFee.constructFromObject(instance);
                    match++;
                    break;
                default:
                    errorMessages.push("Unrecognized discriminator value: " + discriminatorValue);
                    break;
            }
            return;
        }

        try {
            if (instance instanceof TransactionRequestFixedFee) {
                this.actualInstance = instance;
            } else if(!!TransactionRequestFixedFee.validateJSON && TransactionRequestFixedFee.validateJSON(instance)){
                // plain JS object
                // create TransactionRequestFixedFee from JS object
                this.actualInstance = TransactionRequestFixedFee.constructFromObject(instance);
            } else {
                if(TransactionRequestFixedFee.constructFromObject(instance)) {
                    if (!!TransactionRequestFixedFee.constructFromObject(instance).toJSON) {
                        if (TransactionRequestFixedFee.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionRequestFixedFee.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionRequestFixedFee.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionRequestFixedFee
            errorMessages.push("Failed to construct TransactionRequestFixedFee: " + err)
        }

        try {
            if (instance instanceof TransactionRequestEvmEip1559Fee) {
                this.actualInstance = instance;
            } else if(!!TransactionRequestEvmEip1559Fee.validateJSON && TransactionRequestEvmEip1559Fee.validateJSON(instance)){
                // plain JS object
                // create TransactionRequestEvmEip1559Fee from JS object
                this.actualInstance = TransactionRequestEvmEip1559Fee.constructFromObject(instance);
            } else {
                if(TransactionRequestEvmEip1559Fee.constructFromObject(instance)) {
                    if (!!TransactionRequestEvmEip1559Fee.constructFromObject(instance).toJSON) {
                        if (TransactionRequestEvmEip1559Fee.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionRequestEvmEip1559Fee.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionRequestEvmEip1559Fee.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionRequestEvmEip1559Fee
            errorMessages.push("Failed to construct TransactionRequestEvmEip1559Fee: " + err)
        }

        try {
            if (instance instanceof TransactionRequestEvmLegacyFee) {
                this.actualInstance = instance;
            } else if(!!TransactionRequestEvmLegacyFee.validateJSON && TransactionRequestEvmLegacyFee.validateJSON(instance)){
                // plain JS object
                // create TransactionRequestEvmLegacyFee from JS object
                this.actualInstance = TransactionRequestEvmLegacyFee.constructFromObject(instance);
            } else {
                if(TransactionRequestEvmLegacyFee.constructFromObject(instance)) {
                    if (!!TransactionRequestEvmLegacyFee.constructFromObject(instance).toJSON) {
                        if (TransactionRequestEvmLegacyFee.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionRequestEvmLegacyFee.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionRequestEvmLegacyFee.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionRequestEvmLegacyFee
            errorMessages.push("Failed to construct TransactionRequestEvmLegacyFee: " + err)
        }

        try {
            if (instance instanceof TransactionRequestUtxoFee) {
                this.actualInstance = instance;
            } else if(!!TransactionRequestUtxoFee.validateJSON && TransactionRequestUtxoFee.validateJSON(instance)){
                // plain JS object
                // create TransactionRequestUtxoFee from JS object
                this.actualInstance = TransactionRequestUtxoFee.constructFromObject(instance);
            } else {
                if(TransactionRequestUtxoFee.constructFromObject(instance)) {
                    if (!!TransactionRequestUtxoFee.constructFromObject(instance).toJSON) {
                        if (TransactionRequestUtxoFee.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionRequestUtxoFee.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionRequestUtxoFee.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionRequestUtxoFee
            errorMessages.push("Failed to construct TransactionRequestUtxoFee: " + err)
        }

        try {
            if (instance instanceof TransactionRequestSOLFee) {
                this.actualInstance = instance;
            } else if(!!TransactionRequestSOLFee.validateJSON && TransactionRequestSOLFee.validateJSON(instance)){
                // plain JS object
                // create TransactionRequestSOLFee from JS object
                this.actualInstance = TransactionRequestSOLFee.constructFromObject(instance);
            } else {
                if(TransactionRequestSOLFee.constructFromObject(instance)) {
                    if (!!TransactionRequestSOLFee.constructFromObject(instance).toJSON) {
                        if (TransactionRequestSOLFee.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionRequestSOLFee.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionRequestSOLFee.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionRequestSOLFee
            errorMessages.push("Failed to construct TransactionRequestSOLFee: " + err)
        }

        try {
            if (instance instanceof TransactionRequestFILFee) {
                this.actualInstance = instance;
            } else if(!!TransactionRequestFILFee.validateJSON && TransactionRequestFILFee.validateJSON(instance)){
                // plain JS object
                // create TransactionRequestFILFee from JS object
                this.actualInstance = TransactionRequestFILFee.constructFromObject(instance);
            } else {
                if(TransactionRequestFILFee.constructFromObject(instance)) {
                    if (!!TransactionRequestFILFee.constructFromObject(instance).toJSON) {
                        if (TransactionRequestFILFee.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionRequestFILFee.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionRequestFILFee.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionRequestFILFee
            errorMessages.push("Failed to construct TransactionRequestFILFee: " + err)
        }

        // if (match > 1) {
        //    throw new Error("Multiple matches found constructing `TransactionRequestFee` with oneOf schemas TransactionRequestEvmEip1559Fee, TransactionRequestEvmLegacyFee, TransactionRequestFILFee, TransactionRequestFixedFee, TransactionRequestSOLFee, TransactionRequestUtxoFee. Input: " + JSON.stringify(instance));
        // } else
        if (match === 0) {
        //    this.actualInstance = null; // clear the actual instance in case there are multiple matches
        //    throw new Error("No match found constructing `TransactionRequestFee` with oneOf schemas TransactionRequestEvmEip1559Fee, TransactionRequestEvmLegacyFee, TransactionRequestFILFee, TransactionRequestFixedFee, TransactionRequestSOLFee, TransactionRequestUtxoFee. Details: " +
        //                    errorMessages.join(", "));
        return;
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>TransactionRequestFee</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionRequestFee} obj Optional instance to populate.
     * @return {module:model/TransactionRequestFee} The populated <code>TransactionRequestFee</code> instance.
     */
    static constructFromObject(data, obj) {
        return new TransactionRequestFee(data);
    }

    /**
     * Gets the actual instance, which can be <code>TransactionRequestEvmEip1559Fee</code>, <code>TransactionRequestEvmLegacyFee</code>, <code>TransactionRequestFILFee</code>, <code>TransactionRequestFixedFee</code>, <code>TransactionRequestSOLFee</code>, <code>TransactionRequestUtxoFee</code>.
     * @return {(module:model/TransactionRequestEvmEip1559Fee|module:model/TransactionRequestEvmLegacyFee|module:model/TransactionRequestFILFee|module:model/TransactionRequestFixedFee|module:model/TransactionRequestSOLFee|module:model/TransactionRequestUtxoFee)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>TransactionRequestEvmEip1559Fee</code>, <code>TransactionRequestEvmLegacyFee</code>, <code>TransactionRequestFILFee</code>, <code>TransactionRequestFixedFee</code>, <code>TransactionRequestSOLFee</code>, <code>TransactionRequestUtxoFee</code>.
     * @param {(module:model/TransactionRequestEvmEip1559Fee|module:model/TransactionRequestEvmLegacyFee|module:model/TransactionRequestFILFee|module:model/TransactionRequestFixedFee|module:model/TransactionRequestSOLFee|module:model/TransactionRequestUtxoFee)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = TransactionRequestFee.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of TransactionRequestFee from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/TransactionRequestFee} An instance of TransactionRequestFee.
     */
    static fromJSON = function(json_string){
        return TransactionRequestFee.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/FeeType} fee_type
 */
TransactionRequestFee.prototype['fee_type'] = undefined;

/**
 * The token ID of the transaction fee.
 * @member {String} token_id
 */
TransactionRequestFee.prototype['token_id'] = undefined;

/**
 * The maximum fee that you are willing to pay for the transaction. Provide the value without applying precision. The transaction will fail if the transaction fee exceeds the maximum fee.
 * @member {String} max_fee_amount
 */
TransactionRequestFee.prototype['max_fee_amount'] = undefined;

/**
 * This defines the maximum amount of computational effort that a transaction is allowed to consume. It's a way to cap the resources that a transaction can use, ensuring it doesn't consume excessive network resources.
 * @member {String} gas_limit
 */
TransactionRequestFee.prototype['gas_limit'] = undefined;

/**
 * The maximum gas fee per gas unit used on the chain, in wei.
 * @member {String} max_fee_per_gas
 */
TransactionRequestFee.prototype['max_fee_per_gas'] = undefined;

/**
 * The maximum priority fee per gas unit used, in wei. The maximum priority fee represents the highest amount of miner tips that you are willing to pay for your transaction.
 * @member {String} max_priority_fee_per_gas
 */
TransactionRequestFee.prototype['max_priority_fee_per_gas'] = undefined;

/**
 * The gas price, in wei. The gas price represents the amount of ETH that must be paid to validators for processing transactions per gas unit used.
 * @member {String} gas_price
 */
TransactionRequestFee.prototype['gas_price'] = undefined;

/**
 * The fee rate in sat/vByte. The fee rate represents the satoshis you are willing to pay for each byte of data that your transaction will consume on the blockchain.
 * @member {String} fee_rate
 */
TransactionRequestFee.prototype['fee_rate'] = undefined;

/**
 * The cost per compute unit. Transactions consume computational resources measured in compute units, and this price helps determine the cost of executing transactions, especially complex ones involving smart contracts.
 * @member {String} compute_unit_price
 */
TransactionRequestFee.prototype['compute_unit_price'] = undefined;

/**
 * The maximum number of compute units allowed for a transaction. This limits the resources any single transaction can consume, preventing excessive resource usage that could impact network performance negatively.
 * @member {String} compute_unit_limit
 */
TransactionRequestFee.prototype['compute_unit_limit'] = undefined;

/**
 * An optional additional fee that users can include to prioritize their transactions over others. It acts like a tip to incentivize miners to select and include your transaction over transactions with only the base fee.
 * @member {String} gas_premium
 */
TransactionRequestFee.prototype['gas_premium'] = undefined;

/**
 * The gas_fee_cap is a user-defined limit on how much they are willing to pay per unit of gas.
 * @member {String} gas_fee_cap
 */
TransactionRequestFee.prototype['gas_fee_cap'] = undefined;


TransactionRequestFee.OneOf = ["TransactionRequestEvmEip1559Fee", "TransactionRequestEvmLegacyFee", "TransactionRequestFILFee", "TransactionRequestFixedFee", "TransactionRequestSOLFee", "TransactionRequestUtxoFee"];

export default TransactionRequestFee;

