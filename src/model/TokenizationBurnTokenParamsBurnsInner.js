/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TokenizationBurnTokenParamsBurnsInner model module.
 * @module model/TokenizationBurnTokenParamsBurnsInner
 */
class TokenizationBurnTokenParamsBurnsInner {
    /**
     * Constructs a new <code>TokenizationBurnTokenParamsBurnsInner</code>.
     * @alias module:model/TokenizationBurnTokenParamsBurnsInner
     * @param amount {String} The amount of tokens to burn.
     * @param from_address {String} The address to burn tokens from.
     */
    constructor(amount, from_address) { 
        
        TokenizationBurnTokenParamsBurnsInner.initialize(this, amount, from_address);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, from_address) { 
        obj['amount'] = amount;
        obj['from_address'] = from_address;
    }

    /**
     * Constructs a <code>TokenizationBurnTokenParamsBurnsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokenizationBurnTokenParamsBurnsInner} obj Optional instance to populate.
     * @return {module:model/TokenizationBurnTokenParamsBurnsInner} The populated <code>TokenizationBurnTokenParamsBurnsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TokenizationBurnTokenParamsBurnsInner();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('from_address')) {
                obj['from_address'] = ApiClient.convertToType(data['from_address'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TokenizationBurnTokenParamsBurnsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TokenizationBurnTokenParamsBurnsInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TokenizationBurnTokenParamsBurnsInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // ensure the json data is a string
        if (data['from_address'] && !(typeof data['from_address'] === 'string' || data['from_address'] instanceof String)) {
            throw new Error("Expected the field `from_address` to be a primitive type in the JSON string but got " + data['from_address']);
        }

        return true;
    }


}

TokenizationBurnTokenParamsBurnsInner.RequiredProperties = ["amount", "from_address"];

/**
 * The amount of tokens to burn.
 * @member {String} amount
 */
TokenizationBurnTokenParamsBurnsInner.prototype['amount'] = undefined;

/**
 * The address to burn tokens from.
 * @member {String} from_address
 */
TokenizationBurnTokenParamsBurnsInner.prototype['from_address'] = undefined;






export default TokenizationBurnTokenParamsBurnsInner;

