/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SOLBase from './SOLBase';
import SOLComputeUnit from './SOLComputeUnit';

/**
 * The EstimatedSOLFeeSlow model module.
 * @module model/EstimatedSOLFeeSlow
 */
class EstimatedSOLFeeSlow {
    /**
     * Constructs a new <code>EstimatedSOLFeeSlow</code>.
     * @alias module:model/EstimatedSOLFeeSlow
     * @implements module:model/SOLComputeUnit
     * @implements module:model/SOLBase
     * @param compute_unit_price {String} The cost per compute unit. Transactions consume computational resources measured in compute units, and this price helps determine the cost of executing transactions, especially complex ones involving smart contracts.
     * @param compute_unit_limit {String} The maximum number of compute units allowed for a transaction. This limits the resources any single transaction can consume, preventing excessive resource usage that could impact network performance negatively.
     * @param base_fee {String} The fundamental fee required for each transaction. It is charged to prevent spam transactions and network congestion, ensuring that only meaningful transactions consume network resources.
     */
    constructor(compute_unit_price, compute_unit_limit, base_fee) { 
        SOLComputeUnit.initialize(this);SOLBase.initialize(this);
        EstimatedSOLFeeSlow.initialize(this, compute_unit_price, compute_unit_limit, base_fee);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, compute_unit_price, compute_unit_limit, base_fee) { 
        obj['compute_unit_price'] = compute_unit_price;
        obj['compute_unit_limit'] = compute_unit_limit;
        obj['base_fee'] = base_fee;
    }

    /**
     * Constructs a <code>EstimatedSOLFeeSlow</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EstimatedSOLFeeSlow} obj Optional instance to populate.
     * @return {module:model/EstimatedSOLFeeSlow} The populated <code>EstimatedSOLFeeSlow</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EstimatedSOLFeeSlow();
            SOLComputeUnit.constructFromObject(data, obj);
            SOLBase.constructFromObject(data, obj);

            if (data.hasOwnProperty('compute_unit_price')) {
                obj['compute_unit_price'] = ApiClient.convertToType(data['compute_unit_price'], 'String');
            }
            if (data.hasOwnProperty('compute_unit_limit')) {
                obj['compute_unit_limit'] = ApiClient.convertToType(data['compute_unit_limit'], 'String');
            }
            if (data.hasOwnProperty('base_fee')) {
                obj['base_fee'] = ApiClient.convertToType(data['base_fee'], 'String');
            }
            if (data.hasOwnProperty('rent_amount')) {
                obj['rent_amount'] = ApiClient.convertToType(data['rent_amount'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EstimatedSOLFeeSlow</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EstimatedSOLFeeSlow</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EstimatedSOLFeeSlow.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['compute_unit_price'] && !(typeof data['compute_unit_price'] === 'string' || data['compute_unit_price'] instanceof String)) {
            throw new Error("Expected the field `compute_unit_price` to be a primitive type in the JSON string but got " + data['compute_unit_price']);
        }
        // ensure the json data is a string
        if (data['compute_unit_limit'] && !(typeof data['compute_unit_limit'] === 'string' || data['compute_unit_limit'] instanceof String)) {
            throw new Error("Expected the field `compute_unit_limit` to be a primitive type in the JSON string but got " + data['compute_unit_limit']);
        }
        // ensure the json data is a string
        if (data['base_fee'] && !(typeof data['base_fee'] === 'string' || data['base_fee'] instanceof String)) {
            throw new Error("Expected the field `base_fee` to be a primitive type in the JSON string but got " + data['base_fee']);
        }
        // ensure the json data is a string
        if (data['rent_amount'] && !(typeof data['rent_amount'] === 'string' || data['rent_amount'] instanceof String)) {
            throw new Error("Expected the field `rent_amount` to be a primitive type in the JSON string but got " + data['rent_amount']);
        }

        return true;
    }


}

EstimatedSOLFeeSlow.RequiredProperties = ["compute_unit_price", "compute_unit_limit", "base_fee"];

/**
 * The cost per compute unit. Transactions consume computational resources measured in compute units, and this price helps determine the cost of executing transactions, especially complex ones involving smart contracts.
 * @member {String} compute_unit_price
 */
EstimatedSOLFeeSlow.prototype['compute_unit_price'] = undefined;

/**
 * The maximum number of compute units allowed for a transaction. This limits the resources any single transaction can consume, preventing excessive resource usage that could impact network performance negatively.
 * @member {String} compute_unit_limit
 */
EstimatedSOLFeeSlow.prototype['compute_unit_limit'] = undefined;

/**
 * The fundamental fee required for each transaction. It is charged to prevent spam transactions and network congestion, ensuring that only meaningful transactions consume network resources.
 * @member {String} base_fee
 */
EstimatedSOLFeeSlow.prototype['base_fee'] = undefined;

/**
 * The fee charged as rent for maintaining the state of accounts on the blockchain. This rent ensures accounts are stored on-chain over the long term and that there's sufficient balance to sustain the account state.
 * @member {String} rent_amount
 */
EstimatedSOLFeeSlow.prototype['rent_amount'] = undefined;


// Implement SOLComputeUnit interface:
/**
 * The cost per compute unit. Transactions consume computational resources measured in compute units, and this price helps determine the cost of executing transactions, especially complex ones involving smart contracts.
 * @member {String} compute_unit_price
 */
SOLComputeUnit.prototype['compute_unit_price'] = undefined;
/**
 * The maximum number of compute units allowed for a transaction. This limits the resources any single transaction can consume, preventing excessive resource usage that could impact network performance negatively.
 * @member {String} compute_unit_limit
 */
SOLComputeUnit.prototype['compute_unit_limit'] = undefined;
// Implement SOLBase interface:
/**
 * The fundamental fee required for each transaction. It is charged to prevent spam transactions and network congestion, ensuring that only meaningful transactions consume network resources.
 * @member {String} base_fee
 */
SOLBase.prototype['base_fee'] = undefined;
/**
 * The fee charged as rent for maintaining the state of accounts on the blockchain. This rent ensures accounts are stored on-chain over the long term and that there's sufficient balance to sustain the account state.
 * @member {String} rent_amount
 */
SOLBase.prototype['rent_amount'] = undefined;




export default EstimatedSOLFeeSlow;

