/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FeeType from './FeeType';
import TransactionEvmEip1559Fee from './TransactionEvmEip1559Fee';
import TransactionEvmLegacyFee from './TransactionEvmLegacyFee';
import TransactionFILFee from './TransactionFILFee';
import TransactionFixedFee from './TransactionFixedFee';
import TransactionSOLFee from './TransactionSOLFee';
import TransactionUtxoFee from './TransactionUtxoFee';

/**
 * The TransactionFee model module.
 * @module model/TransactionFee
 */
class TransactionFee {
    /**
     * Constructs a new <code>TransactionFee</code>.
     * @alias module:model/TransactionFee
     * @param {(module:model/TransactionEvmEip1559Fee|module:model/TransactionEvmLegacyFee|module:model/TransactionFILFee|module:model/TransactionFixedFee|module:model/TransactionSOLFee|module:model/TransactionUtxoFee)} instance The actual instance to initialize TransactionFee.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        var discriminatorValue = instance["fee_type"];

        if (discriminatorValue) {
            switch(discriminatorValue) {
                case "EVM_EIP_1559":
                    this.actualInstance = TransactionEvmEip1559Fee.constructFromObject(instance);
                    match++;
                    break;
                case "EVM_Legacy":
                    this.actualInstance = TransactionEvmLegacyFee.constructFromObject(instance);
                    match++;
                    break;
                case "FIL":
                    this.actualInstance = TransactionFILFee.constructFromObject(instance);
                    match++;
                    break;
                case "Fixed":
                    this.actualInstance = TransactionFixedFee.constructFromObject(instance);
                    match++;
                    break;
                case "SOL":
                    this.actualInstance = TransactionSOLFee.constructFromObject(instance);
                    match++;
                    break;
                case "UTXO":
                    this.actualInstance = TransactionUtxoFee.constructFromObject(instance);
                    match++;
                    break;
                default:
                    errorMessages.push("Unrecognized discriminator value: " + discriminatorValue);
                    break;
            }
            return;
        }

        try {
            if (instance instanceof TransactionEvmEip1559Fee) {
                this.actualInstance = instance;
            } else if(!!TransactionEvmEip1559Fee.validateJSON && TransactionEvmEip1559Fee.validateJSON(instance)){
                // plain JS object
                // create TransactionEvmEip1559Fee from JS object
                this.actualInstance = TransactionEvmEip1559Fee.constructFromObject(instance);
            } else {
                if(TransactionEvmEip1559Fee.constructFromObject(instance)) {
                    if (!!TransactionEvmEip1559Fee.constructFromObject(instance).toJSON) {
                        if (TransactionEvmEip1559Fee.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionEvmEip1559Fee.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionEvmEip1559Fee.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionEvmEip1559Fee
            errorMessages.push("Failed to construct TransactionEvmEip1559Fee: " + err)
        }

        try {
            if (instance instanceof TransactionEvmLegacyFee) {
                this.actualInstance = instance;
            } else if(!!TransactionEvmLegacyFee.validateJSON && TransactionEvmLegacyFee.validateJSON(instance)){
                // plain JS object
                // create TransactionEvmLegacyFee from JS object
                this.actualInstance = TransactionEvmLegacyFee.constructFromObject(instance);
            } else {
                if(TransactionEvmLegacyFee.constructFromObject(instance)) {
                    if (!!TransactionEvmLegacyFee.constructFromObject(instance).toJSON) {
                        if (TransactionEvmLegacyFee.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionEvmLegacyFee.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionEvmLegacyFee.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionEvmLegacyFee
            errorMessages.push("Failed to construct TransactionEvmLegacyFee: " + err)
        }

        try {
            if (instance instanceof TransactionUtxoFee) {
                this.actualInstance = instance;
            } else if(!!TransactionUtxoFee.validateJSON && TransactionUtxoFee.validateJSON(instance)){
                // plain JS object
                // create TransactionUtxoFee from JS object
                this.actualInstance = TransactionUtxoFee.constructFromObject(instance);
            } else {
                if(TransactionUtxoFee.constructFromObject(instance)) {
                    if (!!TransactionUtxoFee.constructFromObject(instance).toJSON) {
                        if (TransactionUtxoFee.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionUtxoFee.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionUtxoFee.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionUtxoFee
            errorMessages.push("Failed to construct TransactionUtxoFee: " + err)
        }

        try {
            if (instance instanceof TransactionFixedFee) {
                this.actualInstance = instance;
            } else if(!!TransactionFixedFee.validateJSON && TransactionFixedFee.validateJSON(instance)){
                // plain JS object
                // create TransactionFixedFee from JS object
                this.actualInstance = TransactionFixedFee.constructFromObject(instance);
            } else {
                if(TransactionFixedFee.constructFromObject(instance)) {
                    if (!!TransactionFixedFee.constructFromObject(instance).toJSON) {
                        if (TransactionFixedFee.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionFixedFee.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionFixedFee.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionFixedFee
            errorMessages.push("Failed to construct TransactionFixedFee: " + err)
        }

        try {
            if (instance instanceof TransactionSOLFee) {
                this.actualInstance = instance;
            } else if(!!TransactionSOLFee.validateJSON && TransactionSOLFee.validateJSON(instance)){
                // plain JS object
                // create TransactionSOLFee from JS object
                this.actualInstance = TransactionSOLFee.constructFromObject(instance);
            } else {
                if(TransactionSOLFee.constructFromObject(instance)) {
                    if (!!TransactionSOLFee.constructFromObject(instance).toJSON) {
                        if (TransactionSOLFee.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionSOLFee.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionSOLFee.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionSOLFee
            errorMessages.push("Failed to construct TransactionSOLFee: " + err)
        }

        try {
            if (instance instanceof TransactionFILFee) {
                this.actualInstance = instance;
            } else if(!!TransactionFILFee.validateJSON && TransactionFILFee.validateJSON(instance)){
                // plain JS object
                // create TransactionFILFee from JS object
                this.actualInstance = TransactionFILFee.constructFromObject(instance);
            } else {
                if(TransactionFILFee.constructFromObject(instance)) {
                    if (!!TransactionFILFee.constructFromObject(instance).toJSON) {
                        if (TransactionFILFee.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionFILFee.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionFILFee.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionFILFee
            errorMessages.push("Failed to construct TransactionFILFee: " + err)
        }

        // if (match > 1) {
        //    throw new Error("Multiple matches found constructing `TransactionFee` with oneOf schemas TransactionEvmEip1559Fee, TransactionEvmLegacyFee, TransactionFILFee, TransactionFixedFee, TransactionSOLFee, TransactionUtxoFee. Input: " + JSON.stringify(instance));
        // } else
        if (match === 0) {
        //    this.actualInstance = null; // clear the actual instance in case there are multiple matches
        //    throw new Error("No match found constructing `TransactionFee` with oneOf schemas TransactionEvmEip1559Fee, TransactionEvmLegacyFee, TransactionFILFee, TransactionFixedFee, TransactionSOLFee, TransactionUtxoFee. Details: " +
        //                    errorMessages.join(", "));
        return;
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>TransactionFee</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionFee} obj Optional instance to populate.
     * @return {module:model/TransactionFee} The populated <code>TransactionFee</code> instance.
     */
    static constructFromObject(data, obj) {
        return new TransactionFee(data);
    }

    /**
     * Gets the actual instance, which can be <code>TransactionEvmEip1559Fee</code>, <code>TransactionEvmLegacyFee</code>, <code>TransactionFILFee</code>, <code>TransactionFixedFee</code>, <code>TransactionSOLFee</code>, <code>TransactionUtxoFee</code>.
     * @return {(module:model/TransactionEvmEip1559Fee|module:model/TransactionEvmLegacyFee|module:model/TransactionFILFee|module:model/TransactionFixedFee|module:model/TransactionSOLFee|module:model/TransactionUtxoFee)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>TransactionEvmEip1559Fee</code>, <code>TransactionEvmLegacyFee</code>, <code>TransactionFILFee</code>, <code>TransactionFixedFee</code>, <code>TransactionSOLFee</code>, <code>TransactionUtxoFee</code>.
     * @param {(module:model/TransactionEvmEip1559Fee|module:model/TransactionEvmLegacyFee|module:model/TransactionFILFee|module:model/TransactionFixedFee|module:model/TransactionSOLFee|module:model/TransactionUtxoFee)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = TransactionFee.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of TransactionFee from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/TransactionFee} An instance of TransactionFee.
     */
    static fromJSON = function(json_string){
        return TransactionFee.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/FeeType} fee_type
 */
TransactionFee.prototype['fee_type'] = undefined;

/**
 * The token ID of the transaction fee.
 * @member {String} token_id
 */
TransactionFee.prototype['token_id'] = undefined;

/**
 * The gas price (gas fee per gas unit) on the chain, in wei. The gas price represents the amount of ETH that must be paid to validators for processing transactions.
 * @member {String} effective_gas_price
 */
TransactionFee.prototype['effective_gas_price'] = undefined;

/**
 * The transaction fee.
 * @member {String} fee_used
 */
TransactionFee.prototype['fee_used'] = undefined;

/**
 * The estimated transaction fee.
 * @member {String} estimated_fee_used
 */
TransactionFee.prototype['estimated_fee_used'] = undefined;

/**
 * The gas units used in the transaction.
 * @member {String} gas_used
 */
TransactionFee.prototype['gas_used'] = undefined;

/**
 * The maximum gas fee per gas unit used on the chain, in wei.
 * @member {String} max_fee_per_gas
 */
TransactionFee.prototype['max_fee_per_gas'] = undefined;

/**
 * The maximum priority fee per gas unit used, in wei. The maximum priority fee represents the highest amount of miner tips that you are willing to pay for your transaction.
 * @member {String} max_priority_fee_per_gas
 */
TransactionFee.prototype['max_priority_fee_per_gas'] = undefined;

/**
 * This defines the maximum amount of computational effort that a transaction is allowed to consume. It's a way to cap the resources that a transaction can use, ensuring it doesn't consume excessive network resources.
 * @member {String} gas_limit
 */
TransactionFee.prototype['gas_limit'] = undefined;

/**
 * The gas price, in wei. The gas price represents the amount of ETH that must be paid to validators for processing transactions per gas unit used.
 * @member {String} gas_price
 */
TransactionFee.prototype['gas_price'] = undefined;

/**
 * The maximum fee that you are willing to pay for the transaction. Provide the value without applying precision. The transaction will fail if the transaction fee exceeds the maximum fee.
 * @member {String} max_fee_amount
 */
TransactionFee.prototype['max_fee_amount'] = undefined;

/**
 * The fee rate in sat/vByte. The fee rate represents the satoshis you are willing to pay for each byte of data that your transaction will consume on the blockchain.
 * @member {String} fee_rate
 */
TransactionFee.prototype['fee_rate'] = undefined;

/**
 * The fundamental fee required for each transaction. It is charged to prevent spam transactions and network congestion, ensuring that only meaningful transactions consume network resources.
 * @member {String} base_fee
 */
TransactionFee.prototype['base_fee'] = undefined;

/**
 * The fee charged as rent for maintaining the state of accounts on the blockchain. This rent ensures accounts are stored on-chain over the long term and that there's sufficient balance to sustain the account state.
 * @member {String} rent_amount
 */
TransactionFee.prototype['rent_amount'] = undefined;

/**
 * The cost per compute unit. Transactions consume computational resources measured in compute units, and this price helps determine the cost of executing transactions, especially complex ones involving smart contracts.
 * @member {String} compute_unit_price
 */
TransactionFee.prototype['compute_unit_price'] = undefined;

/**
 * The maximum number of compute units allowed for a transaction. This limits the resources any single transaction can consume, preventing excessive resource usage that could impact network performance negatively.
 * @member {String} compute_unit_limit
 */
TransactionFee.prototype['compute_unit_limit'] = undefined;

/**
 * This is the minimum fee required to include a transaction in a block. It is determined by the network's congestion level, which adjusts to maintain a target block utilization rate. The base fee is burned, reducing the total supply of Filecoin over time.
 * @member {String} gas_base
 */
TransactionFee.prototype['gas_base'] = undefined;

/**
 * An optional additional fee that users can include to prioritize their transactions over others. It acts like a tip to incentivize miners to select and include your transaction over transactions with only the base fee.
 * @member {String} gas_premium
 */
TransactionFee.prototype['gas_premium'] = undefined;

/**
 * The gas_fee_cap is a user-defined limit on how much they are willing to pay per unit of gas.
 * @member {String} gas_fee_cap
 */
TransactionFee.prototype['gas_fee_cap'] = undefined;


TransactionFee.OneOf = ["TransactionEvmEip1559Fee", "TransactionEvmLegacyFee", "TransactionFILFee", "TransactionFixedFee", "TransactionSOLFee", "TransactionUtxoFee"];

export default TransactionFee;

