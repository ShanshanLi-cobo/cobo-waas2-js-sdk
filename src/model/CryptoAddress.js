/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CryptoAddress model module.
 * @module model/CryptoAddress
 */
class CryptoAddress {
    /**
     * Constructs a new <code>CryptoAddress</code>.
     * @alias module:model/CryptoAddress
     * @param token_id {String} The token identifier (e.g., ETH_USDT, TRON_USDT) that this address is associated with.
     * @param crypto_address_id {String} Unique identifier for the pre-approved crypto address, used to reference the address securely in requests. This ID is returned by the system and should be used instead of the raw blockchain address in API calls.
     * @param address {String} The actual blockchain address to which funds will be transferred. This is for display purposes only; external clients should always use address_id to refer to the address in secure operations.
     */
    constructor(token_id, crypto_address_id, address) { 
        
        CryptoAddress.initialize(this, token_id, crypto_address_id, address);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, token_id, crypto_address_id, address) { 
        obj['token_id'] = token_id;
        obj['crypto_address_id'] = crypto_address_id;
        obj['address'] = address;
    }

    /**
     * Constructs a <code>CryptoAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CryptoAddress} obj Optional instance to populate.
     * @return {module:model/CryptoAddress} The populated <code>CryptoAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CryptoAddress();

            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('crypto_address_id')) {
                obj['crypto_address_id'] = ApiClient.convertToType(data['crypto_address_id'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('created_timestamp')) {
                obj['created_timestamp'] = ApiClient.convertToType(data['created_timestamp'], 'Number');
            }
            if (data.hasOwnProperty('updated_timestamp')) {
                obj['updated_timestamp'] = ApiClient.convertToType(data['updated_timestamp'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CryptoAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CryptoAddress</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CryptoAddress.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is a string
        if (data['crypto_address_id'] && !(typeof data['crypto_address_id'] === 'string' || data['crypto_address_id'] instanceof String)) {
            throw new Error("Expected the field `crypto_address_id` to be a primitive type in the JSON string but got " + data['crypto_address_id']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }

        return true;
    }


}

CryptoAddress.RequiredProperties = ["token_id", "crypto_address_id", "address"];

/**
 * The token identifier (e.g., ETH_USDT, TRON_USDT) that this address is associated with.
 * @member {String} token_id
 */
CryptoAddress.prototype['token_id'] = undefined;

/**
 * Unique identifier for the pre-approved crypto address, used to reference the address securely in requests. This ID is returned by the system and should be used instead of the raw blockchain address in API calls.
 * @member {String} crypto_address_id
 */
CryptoAddress.prototype['crypto_address_id'] = undefined;

/**
 * The actual blockchain address to which funds will be transferred. This is for display purposes only; external clients should always use address_id to refer to the address in secure operations.
 * @member {String} address
 */
CryptoAddress.prototype['address'] = undefined;

/**
 * A human-readable label or alias for the crypto address, set by the merchant or platform operator. This field is optional and intended to help distinguish addresses by usage or purpose (e.g., \"Main Payout Wallet\", \"Cold Wallet\").
 * @member {String} label
 */
CryptoAddress.prototype['label'] = undefined;

/**
 * The created time of the crypto address, represented as a UNIX timestamp in seconds.
 * @member {Number} created_timestamp
 */
CryptoAddress.prototype['created_timestamp'] = undefined;

/**
 * The updated time of the crypto address, represented as a UNIX timestamp in seconds.
 * @member {Number} updated_timestamp
 */
CryptoAddress.prototype['updated_timestamp'] = undefined;






export default CryptoAddress;

