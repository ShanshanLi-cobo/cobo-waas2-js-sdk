/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TokenizationSolWrappedTokenPermissionParams model module.
 * @module model/TokenizationSolWrappedTokenPermissionParams
 */
class TokenizationSolWrappedTokenPermissionParams {
    /**
     * Constructs a new <code>TokenizationSolWrappedTokenPermissionParams</code>.
     * Role-based permission settings for Solana wrapped token. The owner is automatically set to the address that calls the initialize function (typically the issuance wallet) and cannot be specified here. Only wrapper and pauser roles can be configured during initialization.
     * @alias module:model/TokenizationSolWrappedTokenPermissionParams
     */
    constructor() { 
        
        TokenizationSolWrappedTokenPermissionParams.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TokenizationSolWrappedTokenPermissionParams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokenizationSolWrappedTokenPermissionParams} obj Optional instance to populate.
     * @return {module:model/TokenizationSolWrappedTokenPermissionParams} The populated <code>TokenizationSolWrappedTokenPermissionParams</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TokenizationSolWrappedTokenPermissionParams();

            if (data.hasOwnProperty('wrapper')) {
                obj['wrapper'] = ApiClient.convertToType(data['wrapper'], ['String']);
            }
            if (data.hasOwnProperty('pauser')) {
                obj['pauser'] = ApiClient.convertToType(data['pauser'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TokenizationSolWrappedTokenPermissionParams</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TokenizationSolWrappedTokenPermissionParams</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['wrapper'])) {
            throw new Error("Expected the field `wrapper` to be an array in the JSON data but got " + data['wrapper']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pauser'])) {
            throw new Error("Expected the field `pauser` to be an array in the JSON data but got " + data['pauser']);
        }

        return true;
    }


}



/**
 * List of Solana wallet addresses that can perform wrap/unwrap operations. Multiple addresses can be assigned this role.
 * @member {Array.<String>} wrapper
 */
TokenizationSolWrappedTokenPermissionParams.prototype['wrapper'] = undefined;

/**
 * List of Solana wallet addresses that can pause/unpause the contract. Multiple addresses can be assigned this role.
 * @member {Array.<String>} pauser
 */
TokenizationSolWrappedTokenPermissionParams.prototype['pauser'] = undefined;






export default TokenizationSolWrappedTokenPermissionParams;

