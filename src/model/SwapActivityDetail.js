/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SwapActivity from './SwapActivity';
import SwapActivityApprovers from './SwapActivityApprovers';
import SwapActivitySigners from './SwapActivitySigners';
import SwapActivityStatus from './SwapActivityStatus';
import SwapActivityTimeline from './SwapActivityTimeline';
import SwapReceivingTransaction from './SwapReceivingTransaction';
import SwapType from './SwapType';
import TransactionInitiatorType from './TransactionInitiatorType';
import TransactionRequestFee from './TransactionRequestFee';

/**
 * The SwapActivityDetail model module.
 * @module model/SwapActivityDetail
 */
class SwapActivityDetail {
    /**
     * Constructs a new <code>SwapActivityDetail</code>.
     * @alias module:model/SwapActivityDetail
     * @implements module:model/SwapActivity
     */
    constructor() { 
        SwapActivity.initialize(this);
        SwapActivityDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SwapActivityDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SwapActivityDetail} obj Optional instance to populate.
     * @return {module:model/SwapActivityDetail} The populated <code>SwapActivityDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SwapActivityDetail();
            SwapActivity.constructFromObject(data, obj);

            if (data.hasOwnProperty('activity_id')) {
                obj['activity_id'] = ApiClient.convertToType(data['activity_id'], 'String');
            }
            if (data.hasOwnProperty('swap_type')) {
                obj['swap_type'] = SwapType.constructFromObject(data['swap_type']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = SwapActivityStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('wallet_id')) {
                obj['wallet_id'] = ApiClient.convertToType(data['wallet_id'], 'String');
            }
            if (data.hasOwnProperty('pay_token_id')) {
                obj['pay_token_id'] = ApiClient.convertToType(data['pay_token_id'], 'String');
            }
            if (data.hasOwnProperty('receive_token_id')) {
                obj['receive_token_id'] = ApiClient.convertToType(data['receive_token_id'], 'String');
            }
            if (data.hasOwnProperty('pay_amount')) {
                obj['pay_amount'] = ApiClient.convertToType(data['pay_amount'], 'String');
            }
            if (data.hasOwnProperty('receive_amount')) {
                obj['receive_amount'] = ApiClient.convertToType(data['receive_amount'], 'String');
            }
            if (data.hasOwnProperty('fee_token_id')) {
                obj['fee_token_id'] = ApiClient.convertToType(data['fee_token_id'], 'String');
            }
            if (data.hasOwnProperty('fee_amount')) {
                obj['fee_amount'] = ApiClient.convertToType(data['fee_amount'], 'String');
            }
            if (data.hasOwnProperty('initiator')) {
                obj['initiator'] = ApiClient.convertToType(data['initiator'], 'String');
            }
            if (data.hasOwnProperty('initiator_type')) {
                obj['initiator_type'] = TransactionInitiatorType.constructFromObject(data['initiator_type']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('created_timestamp')) {
                obj['created_timestamp'] = ApiClient.convertToType(data['created_timestamp'], 'Number');
            }
            if (data.hasOwnProperty('updated_timestamp')) {
                obj['updated_timestamp'] = ApiClient.convertToType(data['updated_timestamp'], 'Number');
            }
            if (data.hasOwnProperty('network_fee')) {
                obj['network_fee'] = TransactionRequestFee.constructFromObject(data['network_fee']);
            }
            if (data.hasOwnProperty('destination_address')) {
                obj['destination_address'] = ApiClient.convertToType(data['destination_address'], 'String');
            }
            if (data.hasOwnProperty('timeline')) {
                obj['timeline'] = ApiClient.convertToType(data['timeline'], [SwapActivityTimeline]);
            }
            if (data.hasOwnProperty('approvers')) {
                obj['approvers'] = ApiClient.convertToType(data['approvers'], [SwapActivityApprovers]);
            }
            if (data.hasOwnProperty('signers')) {
                obj['signers'] = ApiClient.convertToType(data['signers'], [SwapActivitySigners]);
            }
            if (data.hasOwnProperty('receiving_transaction')) {
                obj['receiving_transaction'] = SwapReceivingTransaction.constructFromObject(data['receiving_transaction']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SwapActivityDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SwapActivityDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['activity_id'] && !(typeof data['activity_id'] === 'string' || data['activity_id'] instanceof String)) {
            throw new Error("Expected the field `activity_id` to be a primitive type in the JSON string but got " + data['activity_id']);
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        // ensure the json data is a string
        if (data['wallet_id'] && !(typeof data['wallet_id'] === 'string' || data['wallet_id'] instanceof String)) {
            throw new Error("Expected the field `wallet_id` to be a primitive type in the JSON string but got " + data['wallet_id']);
        }
        // ensure the json data is a string
        if (data['pay_token_id'] && !(typeof data['pay_token_id'] === 'string' || data['pay_token_id'] instanceof String)) {
            throw new Error("Expected the field `pay_token_id` to be a primitive type in the JSON string but got " + data['pay_token_id']);
        }
        // ensure the json data is a string
        if (data['receive_token_id'] && !(typeof data['receive_token_id'] === 'string' || data['receive_token_id'] instanceof String)) {
            throw new Error("Expected the field `receive_token_id` to be a primitive type in the JSON string but got " + data['receive_token_id']);
        }
        // ensure the json data is a string
        if (data['pay_amount'] && !(typeof data['pay_amount'] === 'string' || data['pay_amount'] instanceof String)) {
            throw new Error("Expected the field `pay_amount` to be a primitive type in the JSON string but got " + data['pay_amount']);
        }
        // ensure the json data is a string
        if (data['receive_amount'] && !(typeof data['receive_amount'] === 'string' || data['receive_amount'] instanceof String)) {
            throw new Error("Expected the field `receive_amount` to be a primitive type in the JSON string but got " + data['receive_amount']);
        }
        // ensure the json data is a string
        if (data['fee_token_id'] && !(typeof data['fee_token_id'] === 'string' || data['fee_token_id'] instanceof String)) {
            throw new Error("Expected the field `fee_token_id` to be a primitive type in the JSON string but got " + data['fee_token_id']);
        }
        // ensure the json data is a string
        if (data['fee_amount'] && !(typeof data['fee_amount'] === 'string' || data['fee_amount'] instanceof String)) {
            throw new Error("Expected the field `fee_amount` to be a primitive type in the JSON string but got " + data['fee_amount']);
        }
        // ensure the json data is a string
        if (data['initiator'] && !(typeof data['initiator'] === 'string' || data['initiator'] instanceof String)) {
            throw new Error("Expected the field `initiator` to be a primitive type in the JSON string but got " + data['initiator']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `network_fee`
        if (data['network_fee']) { // data not null
          if (!!TransactionRequestFee.validateJSON) {
            TransactionRequestFee.validateJSON(data['network_fee']);
          }
        }
        // ensure the json data is a string
        if (data['destination_address'] && !(typeof data['destination_address'] === 'string' || data['destination_address'] instanceof String)) {
            throw new Error("Expected the field `destination_address` to be a primitive type in the JSON string but got " + data['destination_address']);
        }
        if (data['timeline']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['timeline'])) {
                throw new Error("Expected the field `timeline` to be an array in the JSON data but got " + data['timeline']);
            }
            // validate the optional field `timeline` (array)
            for (const item of data['timeline']) {
                SwapActivityTimeline.validateJSON(item);
            };
        }
        if (data['approvers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['approvers'])) {
                throw new Error("Expected the field `approvers` to be an array in the JSON data but got " + data['approvers']);
            }
            // validate the optional field `approvers` (array)
            for (const item of data['approvers']) {
                SwapActivityApprovers.validateJSON(item);
            };
        }
        if (data['signers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['signers'])) {
                throw new Error("Expected the field `signers` to be an array in the JSON data but got " + data['signers']);
            }
            // validate the optional field `signers` (array)
            for (const item of data['signers']) {
                SwapActivitySigners.validateJSON(item);
            };
        }
        // validate the optional field `receiving_transaction`
        if (data['receiving_transaction']) { // data not null
          if (!!SwapReceivingTransaction.validateJSON) {
            SwapReceivingTransaction.validateJSON(data['receiving_transaction']);
          }
        }

        return true;
    }


}



/**
 * The unique identifier of the swap activity.
 * @member {String} activity_id
 */
SwapActivityDetail.prototype['activity_id'] = undefined;

/**
 * @member {module:model/SwapType} swap_type
 */
SwapActivityDetail.prototype['swap_type'] = undefined;

/**
 * @member {module:model/SwapActivityStatus} status
 */
SwapActivityDetail.prototype['status'] = undefined;

/**
 * The request id of the swap activity.
 * @member {String} request_id
 */
SwapActivityDetail.prototype['request_id'] = undefined;

/**
 * The unique identifier of the wallet.
 * @member {String} wallet_id
 */
SwapActivityDetail.prototype['wallet_id'] = undefined;

/**
 * The token ID to pay.
 * @member {String} pay_token_id
 */
SwapActivityDetail.prototype['pay_token_id'] = undefined;

/**
 * The token ID to receive.
 * @member {String} receive_token_id
 */
SwapActivityDetail.prototype['receive_token_id'] = undefined;

/**
 * The amount of tokens to bridge.
 * @member {String} pay_amount
 */
SwapActivityDetail.prototype['pay_amount'] = undefined;

/**
 * The amount of tokens to receive.
 * @member {String} receive_amount
 */
SwapActivityDetail.prototype['receive_amount'] = undefined;

/**
 * The fee token ID.
 * @member {String} fee_token_id
 */
SwapActivityDetail.prototype['fee_token_id'] = undefined;

/**
 * The amount of fee.
 * @member {String} fee_amount
 */
SwapActivityDetail.prototype['fee_amount'] = undefined;

/**
 * The initiator of the swap activity.
 * @member {String} initiator
 */
SwapActivityDetail.prototype['initiator'] = undefined;

/**
 * @member {module:model/TransactionInitiatorType} initiator_type
 */
SwapActivityDetail.prototype['initiator_type'] = undefined;

/**
 * The description of the swap activity.
 * @member {String} description
 */
SwapActivityDetail.prototype['description'] = undefined;

/**
 * The time when the swap activity was created, in Unix timestamp format, measured in milliseconds.
 * @member {Number} created_timestamp
 */
SwapActivityDetail.prototype['created_timestamp'] = undefined;

/**
 * The time when the swap activity was last updated, in Unix timestamp format, measured in milliseconds.
 * @member {Number} updated_timestamp
 */
SwapActivityDetail.prototype['updated_timestamp'] = undefined;

/**
 * @member {module:model/TransactionRequestFee} network_fee
 */
SwapActivityDetail.prototype['network_fee'] = undefined;

/**
 * the destination address of web3/mpc wallets.
 * @member {String} destination_address
 */
SwapActivityDetail.prototype['destination_address'] = undefined;

/**
 * @member {Array.<module:model/SwapActivityTimeline>} timeline
 */
SwapActivityDetail.prototype['timeline'] = undefined;

/**
 * @member {Array.<module:model/SwapActivityApprovers>} approvers
 */
SwapActivityDetail.prototype['approvers'] = undefined;

/**
 * @member {Array.<module:model/SwapActivitySigners>} signers
 */
SwapActivityDetail.prototype['signers'] = undefined;

/**
 * @member {module:model/SwapReceivingTransaction} receiving_transaction
 */
SwapActivityDetail.prototype['receiving_transaction'] = undefined;


// Implement SwapActivity interface:
/**
 * The unique identifier of the swap activity.
 * @member {String} activity_id
 */
SwapActivity.prototype['activity_id'] = undefined;
/**
 * @member {module:model/SwapType} swap_type
 */
SwapActivity.prototype['swap_type'] = undefined;
/**
 * @member {module:model/SwapActivityStatus} status
 */
SwapActivity.prototype['status'] = undefined;
/**
 * The request id of the swap activity.
 * @member {String} request_id
 */
SwapActivity.prototype['request_id'] = undefined;
/**
 * The unique identifier of the wallet.
 * @member {String} wallet_id
 */
SwapActivity.prototype['wallet_id'] = undefined;
/**
 * The token ID to pay.
 * @member {String} pay_token_id
 */
SwapActivity.prototype['pay_token_id'] = undefined;
/**
 * The token ID to receive.
 * @member {String} receive_token_id
 */
SwapActivity.prototype['receive_token_id'] = undefined;
/**
 * The amount of tokens to bridge.
 * @member {String} pay_amount
 */
SwapActivity.prototype['pay_amount'] = undefined;
/**
 * The amount of tokens to receive.
 * @member {String} receive_amount
 */
SwapActivity.prototype['receive_amount'] = undefined;
/**
 * The fee token ID.
 * @member {String} fee_token_id
 */
SwapActivity.prototype['fee_token_id'] = undefined;
/**
 * The amount of fee.
 * @member {String} fee_amount
 */
SwapActivity.prototype['fee_amount'] = undefined;
/**
 * The initiator of the swap activity.
 * @member {String} initiator
 */
SwapActivity.prototype['initiator'] = undefined;
/**
 * @member {module:model/TransactionInitiatorType} initiator_type
 */
SwapActivity.prototype['initiator_type'] = undefined;
/**
 * The description of the swap activity.
 * @member {String} description
 */
SwapActivity.prototype['description'] = undefined;
/**
 * The time when the swap activity was created, in Unix timestamp format, measured in milliseconds.
 * @member {Number} created_timestamp
 */
SwapActivity.prototype['created_timestamp'] = undefined;
/**
 * The time when the swap activity was last updated, in Unix timestamp format, measured in milliseconds.
 * @member {Number} updated_timestamp
 */
SwapActivity.prototype['updated_timestamp'] = undefined;
/**
 * @member {module:model/TransactionRequestFee} network_fee
 */
SwapActivity.prototype['network_fee'] = undefined;
/**
 * the destination address of web3/mpc wallets.
 * @member {String} destination_address
 */
SwapActivity.prototype['destination_address'] = undefined;




export default SwapActivityDetail;

