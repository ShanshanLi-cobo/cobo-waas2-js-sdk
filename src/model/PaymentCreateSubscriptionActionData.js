/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaymentSubscriptionActionType from './PaymentSubscriptionActionType';

/**
 * The PaymentCreateSubscriptionActionData model module.
 * @module model/PaymentCreateSubscriptionActionData
 */
class PaymentCreateSubscriptionActionData {
    /**
     * Constructs a new <code>PaymentCreateSubscriptionActionData</code>.
     * @alias module:model/PaymentCreateSubscriptionActionData
     * @param action_type {module:model/PaymentSubscriptionActionType} 
     * @param user_address {String} The subscription user address.
     * @param amount {String} The subscription crypto amount. 
     * @param token_id {String} The ID of the cryptocurrency you want to subscription. Supported values:  - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC` - USDT: `ETH_USDT`, `ARBITRUM_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     */
    constructor(action_type, user_address, amount, token_id) { 
        
        PaymentCreateSubscriptionActionData.initialize(this, action_type, user_address, amount, token_id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action_type, user_address, amount, token_id) { 
        obj['action_type'] = action_type;
        obj['user_address'] = user_address;
        obj['amount'] = amount;
        obj['token_id'] = token_id;
    }

    /**
     * Constructs a <code>PaymentCreateSubscriptionActionData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentCreateSubscriptionActionData} obj Optional instance to populate.
     * @return {module:model/PaymentCreateSubscriptionActionData} The populated <code>PaymentCreateSubscriptionActionData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentCreateSubscriptionActionData();

            if (data.hasOwnProperty('action_type')) {
                obj['action_type'] = PaymentSubscriptionActionType.constructFromObject(data['action_type']);
            }
            if (data.hasOwnProperty('user_address')) {
                obj['user_address'] = ApiClient.convertToType(data['user_address'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('discount_rate')) {
                obj['discount_rate'] = ApiClient.convertToType(data['discount_rate'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentCreateSubscriptionActionData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentCreateSubscriptionActionData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentCreateSubscriptionActionData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['user_address'] && !(typeof data['user_address'] === 'string' || data['user_address'] instanceof String)) {
            throw new Error("Expected the field `user_address` to be a primitive type in the JSON string but got " + data['user_address']);
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }

        return true;
    }


}

PaymentCreateSubscriptionActionData.RequiredProperties = ["action_type", "user_address", "amount", "token_id"];

/**
 * @member {module:model/PaymentSubscriptionActionType} action_type
 */
PaymentCreateSubscriptionActionData.prototype['action_type'] = undefined;

/**
 * The subscription user address.
 * @member {String} user_address
 */
PaymentCreateSubscriptionActionData.prototype['user_address'] = undefined;

/**
 * The subscription crypto amount. 
 * @member {String} amount
 */
PaymentCreateSubscriptionActionData.prototype['amount'] = undefined;

/**
 * The ID of the cryptocurrency you want to subscription. Supported values:  - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC` - USDT: `ETH_USDT`, `ARBITRUM_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
 * @member {String} token_id
 */
PaymentCreateSubscriptionActionData.prototype['token_id'] = undefined;

/**
 * the discount rate, discount_rate/10000
 * @member {Number} discount_rate
 */
PaymentCreateSubscriptionActionData.prototype['discount_rate'] = undefined;






export default PaymentCreateSubscriptionActionData;

