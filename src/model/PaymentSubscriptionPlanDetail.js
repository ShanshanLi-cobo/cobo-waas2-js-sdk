/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaymentSubscriptionPeriodType from './PaymentSubscriptionPeriodType';
import PaymentSubscriptionPlan from './PaymentSubscriptionPlan';

/**
 * The PaymentSubscriptionPlanDetail model module.
 * @module model/PaymentSubscriptionPlanDetail
 */
class PaymentSubscriptionPlanDetail {
    /**
     * Constructs a new <code>PaymentSubscriptionPlanDetail</code>.
     * @alias module:model/PaymentSubscriptionPlanDetail
     * @implements module:model/PaymentSubscriptionPlan
     * @param plan_id {String} The plan id in cobo.
     * @param developer_plan_id {String} The developer plan id.
     * @param period_type {module:model/PaymentSubscriptionPeriodType} 
     * @param periods {Number} 
     * @param interval {Number} 
     * @param amount {String} The subscription plan amount.  - If `currency` is set, this represents the subscription amount in the specified fiat currency. - If `currency` isn't set, this represents the settlement amount in the specified cryptocurrency. 
     */
    constructor(plan_id, developer_plan_id, period_type, periods, interval, amount) { 
        PaymentSubscriptionPlan.initialize(this, plan_id, developer_plan_id, period_type, periods, interval, amount);
        PaymentSubscriptionPlanDetail.initialize(this, plan_id, developer_plan_id, period_type, periods, interval, amount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, plan_id, developer_plan_id, period_type, periods, interval, amount) { 
        obj['plan_id'] = plan_id;
        obj['developer_plan_id'] = developer_plan_id;
        obj['period_type'] = period_type;
        obj['periods'] = periods;
        obj['interval'] = interval;
        obj['amount'] = amount;
    }

    /**
     * Constructs a <code>PaymentSubscriptionPlanDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentSubscriptionPlanDetail} obj Optional instance to populate.
     * @return {module:model/PaymentSubscriptionPlanDetail} The populated <code>PaymentSubscriptionPlanDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentSubscriptionPlanDetail();
            PaymentSubscriptionPlan.constructFromObject(data, obj);

            if (data.hasOwnProperty('blockchain_plan_id')) {
                obj['blockchain_plan_id'] = ApiClient.convertToType(data['blockchain_plan_id'], 'String');
            }
            if (data.hasOwnProperty('plan_id')) {
                obj['plan_id'] = ApiClient.convertToType(data['plan_id'], 'String');
            }
            if (data.hasOwnProperty('developer_plan_id')) {
                obj['developer_plan_id'] = ApiClient.convertToType(data['developer_plan_id'], 'String');
            }
            if (data.hasOwnProperty('period_type')) {
                obj['period_type'] = PaymentSubscriptionPeriodType.constructFromObject(data['period_type']);
            }
            if (data.hasOwnProperty('periods')) {
                obj['periods'] = ApiClient.convertToType(data['periods'], 'Number');
            }
            if (data.hasOwnProperty('interval')) {
                obj['interval'] = ApiClient.convertToType(data['interval'], 'Number');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentSubscriptionPlanDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentSubscriptionPlanDetail</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentSubscriptionPlanDetail.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['blockchain_plan_id'] && !(typeof data['blockchain_plan_id'] === 'string' || data['blockchain_plan_id'] instanceof String)) {
            throw new Error("Expected the field `blockchain_plan_id` to be a primitive type in the JSON string but got " + data['blockchain_plan_id']);
        }
        // ensure the json data is a string
        if (data['plan_id'] && !(typeof data['plan_id'] === 'string' || data['plan_id'] instanceof String)) {
            throw new Error("Expected the field `plan_id` to be a primitive type in the JSON string but got " + data['plan_id']);
        }
        // ensure the json data is a string
        if (data['developer_plan_id'] && !(typeof data['developer_plan_id'] === 'string' || data['developer_plan_id'] instanceof String)) {
            throw new Error("Expected the field `developer_plan_id` to be a primitive type in the JSON string but got " + data['developer_plan_id']);
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }

        return true;
    }


}

PaymentSubscriptionPlanDetail.RequiredProperties = ["plan_id", "developer_plan_id", "period_type", "periods", "interval", "amount"];

/**
 * The subscription plan id in blockchain.
 * @member {String} blockchain_plan_id
 */
PaymentSubscriptionPlanDetail.prototype['blockchain_plan_id'] = undefined;

/**
 * The plan id in cobo.
 * @member {String} plan_id
 */
PaymentSubscriptionPlanDetail.prototype['plan_id'] = undefined;

/**
 * The developer plan id.
 * @member {String} developer_plan_id
 */
PaymentSubscriptionPlanDetail.prototype['developer_plan_id'] = undefined;

/**
 * @member {module:model/PaymentSubscriptionPeriodType} period_type
 */
PaymentSubscriptionPlanDetail.prototype['period_type'] = undefined;

/**
 * @member {Number} periods
 */
PaymentSubscriptionPlanDetail.prototype['periods'] = undefined;

/**
 * @member {Number} interval
 */
PaymentSubscriptionPlanDetail.prototype['interval'] = undefined;

/**
 * The subscription plan amount.  - If `currency` is set, this represents the subscription amount in the specified fiat currency. - If `currency` isn't set, this represents the settlement amount in the specified cryptocurrency. 
 * @member {String} amount
 */
PaymentSubscriptionPlanDetail.prototype['amount'] = undefined;

/**
 * The ID of the cryptocurrency you want to subscription. Supported values:  - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC` - USDT: `ETH_USDT`, `ARBITRUM_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
 * @member {String} token_id
 */
PaymentSubscriptionPlanDetail.prototype['token_id'] = undefined;

/**
 * The fiat currency for settling the cryptocurrency. Currently, only `USD` is supported. Specify this field when `payout_channel` is set to `OffRamp`.
 * @member {String} currency
 */
PaymentSubscriptionPlanDetail.prototype['currency'] = undefined;


// Implement PaymentSubscriptionPlan interface:
/**
 * The plan id in cobo.
 * @member {String} plan_id
 */
PaymentSubscriptionPlan.prototype['plan_id'] = undefined;
/**
 * The developer plan id.
 * @member {String} developer_plan_id
 */
PaymentSubscriptionPlan.prototype['developer_plan_id'] = undefined;
/**
 * @member {module:model/PaymentSubscriptionPeriodType} period_type
 */
PaymentSubscriptionPlan.prototype['period_type'] = undefined;
/**
 * @member {Number} periods
 */
PaymentSubscriptionPlan.prototype['periods'] = undefined;
/**
 * @member {Number} interval
 */
PaymentSubscriptionPlan.prototype['interval'] = undefined;
/**
 * The subscription plan amount.  - If `currency` is set, this represents the subscription amount in the specified fiat currency. - If `currency` isn't set, this represents the settlement amount in the specified cryptocurrency. 
 * @member {String} amount
 */
PaymentSubscriptionPlan.prototype['amount'] = undefined;
/**
 * The ID of the cryptocurrency you want to subscription. Supported values:  - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC` - USDT: `ETH_USDT`, `ARBITRUM_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
 * @member {String} token_id
 */
PaymentSubscriptionPlan.prototype['token_id'] = undefined;
/**
 * The fiat currency for settling the cryptocurrency. Currently, only `USD` is supported. Specify this field when `payout_channel` is set to `OffRamp`.
 * @member {String} currency
 */
PaymentSubscriptionPlan.prototype['currency'] = undefined;




export default PaymentSubscriptionPlanDetail;

