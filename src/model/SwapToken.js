/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SwapToken model module.
 * @module model/SwapToken
 */
class SwapToken {
    /**
     * Constructs a new <code>SwapToken</code>.
     * @alias module:model/SwapToken
     * @param token_id {String} The token ID.
     * @param chain_id {String} The chain ID, which is the unique identifier of a blockchain.
     * @param asset_id {String} The asset ID.
     */
    constructor(token_id, chain_id, asset_id) { 
        
        SwapToken.initialize(this, token_id, chain_id, asset_id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, token_id, chain_id, asset_id) { 
        obj['token_id'] = token_id;
        obj['chain_id'] = chain_id;
        obj['asset_id'] = asset_id;
    }

    /**
     * Constructs a <code>SwapToken</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SwapToken} obj Optional instance to populate.
     * @return {module:model/SwapToken} The populated <code>SwapToken</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SwapToken();

            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('chain_id')) {
                obj['chain_id'] = ApiClient.convertToType(data['chain_id'], 'String');
            }
            if (data.hasOwnProperty('asset_id')) {
                obj['asset_id'] = ApiClient.convertToType(data['asset_id'], 'String');
            }
            if (data.hasOwnProperty('token_address')) {
                obj['token_address'] = ApiClient.convertToType(data['token_address'], 'String');
            }
            if (data.hasOwnProperty('min_amount')) {
                obj['min_amount'] = ApiClient.convertToType(data['min_amount'], 'String');
            }
            if (data.hasOwnProperty('max_amount')) {
                obj['max_amount'] = ApiClient.convertToType(data['max_amount'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SwapToken</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SwapToken</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SwapToken.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is a string
        if (data['chain_id'] && !(typeof data['chain_id'] === 'string' || data['chain_id'] instanceof String)) {
            throw new Error("Expected the field `chain_id` to be a primitive type in the JSON string but got " + data['chain_id']);
        }
        // ensure the json data is a string
        if (data['asset_id'] && !(typeof data['asset_id'] === 'string' || data['asset_id'] instanceof String)) {
            throw new Error("Expected the field `asset_id` to be a primitive type in the JSON string but got " + data['asset_id']);
        }
        // ensure the json data is a string
        if (data['token_address'] && !(typeof data['token_address'] === 'string' || data['token_address'] instanceof String)) {
            throw new Error("Expected the field `token_address` to be a primitive type in the JSON string but got " + data['token_address']);
        }
        // ensure the json data is a string
        if (data['min_amount'] && !(typeof data['min_amount'] === 'string' || data['min_amount'] instanceof String)) {
            throw new Error("Expected the field `min_amount` to be a primitive type in the JSON string but got " + data['min_amount']);
        }
        // ensure the json data is a string
        if (data['max_amount'] && !(typeof data['max_amount'] === 'string' || data['max_amount'] instanceof String)) {
            throw new Error("Expected the field `max_amount` to be a primitive type in the JSON string but got " + data['max_amount']);
        }

        return true;
    }


}

SwapToken.RequiredProperties = ["token_id", "chain_id", "asset_id"];

/**
 * The token ID.
 * @member {String} token_id
 */
SwapToken.prototype['token_id'] = undefined;

/**
 * The chain ID, which is the unique identifier of a blockchain.
 * @member {String} chain_id
 */
SwapToken.prototype['chain_id'] = undefined;

/**
 * The asset ID.
 * @member {String} asset_id
 */
SwapToken.prototype['asset_id'] = undefined;

/**
 * The on-chain contract address of the token.
 * @member {String} token_address
 */
SwapToken.prototype['token_address'] = undefined;

/**
 * The minimum amount allowed for a swap.
 * @member {String} min_amount
 */
SwapToken.prototype['min_amount'] = undefined;

/**
 * The maximum amount allowed for a swap.
 * @member {String} max_amount
 */
SwapToken.prototype['max_amount'] = undefined;






export default SwapToken;

