/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SwapQuote model module.
 * @module model/SwapQuote
 */
class SwapQuote {
    /**
     * Constructs a new <code>SwapQuote</code>.
     * @alias module:model/SwapQuote
     * @param quote_id {String} The unique id of quote.
     * @param pay_token_id {String} The token ID to pay.
     * @param pay_amount {String} The amount of tokens to pay.
     * @param receive_token_id {String} The token ID to receive.
     * @param receive_amount {String} The amount of tokens to receive.
     * @param fee_token_id {String} The token ID for the service fee.
     * @param fee_amount {String} The amount of tokens for the service fee.
     * @param quote_expired_timestamp {Number} The time when the quote will expire, in Unix timestamp format, measured in milliseconds.
     */
    constructor(quote_id, pay_token_id, pay_amount, receive_token_id, receive_amount, fee_token_id, fee_amount, quote_expired_timestamp) { 
        
        SwapQuote.initialize(this, quote_id, pay_token_id, pay_amount, receive_token_id, receive_amount, fee_token_id, fee_amount, quote_expired_timestamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, quote_id, pay_token_id, pay_amount, receive_token_id, receive_amount, fee_token_id, fee_amount, quote_expired_timestamp) { 
        obj['quote_id'] = quote_id;
        obj['pay_token_id'] = pay_token_id;
        obj['pay_amount'] = pay_amount;
        obj['receive_token_id'] = receive_token_id;
        obj['receive_amount'] = receive_amount;
        obj['fee_token_id'] = fee_token_id;
        obj['fee_amount'] = fee_amount;
        obj['quote_expired_timestamp'] = quote_expired_timestamp;
    }

    /**
     * Constructs a <code>SwapQuote</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SwapQuote} obj Optional instance to populate.
     * @return {module:model/SwapQuote} The populated <code>SwapQuote</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SwapQuote();

            if (data.hasOwnProperty('quote_id')) {
                obj['quote_id'] = ApiClient.convertToType(data['quote_id'], 'String');
            }
            if (data.hasOwnProperty('pay_token_id')) {
                obj['pay_token_id'] = ApiClient.convertToType(data['pay_token_id'], 'String');
            }
            if (data.hasOwnProperty('pay_amount')) {
                obj['pay_amount'] = ApiClient.convertToType(data['pay_amount'], 'String');
            }
            if (data.hasOwnProperty('receive_token_id')) {
                obj['receive_token_id'] = ApiClient.convertToType(data['receive_token_id'], 'String');
            }
            if (data.hasOwnProperty('receive_amount')) {
                obj['receive_amount'] = ApiClient.convertToType(data['receive_amount'], 'String');
            }
            if (data.hasOwnProperty('fee_token_id')) {
                obj['fee_token_id'] = ApiClient.convertToType(data['fee_token_id'], 'String');
            }
            if (data.hasOwnProperty('fee_amount')) {
                obj['fee_amount'] = ApiClient.convertToType(data['fee_amount'], 'String');
            }
            if (data.hasOwnProperty('min_receive_amount')) {
                obj['min_receive_amount'] = ApiClient.convertToType(data['min_receive_amount'], 'String');
            }
            if (data.hasOwnProperty('max_pay_amount')) {
                obj['max_pay_amount'] = ApiClient.convertToType(data['max_pay_amount'], 'String');
            }
            if (data.hasOwnProperty('quote_expired_timestamp')) {
                obj['quote_expired_timestamp'] = ApiClient.convertToType(data['quote_expired_timestamp'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SwapQuote</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SwapQuote</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SwapQuote.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['quote_id'] && !(typeof data['quote_id'] === 'string' || data['quote_id'] instanceof String)) {
            throw new Error("Expected the field `quote_id` to be a primitive type in the JSON string but got " + data['quote_id']);
        }
        // ensure the json data is a string
        if (data['pay_token_id'] && !(typeof data['pay_token_id'] === 'string' || data['pay_token_id'] instanceof String)) {
            throw new Error("Expected the field `pay_token_id` to be a primitive type in the JSON string but got " + data['pay_token_id']);
        }
        // ensure the json data is a string
        if (data['pay_amount'] && !(typeof data['pay_amount'] === 'string' || data['pay_amount'] instanceof String)) {
            throw new Error("Expected the field `pay_amount` to be a primitive type in the JSON string but got " + data['pay_amount']);
        }
        // ensure the json data is a string
        if (data['receive_token_id'] && !(typeof data['receive_token_id'] === 'string' || data['receive_token_id'] instanceof String)) {
            throw new Error("Expected the field `receive_token_id` to be a primitive type in the JSON string but got " + data['receive_token_id']);
        }
        // ensure the json data is a string
        if (data['receive_amount'] && !(typeof data['receive_amount'] === 'string' || data['receive_amount'] instanceof String)) {
            throw new Error("Expected the field `receive_amount` to be a primitive type in the JSON string but got " + data['receive_amount']);
        }
        // ensure the json data is a string
        if (data['fee_token_id'] && !(typeof data['fee_token_id'] === 'string' || data['fee_token_id'] instanceof String)) {
            throw new Error("Expected the field `fee_token_id` to be a primitive type in the JSON string but got " + data['fee_token_id']);
        }
        // ensure the json data is a string
        if (data['fee_amount'] && !(typeof data['fee_amount'] === 'string' || data['fee_amount'] instanceof String)) {
            throw new Error("Expected the field `fee_amount` to be a primitive type in the JSON string but got " + data['fee_amount']);
        }
        // ensure the json data is a string
        if (data['min_receive_amount'] && !(typeof data['min_receive_amount'] === 'string' || data['min_receive_amount'] instanceof String)) {
            throw new Error("Expected the field `min_receive_amount` to be a primitive type in the JSON string but got " + data['min_receive_amount']);
        }
        // ensure the json data is a string
        if (data['max_pay_amount'] && !(typeof data['max_pay_amount'] === 'string' || data['max_pay_amount'] instanceof String)) {
            throw new Error("Expected the field `max_pay_amount` to be a primitive type in the JSON string but got " + data['max_pay_amount']);
        }

        return true;
    }


}

SwapQuote.RequiredProperties = ["quote_id", "pay_token_id", "pay_amount", "receive_token_id", "receive_amount", "fee_token_id", "fee_amount", "quote_expired_timestamp"];

/**
 * The unique id of quote.
 * @member {String} quote_id
 */
SwapQuote.prototype['quote_id'] = undefined;

/**
 * The token ID to pay.
 * @member {String} pay_token_id
 */
SwapQuote.prototype['pay_token_id'] = undefined;

/**
 * The amount of tokens to pay.
 * @member {String} pay_amount
 */
SwapQuote.prototype['pay_amount'] = undefined;

/**
 * The token ID to receive.
 * @member {String} receive_token_id
 */
SwapQuote.prototype['receive_token_id'] = undefined;

/**
 * The amount of tokens to receive.
 * @member {String} receive_amount
 */
SwapQuote.prototype['receive_amount'] = undefined;

/**
 * The token ID for the service fee.
 * @member {String} fee_token_id
 */
SwapQuote.prototype['fee_token_id'] = undefined;

/**
 * The amount of tokens for the service fee.
 * @member {String} fee_amount
 */
SwapQuote.prototype['fee_amount'] = undefined;

/**
 * The minimum amount of tokens to receive if the pay amount is specified.
 * @member {String} min_receive_amount
 */
SwapQuote.prototype['min_receive_amount'] = undefined;

/**
 * The maximum amount of tokens to pay if the receive amount is specified.
 * @member {String} max_pay_amount
 */
SwapQuote.prototype['max_pay_amount'] = undefined;

/**
 * The time when the quote will expire, in Unix timestamp format, measured in milliseconds.
 * @member {Number} quote_expired_timestamp
 */
SwapQuote.prototype['quote_expired_timestamp'] = undefined;






export default SwapQuote;

