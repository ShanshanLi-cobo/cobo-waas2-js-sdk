/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TokenizationActivityStatus from './TokenizationActivityStatus';
import TokenizationOperationType from './TokenizationOperationType';
import TokenizationTokenOperationSource from './TokenizationTokenOperationSource';
import TransactionInitiatorType from './TransactionInitiatorType';

/**
 * The TokenizationActivityInfo model module.
 * @module model/TokenizationActivityInfo
 */
class TokenizationActivityInfo {
    /**
     * Constructs a new <code>TokenizationActivityInfo</code>.
     * @alias module:model/TokenizationActivityInfo
     * @param activity_id {String} The ID of the activity.
     * @param token_id {String} The token ID.
     * @param type {module:model/TokenizationOperationType} 
     * @param status {module:model/TokenizationActivityStatus} 
     * @param source {module:model/TokenizationTokenOperationSource} 
     * @param initiator {String} The initiator of the activity.
     * @param initiator_type {module:model/TransactionInitiatorType} 
     * @param transaction_ids {Array.<String>} The IDs of the corresponding transactions of the activity.
     * @param created_timestamp {Number} The creation timestamp of the activity in milliseconds since the Unix epoch.
     * @param updated_timestamp {Number} The last update timestamp of the activity in milliseconds since the Unix epoch.
     */
    constructor(activity_id, token_id, type, status, source, initiator, initiator_type, transaction_ids, created_timestamp, updated_timestamp) { 
        
        TokenizationActivityInfo.initialize(this, activity_id, token_id, type, status, source, initiator, initiator_type, transaction_ids, created_timestamp, updated_timestamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, activity_id, token_id, type, status, source, initiator, initiator_type, transaction_ids, created_timestamp, updated_timestamp) { 
        obj['activity_id'] = activity_id;
        obj['token_id'] = token_id;
        obj['type'] = type;
        obj['status'] = status;
        obj['source'] = source;
        obj['initiator'] = initiator;
        obj['initiator_type'] = initiator_type;
        obj['transaction_ids'] = transaction_ids;
        obj['created_timestamp'] = created_timestamp;
        obj['updated_timestamp'] = updated_timestamp;
    }

    /**
     * Constructs a <code>TokenizationActivityInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokenizationActivityInfo} obj Optional instance to populate.
     * @return {module:model/TokenizationActivityInfo} The populated <code>TokenizationActivityInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TokenizationActivityInfo();

            if (data.hasOwnProperty('activity_id')) {
                obj['activity_id'] = ApiClient.convertToType(data['activity_id'], 'String');
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = TokenizationOperationType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = TokenizationActivityStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = TokenizationTokenOperationSource.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('initiator')) {
                obj['initiator'] = ApiClient.convertToType(data['initiator'], 'String');
            }
            if (data.hasOwnProperty('initiator_type')) {
                obj['initiator_type'] = TransactionInitiatorType.constructFromObject(data['initiator_type']);
            }
            if (data.hasOwnProperty('transaction_ids')) {
                obj['transaction_ids'] = ApiClient.convertToType(data['transaction_ids'], ['String']);
            }
            if (data.hasOwnProperty('created_timestamp')) {
                obj['created_timestamp'] = ApiClient.convertToType(data['created_timestamp'], 'Number');
            }
            if (data.hasOwnProperty('updated_timestamp')) {
                obj['updated_timestamp'] = ApiClient.convertToType(data['updated_timestamp'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TokenizationActivityInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TokenizationActivityInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TokenizationActivityInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['activity_id'] && !(typeof data['activity_id'] === 'string' || data['activity_id'] instanceof String)) {
            throw new Error("Expected the field `activity_id` to be a primitive type in the JSON string but got " + data['activity_id']);
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          if (!!TokenizationTokenOperationSource.validateJSON) {
            TokenizationTokenOperationSource.validateJSON(data['source']);
          }
        }
        // ensure the json data is a string
        if (data['initiator'] && !(typeof data['initiator'] === 'string' || data['initiator'] instanceof String)) {
            throw new Error("Expected the field `initiator` to be a primitive type in the JSON string but got " + data['initiator']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['transaction_ids'])) {
            throw new Error("Expected the field `transaction_ids` to be an array in the JSON data but got " + data['transaction_ids']);
        }

        return true;
    }


}

TokenizationActivityInfo.RequiredProperties = ["activity_id", "token_id", "type", "status", "source", "initiator", "initiator_type", "transaction_ids", "created_timestamp", "updated_timestamp"];

/**
 * The ID of the activity.
 * @member {String} activity_id
 */
TokenizationActivityInfo.prototype['activity_id'] = undefined;

/**
 * The token ID.
 * @member {String} token_id
 */
TokenizationActivityInfo.prototype['token_id'] = undefined;

/**
 * @member {module:model/TokenizationOperationType} type
 */
TokenizationActivityInfo.prototype['type'] = undefined;

/**
 * @member {module:model/TokenizationActivityStatus} status
 */
TokenizationActivityInfo.prototype['status'] = undefined;

/**
 * @member {module:model/TokenizationTokenOperationSource} source
 */
TokenizationActivityInfo.prototype['source'] = undefined;

/**
 * The initiator of the activity.
 * @member {String} initiator
 */
TokenizationActivityInfo.prototype['initiator'] = undefined;

/**
 * @member {module:model/TransactionInitiatorType} initiator_type
 */
TokenizationActivityInfo.prototype['initiator_type'] = undefined;

/**
 * The IDs of the corresponding transactions of the activity.
 * @member {Array.<String>} transaction_ids
 */
TokenizationActivityInfo.prototype['transaction_ids'] = undefined;

/**
 * The creation timestamp of the activity in milliseconds since the Unix epoch.
 * @member {Number} created_timestamp
 */
TokenizationActivityInfo.prototype['created_timestamp'] = undefined;

/**
 * The last update timestamp of the activity in milliseconds since the Unix epoch.
 * @member {Number} updated_timestamp
 */
TokenizationActivityInfo.prototype['updated_timestamp'] = undefined;






export default TokenizationActivityInfo;

