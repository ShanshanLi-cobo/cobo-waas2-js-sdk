/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DispositionStatus from './DispositionStatus';
import DispositionType from './DispositionType';

/**
 * The DispositionEventData model module.
 * @module model/DispositionEventData
 */
class DispositionEventData {
    /**
     * Constructs a new <code>DispositionEventData</code>.
     * The disposition information about a transaction.
     * @alias module:model/DispositionEventData
     * @param transaction_id {String} The transaction ID.
     * @param disposition_type {module:model/DispositionType} 
     * @param disposition_status {module:model/DispositionStatus} 
     * @param updated_timestamp {Number} The time when the disposition was updated, in Unix timestamp format, measured in milliseconds.
     */
    constructor(transaction_id, disposition_type, disposition_status, updated_timestamp) { 
        
        DispositionEventData.initialize(this, transaction_id, disposition_type, disposition_status, updated_timestamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, transaction_id, disposition_type, disposition_status, updated_timestamp) { 
        obj['transaction_id'] = transaction_id;
        obj['disposition_type'] = disposition_type;
        obj['disposition_status'] = disposition_status;
        obj['updated_timestamp'] = updated_timestamp;
    }

    /**
     * Constructs a <code>DispositionEventData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DispositionEventData} obj Optional instance to populate.
     * @return {module:model/DispositionEventData} The populated <code>DispositionEventData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DispositionEventData();

            if (data.hasOwnProperty('transaction_id')) {
                obj['transaction_id'] = ApiClient.convertToType(data['transaction_id'], 'String');
            }
            if (data.hasOwnProperty('disposition_type')) {
                obj['disposition_type'] = DispositionType.constructFromObject(data['disposition_type']);
            }
            if (data.hasOwnProperty('disposition_status')) {
                obj['disposition_status'] = DispositionStatus.constructFromObject(data['disposition_status']);
            }
            if (data.hasOwnProperty('destination_address')) {
                obj['destination_address'] = ApiClient.convertToType(data['destination_address'], 'String');
            }
            if (data.hasOwnProperty('disposition_amount')) {
                obj['disposition_amount'] = ApiClient.convertToType(data['disposition_amount'], 'String');
            }
            if (data.hasOwnProperty('updated_timestamp')) {
                obj['updated_timestamp'] = ApiClient.convertToType(data['updated_timestamp'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DispositionEventData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DispositionEventData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DispositionEventData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['transaction_id'] && !(typeof data['transaction_id'] === 'string' || data['transaction_id'] instanceof String)) {
            throw new Error("Expected the field `transaction_id` to be a primitive type in the JSON string but got " + data['transaction_id']);
        }
        // ensure the json data is a string
        if (data['destination_address'] && !(typeof data['destination_address'] === 'string' || data['destination_address'] instanceof String)) {
            throw new Error("Expected the field `destination_address` to be a primitive type in the JSON string but got " + data['destination_address']);
        }
        // ensure the json data is a string
        if (data['disposition_amount'] && !(typeof data['disposition_amount'] === 'string' || data['disposition_amount'] instanceof String)) {
            throw new Error("Expected the field `disposition_amount` to be a primitive type in the JSON string but got " + data['disposition_amount']);
        }

        return true;
    }


}

DispositionEventData.RequiredProperties = ["transaction_id", "disposition_type", "disposition_status", "updated_timestamp"];

/**
 * The transaction ID.
 * @member {String} transaction_id
 */
DispositionEventData.prototype['transaction_id'] = undefined;

/**
 * @member {module:model/DispositionType} disposition_type
 */
DispositionEventData.prototype['disposition_type'] = undefined;

/**
 * @member {module:model/DispositionStatus} disposition_status
 */
DispositionEventData.prototype['disposition_status'] = undefined;

/**
 * The blockchain address to receive the refunded/isolated funds.
 * @member {String} destination_address
 */
DispositionEventData.prototype['destination_address'] = undefined;

/**
 * The amount to be refunded/isolated from the original transaction, specified as a numeric string. This value cannot exceed the total amount of the original transaction. 
 * @member {String} disposition_amount
 */
DispositionEventData.prototype['disposition_amount'] = undefined;

/**
 * The time when the disposition was updated, in Unix timestamp format, measured in milliseconds.
 * @member {Number} updated_timestamp
 */
DispositionEventData.prototype['updated_timestamp'] = undefined;






export default DispositionEventData;

