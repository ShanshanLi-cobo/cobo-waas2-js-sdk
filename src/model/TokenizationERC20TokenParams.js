/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TokenizationERC20TokenPermissionParams from './TokenizationERC20TokenPermissionParams';
import TokenizationTokenStandard from './TokenizationTokenStandard';

/**
 * The TokenizationERC20TokenParams model module.
 * @module model/TokenizationERC20TokenParams
 */
class TokenizationERC20TokenParams {
    /**
     * Constructs a new <code>TokenizationERC20TokenParams</code>.
     * @alias module:model/TokenizationERC20TokenParams
     * @param standard {module:model/TokenizationTokenStandard} 
     * @param name {String} The name of the token.
     * @param symbol {String} The symbol of the token.
     * @param decimals {Number} The number of decimals for the token (0-18).
     */
    constructor(standard, name, symbol, decimals) { 
        
        TokenizationERC20TokenParams.initialize(this, standard, name, symbol, decimals);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, standard, name, symbol, decimals) { 
        obj['standard'] = standard;
        obj['name'] = name;
        obj['symbol'] = symbol;
        obj['decimals'] = decimals;
    }

    /**
     * Constructs a <code>TokenizationERC20TokenParams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokenizationERC20TokenParams} obj Optional instance to populate.
     * @return {module:model/TokenizationERC20TokenParams} The populated <code>TokenizationERC20TokenParams</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TokenizationERC20TokenParams();

            if (data.hasOwnProperty('standard')) {
                obj['standard'] = TokenizationTokenStandard.constructFromObject(data['standard']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('decimals')) {
                obj['decimals'] = ApiClient.convertToType(data['decimals'], 'Number');
            }
            if (data.hasOwnProperty('token_access_activated')) {
                obj['token_access_activated'] = ApiClient.convertToType(data['token_access_activated'], 'Boolean');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = TokenizationERC20TokenPermissionParams.constructFromObject(data['permissions']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TokenizationERC20TokenParams</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TokenizationERC20TokenParams</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TokenizationERC20TokenParams.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['symbol'] && !(typeof data['symbol'] === 'string' || data['symbol'] instanceof String)) {
            throw new Error("Expected the field `symbol` to be a primitive type in the JSON string but got " + data['symbol']);
        }
        // validate the optional field `permissions`
        if (data['permissions']) { // data not null
          if (!!TokenizationERC20TokenPermissionParams.validateJSON) {
            TokenizationERC20TokenPermissionParams.validateJSON(data['permissions']);
          }
        }

        return true;
    }


}

TokenizationERC20TokenParams.RequiredProperties = ["standard", "name", "symbol", "decimals"];

/**
 * @member {module:model/TokenizationTokenStandard} standard
 */
TokenizationERC20TokenParams.prototype['standard'] = undefined;

/**
 * The name of the token.
 * @member {String} name
 */
TokenizationERC20TokenParams.prototype['name'] = undefined;

/**
 * The symbol of the token.
 * @member {String} symbol
 */
TokenizationERC20TokenParams.prototype['symbol'] = undefined;

/**
 * The number of decimals for the token (0-18).
 * @member {Number} decimals
 */
TokenizationERC20TokenParams.prototype['decimals'] = undefined;

/**
 * Whether the allowlist feature is activated for the token. When activated, only addresses in the allowlist can perform token operations.
 * @member {Boolean} token_access_activated
 * @default false
 */
TokenizationERC20TokenParams.prototype['token_access_activated'] = false;

/**
 * @member {module:model/TokenizationERC20TokenPermissionParams} permissions
 */
TokenizationERC20TokenParams.prototype['permissions'] = undefined;






export default TokenizationERC20TokenParams;

