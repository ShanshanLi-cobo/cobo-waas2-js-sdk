/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TokenizationERC20WrappedTokenPermissionParams model module.
 * @module model/TokenizationERC20WrappedTokenPermissionParams
 */
class TokenizationERC20WrappedTokenPermissionParams {
    /**
     * Constructs a new <code>TokenizationERC20WrappedTokenPermissionParams</code>.
     * Role-based permission settings for token contract. If not provided, all permissions will be granted to the issuance wallet by default.
     * @alias module:model/TokenizationERC20WrappedTokenPermissionParams
     */
    constructor() { 
        
        TokenizationERC20WrappedTokenPermissionParams.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TokenizationERC20WrappedTokenPermissionParams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokenizationERC20WrappedTokenPermissionParams} obj Optional instance to populate.
     * @return {module:model/TokenizationERC20WrappedTokenPermissionParams} The populated <code>TokenizationERC20WrappedTokenPermissionParams</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TokenizationERC20WrappedTokenPermissionParams();

            if (data.hasOwnProperty('admin')) {
                obj['admin'] = ApiClient.convertToType(data['admin'], ['String']);
            }
            if (data.hasOwnProperty('minter')) {
                obj['minter'] = ApiClient.convertToType(data['minter'], ['String']);
            }
            if (data.hasOwnProperty('wrapper')) {
                obj['wrapper'] = ApiClient.convertToType(data['wrapper'], ['String']);
            }
            if (data.hasOwnProperty('manager')) {
                obj['manager'] = ApiClient.convertToType(data['manager'], ['String']);
            }
            if (data.hasOwnProperty('pauser')) {
                obj['pauser'] = ApiClient.convertToType(data['pauser'], ['String']);
            }
            if (data.hasOwnProperty('salvager')) {
                obj['salvager'] = ApiClient.convertToType(data['salvager'], ['String']);
            }
            if (data.hasOwnProperty('upgrader')) {
                obj['upgrader'] = ApiClient.convertToType(data['upgrader'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TokenizationERC20WrappedTokenPermissionParams</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TokenizationERC20WrappedTokenPermissionParams</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['admin'])) {
            throw new Error("Expected the field `admin` to be an array in the JSON data but got " + data['admin']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['minter'])) {
            throw new Error("Expected the field `minter` to be an array in the JSON data but got " + data['minter']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['wrapper'])) {
            throw new Error("Expected the field `wrapper` to be an array in the JSON data but got " + data['wrapper']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['manager'])) {
            throw new Error("Expected the field `manager` to be an array in the JSON data but got " + data['manager']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pauser'])) {
            throw new Error("Expected the field `pauser` to be an array in the JSON data but got " + data['pauser']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['salvager'])) {
            throw new Error("Expected the field `salvager` to be an array in the JSON data but got " + data['salvager']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['upgrader'])) {
            throw new Error("Expected the field `upgrader` to be an array in the JSON data but got " + data['upgrader']);
        }

        return true;
    }


}



/**
 * List of addresses for the admin role.
 * @member {Array.<String>} admin
 */
TokenizationERC20WrappedTokenPermissionParams.prototype['admin'] = undefined;

/**
 * List of addresses for the minter role.
 * @member {Array.<String>} minter
 */
TokenizationERC20WrappedTokenPermissionParams.prototype['minter'] = undefined;

/**
 * List of addresses for the wrapper role.
 * @member {Array.<String>} wrapper
 */
TokenizationERC20WrappedTokenPermissionParams.prototype['wrapper'] = undefined;

/**
 * List of addresses for the manager role.
 * @member {Array.<String>} manager
 */
TokenizationERC20WrappedTokenPermissionParams.prototype['manager'] = undefined;

/**
 * List of addresses for the pauser role.
 * @member {Array.<String>} pauser
 */
TokenizationERC20WrappedTokenPermissionParams.prototype['pauser'] = undefined;

/**
 * List of addresses for the salvager role.
 * @member {Array.<String>} salvager
 */
TokenizationERC20WrappedTokenPermissionParams.prototype['salvager'] = undefined;

/**
 * List of addresses for the upgrader role.
 * @member {Array.<String>} upgrader
 */
TokenizationERC20WrappedTokenPermissionParams.prototype['upgrader'] = undefined;






export default TokenizationERC20WrappedTokenPermissionParams;

