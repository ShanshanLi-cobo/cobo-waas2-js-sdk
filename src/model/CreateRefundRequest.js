/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RefundType from './RefundType';

/**
 * The CreateRefundRequest model module.
 * @module model/CreateRefundRequest
 */
class CreateRefundRequest {
    /**
     * Constructs a new <code>CreateRefundRequest</code>.
     * @alias module:model/CreateRefundRequest
     * @param request_id {String} The request ID that is used to track a refund request. The request ID is provided by you and must be unique.
     * @param payable_amount {String} The amount to refund in cryptocurrency.
     * @param token_id {String} The ID of the cryptocurrency used for refund. Supported values:    - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param refund_type {module:model/RefundType} 
     */
    constructor(request_id, payable_amount, token_id, refund_type) { 
        
        CreateRefundRequest.initialize(this, request_id, payable_amount, token_id, refund_type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, request_id, payable_amount, token_id, refund_type) { 
        obj['request_id'] = request_id;
        obj['payable_amount'] = payable_amount;
        obj['token_id'] = token_id;
        obj['refund_type'] = refund_type;
    }

    /**
     * Constructs a <code>CreateRefundRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateRefundRequest} obj Optional instance to populate.
     * @return {module:model/CreateRefundRequest} The populated <code>CreateRefundRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateRefundRequest();

            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('merchant_id')) {
                obj['merchant_id'] = ApiClient.convertToType(data['merchant_id'], 'String');
            }
            if (data.hasOwnProperty('payable_amount')) {
                obj['payable_amount'] = ApiClient.convertToType(data['payable_amount'], 'String');
            }
            if (data.hasOwnProperty('to_address')) {
                obj['to_address'] = ApiClient.convertToType(data['to_address'], 'String');
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('refund_type')) {
                obj['refund_type'] = RefundType.constructFromObject(data['refund_type']);
            }
            if (data.hasOwnProperty('order_id')) {
                obj['order_id'] = ApiClient.convertToType(data['order_id'], 'String');
            }
            if (data.hasOwnProperty('charge_merchant_fee')) {
                obj['charge_merchant_fee'] = ApiClient.convertToType(data['charge_merchant_fee'], 'Boolean');
            }
            if (data.hasOwnProperty('merchant_fee_amount')) {
                obj['merchant_fee_amount'] = ApiClient.convertToType(data['merchant_fee_amount'], 'String');
            }
            if (data.hasOwnProperty('merchant_fee_token_id')) {
                obj['merchant_fee_token_id'] = ApiClient.convertToType(data['merchant_fee_token_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateRefundRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateRefundRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateRefundRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        // ensure the json data is a string
        if (data['merchant_id'] && !(typeof data['merchant_id'] === 'string' || data['merchant_id'] instanceof String)) {
            throw new Error("Expected the field `merchant_id` to be a primitive type in the JSON string but got " + data['merchant_id']);
        }
        // ensure the json data is a string
        if (data['payable_amount'] && !(typeof data['payable_amount'] === 'string' || data['payable_amount'] instanceof String)) {
            throw new Error("Expected the field `payable_amount` to be a primitive type in the JSON string but got " + data['payable_amount']);
        }
        // ensure the json data is a string
        if (data['to_address'] && !(typeof data['to_address'] === 'string' || data['to_address'] instanceof String)) {
            throw new Error("Expected the field `to_address` to be a primitive type in the JSON string but got " + data['to_address']);
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is a string
        if (data['order_id'] && !(typeof data['order_id'] === 'string' || data['order_id'] instanceof String)) {
            throw new Error("Expected the field `order_id` to be a primitive type in the JSON string but got " + data['order_id']);
        }
        // ensure the json data is a string
        if (data['merchant_fee_amount'] && !(typeof data['merchant_fee_amount'] === 'string' || data['merchant_fee_amount'] instanceof String)) {
            throw new Error("Expected the field `merchant_fee_amount` to be a primitive type in the JSON string but got " + data['merchant_fee_amount']);
        }
        // ensure the json data is a string
        if (data['merchant_fee_token_id'] && !(typeof data['merchant_fee_token_id'] === 'string' || data['merchant_fee_token_id'] instanceof String)) {
            throw new Error("Expected the field `merchant_fee_token_id` to be a primitive type in the JSON string but got " + data['merchant_fee_token_id']);
        }

        return true;
    }


}

CreateRefundRequest.RequiredProperties = ["request_id", "payable_amount", "token_id", "refund_type"];

/**
 * The request ID that is used to track a refund request. The request ID is provided by you and must be unique.
 * @member {String} request_id
 */
CreateRefundRequest.prototype['request_id'] = undefined;

/**
 * The merchant ID.
 * @member {String} merchant_id
 */
CreateRefundRequest.prototype['merchant_id'] = undefined;

/**
 * The amount to refund in cryptocurrency.
 * @member {String} payable_amount
 */
CreateRefundRequest.prototype['payable_amount'] = undefined;

/**
 * The address where the refunded cryptocurrency will be sent.
 * @member {String} to_address
 */
CreateRefundRequest.prototype['to_address'] = undefined;

/**
 * The ID of the cryptocurrency used for refund. Supported values:    - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
 * @member {String} token_id
 */
CreateRefundRequest.prototype['token_id'] = undefined;

/**
 * @member {module:model/RefundType} refund_type
 */
CreateRefundRequest.prototype['refund_type'] = undefined;

/**
 * The ID of the original pay-in order associated with this refund. Use this to track refunds against specific payments.
 * @member {String} order_id
 */
CreateRefundRequest.prototype['order_id'] = undefined;

/**
 * Indicates whether the merchant should bear the transaction fee for the refund.  If true, the fee will be deducted from merchant's account balance. 
 * @member {Boolean} charge_merchant_fee
 */
CreateRefundRequest.prototype['charge_merchant_fee'] = undefined;

/**
 * The amount of the transaction fee that the merchant will bear for the refund.  This is only applicable if `charge_merchant_fee` is set to true. 
 * @member {String} merchant_fee_amount
 */
CreateRefundRequest.prototype['merchant_fee_amount'] = undefined;

/**
 * The ID of the cryptocurrency used for the transaction fee.  This is only applicable if `charge_merchant_fee` is set to true. 
 * @member {String} merchant_fee_token_id
 */
CreateRefundRequest.prototype['merchant_fee_token_id'] = undefined;






export default CreateRefundRequest;

