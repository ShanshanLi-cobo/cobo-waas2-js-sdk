/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FILPrice from './FILPrice';
import FeeType from './FeeType';

/**
 * The TransactionRequestFILFee model module.
 * @module model/TransactionRequestFILFee
 */
class TransactionRequestFILFee {
    /**
     * Constructs a new <code>TransactionRequestFILFee</code>.
     * The preset properties to limit transaction fee.  In the Fil fee model, the calculation method for the fee is: fee &#x3D; gas_fee_cap * gas_limit, refer to [Fee models](https://www.cobo.com/developers/v2/guides/transactions/estimate-fees#fee-models).  Switch between the tabs to display the properties for different transaction fee models. 
     * @alias module:model/TransactionRequestFILFee
     * @implements module:model/FILPrice
     * @param gas_premium {String} An optional additional fee that users can include to prioritize their transactions over others. It acts like a tip to incentivize miners to select and include your transaction over transactions with only the base fee.
     * @param gas_fee_cap {String} The gas_fee_cap is a user-defined limit on how much they are willing to pay per unit of gas.
     * @param fee_type {module:model/FeeType} 
     * @param token_id {String} The token ID of the transaction fee.
     */
    constructor(gas_premium, gas_fee_cap, fee_type, token_id) { 
        FILPrice.initialize(this);
        TransactionRequestFILFee.initialize(this, gas_premium, gas_fee_cap, fee_type, token_id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, gas_premium, gas_fee_cap, fee_type, token_id) { 
        obj['gas_premium'] = gas_premium;
        obj['gas_fee_cap'] = gas_fee_cap;
        obj['fee_type'] = fee_type;
        obj['token_id'] = token_id;
    }

    /**
     * Constructs a <code>TransactionRequestFILFee</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionRequestFILFee} obj Optional instance to populate.
     * @return {module:model/TransactionRequestFILFee} The populated <code>TransactionRequestFILFee</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionRequestFILFee();
            FILPrice.constructFromObject(data, obj);

            if (data.hasOwnProperty('gas_premium')) {
                obj['gas_premium'] = ApiClient.convertToType(data['gas_premium'], 'String');
            }
            if (data.hasOwnProperty('gas_fee_cap')) {
                obj['gas_fee_cap'] = ApiClient.convertToType(data['gas_fee_cap'], 'String');
            }
            if (data.hasOwnProperty('gas_limit')) {
                obj['gas_limit'] = ApiClient.convertToType(data['gas_limit'], 'String');
            }
            if (data.hasOwnProperty('fee_type')) {
                obj['fee_type'] = FeeType.constructFromObject(data['fee_type']);
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionRequestFILFee</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionRequestFILFee</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransactionRequestFILFee.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['gas_premium'] && !(typeof data['gas_premium'] === 'string' || data['gas_premium'] instanceof String)) {
            throw new Error("Expected the field `gas_premium` to be a primitive type in the JSON string but got " + data['gas_premium']);
        }
        // ensure the json data is a string
        if (data['gas_fee_cap'] && !(typeof data['gas_fee_cap'] === 'string' || data['gas_fee_cap'] instanceof String)) {
            throw new Error("Expected the field `gas_fee_cap` to be a primitive type in the JSON string but got " + data['gas_fee_cap']);
        }
        // ensure the json data is a string
        if (data['gas_limit'] && !(typeof data['gas_limit'] === 'string' || data['gas_limit'] instanceof String)) {
            throw new Error("Expected the field `gas_limit` to be a primitive type in the JSON string but got " + data['gas_limit']);
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }

        return true;
    }


}

TransactionRequestFILFee.RequiredProperties = ["gas_premium", "gas_fee_cap", "fee_type", "token_id"];

/**
 * An optional additional fee that users can include to prioritize their transactions over others. It acts like a tip to incentivize miners to select and include your transaction over transactions with only the base fee.
 * @member {String} gas_premium
 */
TransactionRequestFILFee.prototype['gas_premium'] = undefined;

/**
 * The gas_fee_cap is a user-defined limit on how much they are willing to pay per unit of gas.
 * @member {String} gas_fee_cap
 */
TransactionRequestFILFee.prototype['gas_fee_cap'] = undefined;

/**
 * This defines the maximum amount of computational effort that a transaction is allowed to consume. It's a way to cap the resources that a transaction can use, ensuring it doesn't consume excessive network resources.
 * @member {String} gas_limit
 */
TransactionRequestFILFee.prototype['gas_limit'] = undefined;

/**
 * @member {module:model/FeeType} fee_type
 */
TransactionRequestFILFee.prototype['fee_type'] = undefined;

/**
 * The token ID of the transaction fee.
 * @member {String} token_id
 */
TransactionRequestFILFee.prototype['token_id'] = undefined;


// Implement FILPrice interface:
/**
 * An optional additional fee that users can include to prioritize their transactions over others. It acts like a tip to incentivize miners to select and include your transaction over transactions with only the base fee.
 * @member {String} gas_premium
 */
FILPrice.prototype['gas_premium'] = undefined;
/**
 * The gas_fee_cap is a user-defined limit on how much they are willing to pay per unit of gas.
 * @member {String} gas_fee_cap
 */
FILPrice.prototype['gas_fee_cap'] = undefined;
/**
 * This defines the maximum amount of computational effort that a transaction is allowed to consume. It's a way to cap the resources that a transaction can use, ensuring it doesn't consume excessive network resources.
 * @member {String} gas_limit
 */
FILPrice.prototype['gas_limit'] = undefined;




export default TransactionRequestFILFee;

