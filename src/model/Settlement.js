/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AcquiringType from './AcquiringType';
import BankAccount from './BankAccount';
import PayoutChannel from './PayoutChannel';
import SettleRequestStatus from './SettleRequestStatus';
import SettlementDetail from './SettlementDetail';
import SettlementType from './SettlementType';

/**
 * The Settlement model module.
 * @module model/Settlement
 */
class Settlement {
    /**
     * Constructs a new <code>Settlement</code>.
     * @alias module:model/Settlement
     * @param settlement_request_id {String} The settlement request ID generated by Cobo.
     * @param request_id {String} The request ID provided by you when creating the settlement request.
     * @param status {module:model/SettleRequestStatus} 
     * @param settlements {Array.<module:model/SettlementDetail>} 
     */
    constructor(settlement_request_id, request_id, status, settlements) { 
        
        Settlement.initialize(this, settlement_request_id, request_id, status, settlements);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, settlement_request_id, request_id, status, settlements) { 
        obj['settlement_request_id'] = settlement_request_id;
        obj['request_id'] = request_id;
        obj['status'] = status;
        obj['settlements'] = settlements;
    }

    /**
     * Constructs a <code>Settlement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Settlement} obj Optional instance to populate.
     * @return {module:model/Settlement} The populated <code>Settlement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Settlement();

            if (data.hasOwnProperty('settlement_request_id')) {
                obj['settlement_request_id'] = ApiClient.convertToType(data['settlement_request_id'], 'String');
            }
            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = SettleRequestStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('settlements')) {
                obj['settlements'] = ApiClient.convertToType(data['settlements'], [SettlementDetail]);
            }
            if (data.hasOwnProperty('created_timestamp')) {
                obj['created_timestamp'] = ApiClient.convertToType(data['created_timestamp'], 'Number');
            }
            if (data.hasOwnProperty('updated_timestamp')) {
                obj['updated_timestamp'] = ApiClient.convertToType(data['updated_timestamp'], 'Number');
            }
            if (data.hasOwnProperty('initiator')) {
                obj['initiator'] = ApiClient.convertToType(data['initiator'], 'String');
            }
            if (data.hasOwnProperty('acquiring_type')) {
                obj['acquiring_type'] = AcquiringType.constructFromObject(data['acquiring_type']);
            }
            if (data.hasOwnProperty('payout_channel')) {
                obj['payout_channel'] = PayoutChannel.constructFromObject(data['payout_channel']);
            }
            if (data.hasOwnProperty('settlement_type')) {
                obj['settlement_type'] = SettlementType.constructFromObject(data['settlement_type']);
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('received_amount_fiat')) {
                obj['received_amount_fiat'] = ApiClient.convertToType(data['received_amount_fiat'], 'String');
            }
            if (data.hasOwnProperty('bank_account')) {
                obj['bank_account'] = BankAccount.constructFromObject(data['bank_account']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Settlement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Settlement</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Settlement.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['settlement_request_id'] && !(typeof data['settlement_request_id'] === 'string' || data['settlement_request_id'] instanceof String)) {
            throw new Error("Expected the field `settlement_request_id` to be a primitive type in the JSON string but got " + data['settlement_request_id']);
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        if (data['settlements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['settlements'])) {
                throw new Error("Expected the field `settlements` to be an array in the JSON data but got " + data['settlements']);
            }
            // validate the optional field `settlements` (array)
            for (const item of data['settlements']) {
                SettlementDetail.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['initiator'] && !(typeof data['initiator'] === 'string' || data['initiator'] instanceof String)) {
            throw new Error("Expected the field `initiator` to be a primitive type in the JSON string but got " + data['initiator']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['received_amount_fiat'] && !(typeof data['received_amount_fiat'] === 'string' || data['received_amount_fiat'] instanceof String)) {
            throw new Error("Expected the field `received_amount_fiat` to be a primitive type in the JSON string but got " + data['received_amount_fiat']);
        }
        // validate the optional field `bank_account`
        if (data['bank_account']) { // data not null
          if (!!BankAccount.validateJSON) {
            BankAccount.validateJSON(data['bank_account']);
          }
        }

        return true;
    }


}

Settlement.RequiredProperties = ["settlement_request_id", "request_id", "status", "settlements"];

/**
 * The settlement request ID generated by Cobo.
 * @member {String} settlement_request_id
 */
Settlement.prototype['settlement_request_id'] = undefined;

/**
 * The request ID provided by you when creating the settlement request.
 * @member {String} request_id
 */
Settlement.prototype['request_id'] = undefined;

/**
 * @member {module:model/SettleRequestStatus} status
 */
Settlement.prototype['status'] = undefined;

/**
 * @member {Array.<module:model/SettlementDetail>} settlements
 */
Settlement.prototype['settlements'] = undefined;

/**
 * The created time of the settlement request, represented as a UNIX timestamp in seconds.
 * @member {Number} created_timestamp
 */
Settlement.prototype['created_timestamp'] = undefined;

/**
 * The updated time of the settlement request, represented as a UNIX timestamp in seconds.
 * @member {Number} updated_timestamp
 */
Settlement.prototype['updated_timestamp'] = undefined;

/**
 * The initiator of this settlement request, usually the user's API key.
 * @member {String} initiator
 */
Settlement.prototype['initiator'] = undefined;

/**
 * @member {module:model/AcquiringType} acquiring_type
 */
Settlement.prototype['acquiring_type'] = undefined;

/**
 * @member {module:model/PayoutChannel} payout_channel
 */
Settlement.prototype['payout_channel'] = undefined;

/**
 * @member {module:model/SettlementType} settlement_type
 */
Settlement.prototype['settlement_type'] = undefined;

/**
 * The fiat currency for the settlement request.
 * @member {String} currency
 */
Settlement.prototype['currency'] = undefined;

/**
 * The received fiat amount of this settlement request. 
 * @member {String} received_amount_fiat
 */
Settlement.prototype['received_amount_fiat'] = undefined;

/**
 * @member {module:model/BankAccount} bank_account
 */
Settlement.prototype['bank_account'] = undefined;






export default Settlement;

