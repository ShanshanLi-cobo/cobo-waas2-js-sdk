/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FundsStatusType from './FundsStatusType';
import KytScreeningsTransactionType from './KytScreeningsTransactionType';
import ReviewStatusType from './ReviewStatusType';

/**
 * The KytScreeningsEventData model module.
 * @module model/KytScreeningsEventData
 */
class KytScreeningsEventData {
    /**
     * Constructs a new <code>KytScreeningsEventData</code>.
     * The kyt screening information about a transaction.
     * @alias module:model/KytScreeningsEventData
     * @param transaction_id {String} The transaction ID.
     * @param transaction_type {module:model/KytScreeningsTransactionType} 
     * @param review_status {module:model/ReviewStatusType} 
     * @param funds_status {module:model/FundsStatusType} 
     * @param updated_timestamp {Number} The time when the kyt screening was updated, in Unix timestamp format, measured in milliseconds.
     */
    constructor(transaction_id, transaction_type, review_status, funds_status, updated_timestamp) { 
        
        KytScreeningsEventData.initialize(this, transaction_id, transaction_type, review_status, funds_status, updated_timestamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, transaction_id, transaction_type, review_status, funds_status, updated_timestamp) { 
        obj['transaction_id'] = transaction_id;
        obj['transaction_type'] = transaction_type;
        obj['review_status'] = review_status;
        obj['funds_status'] = funds_status;
        obj['updated_timestamp'] = updated_timestamp;
    }

    /**
     * Constructs a <code>KytScreeningsEventData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KytScreeningsEventData} obj Optional instance to populate.
     * @return {module:model/KytScreeningsEventData} The populated <code>KytScreeningsEventData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KytScreeningsEventData();

            if (data.hasOwnProperty('transaction_id')) {
                obj['transaction_id'] = ApiClient.convertToType(data['transaction_id'], 'String');
            }
            if (data.hasOwnProperty('transaction_type')) {
                obj['transaction_type'] = KytScreeningsTransactionType.constructFromObject(data['transaction_type']);
            }
            if (data.hasOwnProperty('review_status')) {
                obj['review_status'] = ReviewStatusType.constructFromObject(data['review_status']);
            }
            if (data.hasOwnProperty('funds_status')) {
                obj['funds_status'] = FundsStatusType.constructFromObject(data['funds_status']);
            }
            if (data.hasOwnProperty('updated_timestamp')) {
                obj['updated_timestamp'] = ApiClient.convertToType(data['updated_timestamp'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KytScreeningsEventData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KytScreeningsEventData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of KytScreeningsEventData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['transaction_id'] && !(typeof data['transaction_id'] === 'string' || data['transaction_id'] instanceof String)) {
            throw new Error("Expected the field `transaction_id` to be a primitive type in the JSON string but got " + data['transaction_id']);
        }

        return true;
    }


}

KytScreeningsEventData.RequiredProperties = ["transaction_id", "transaction_type", "review_status", "funds_status", "updated_timestamp"];

/**
 * The transaction ID.
 * @member {String} transaction_id
 */
KytScreeningsEventData.prototype['transaction_id'] = undefined;

/**
 * @member {module:model/KytScreeningsTransactionType} transaction_type
 */
KytScreeningsEventData.prototype['transaction_type'] = undefined;

/**
 * @member {module:model/ReviewStatusType} review_status
 */
KytScreeningsEventData.prototype['review_status'] = undefined;

/**
 * @member {module:model/FundsStatusType} funds_status
 */
KytScreeningsEventData.prototype['funds_status'] = undefined;

/**
 * The time when the kyt screening was updated, in Unix timestamp format, measured in milliseconds.
 * @member {Number} updated_timestamp
 */
KytScreeningsEventData.prototype['updated_timestamp'] = undefined;






export default KytScreeningsEventData;

