/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PaymentWalletBalance model module.
 * @module model/PaymentWalletBalance
 */
class PaymentWalletBalance {
    /**
     * Constructs a new <code>PaymentWalletBalance</code>.
     * @alias module:model/PaymentWalletBalance
     * @param wallet_id {String} The unique identifier of the wallet.
     * @param token_id {String} The ID of the cryptocurrency.
     */
    constructor(wallet_id, token_id) { 
        
        PaymentWalletBalance.initialize(this, wallet_id, token_id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, wallet_id, token_id) { 
        obj['wallet_id'] = wallet_id;
        obj['token_id'] = token_id;
    }

    /**
     * Constructs a <code>PaymentWalletBalance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentWalletBalance} obj Optional instance to populate.
     * @return {module:model/PaymentWalletBalance} The populated <code>PaymentWalletBalance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentWalletBalance();

            if (data.hasOwnProperty('wallet_id')) {
                obj['wallet_id'] = ApiClient.convertToType(data['wallet_id'], 'String');
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('swept_balance')) {
                obj['swept_balance'] = ApiClient.convertToType(data['swept_balance'], 'String');
            }
            if (data.hasOwnProperty('available_balance')) {
                obj['available_balance'] = ApiClient.convertToType(data['available_balance'], 'String');
            }
            if (data.hasOwnProperty('total_balance')) {
                obj['total_balance'] = ApiClient.convertToType(data['total_balance'], 'String');
            }
            if (data.hasOwnProperty('above_sweep_threshold_balance')) {
                obj['above_sweep_threshold_balance'] = ApiClient.convertToType(data['above_sweep_threshold_balance'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentWalletBalance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentWalletBalance</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentWalletBalance.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['wallet_id'] && !(typeof data['wallet_id'] === 'string' || data['wallet_id'] instanceof String)) {
            throw new Error("Expected the field `wallet_id` to be a primitive type in the JSON string but got " + data['wallet_id']);
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is a string
        if (data['swept_balance'] && !(typeof data['swept_balance'] === 'string' || data['swept_balance'] instanceof String)) {
            throw new Error("Expected the field `swept_balance` to be a primitive type in the JSON string but got " + data['swept_balance']);
        }
        // ensure the json data is a string
        if (data['available_balance'] && !(typeof data['available_balance'] === 'string' || data['available_balance'] instanceof String)) {
            throw new Error("Expected the field `available_balance` to be a primitive type in the JSON string but got " + data['available_balance']);
        }
        // ensure the json data is a string
        if (data['total_balance'] && !(typeof data['total_balance'] === 'string' || data['total_balance'] instanceof String)) {
            throw new Error("Expected the field `total_balance` to be a primitive type in the JSON string but got " + data['total_balance']);
        }
        // ensure the json data is a string
        if (data['above_sweep_threshold_balance'] && !(typeof data['above_sweep_threshold_balance'] === 'string' || data['above_sweep_threshold_balance'] instanceof String)) {
            throw new Error("Expected the field `above_sweep_threshold_balance` to be a primitive type in the JSON string but got " + data['above_sweep_threshold_balance']);
        }

        return true;
    }


}

PaymentWalletBalance.RequiredProperties = ["wallet_id", "token_id"];

/**
 * The unique identifier of the wallet.
 * @member {String} wallet_id
 */
PaymentWalletBalance.prototype['wallet_id'] = undefined;

/**
 * The ID of the cryptocurrency.
 * @member {String} token_id
 */
PaymentWalletBalance.prototype['token_id'] = undefined;

/**
 * The payment wallet swept balance.
 * @member {String} swept_balance
 */
PaymentWalletBalance.prototype['swept_balance'] = undefined;

/**
 * The payment wallet available balance.
 * @member {String} available_balance
 */
PaymentWalletBalance.prototype['available_balance'] = undefined;

/**
 * The payment wallet total balance.
 * @member {String} total_balance
 */
PaymentWalletBalance.prototype['total_balance'] = undefined;

/**
 * The payment wallet above sweep threshold balance.
 * @member {String} above_sweep_threshold_balance
 */
PaymentWalletBalance.prototype['above_sweep_threshold_balance'] = undefined;






export default PaymentWalletBalance;

