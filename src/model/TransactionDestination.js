/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExchangeId from './ExchangeId';
import SafeTxExtraData from './SafeTxExtraData';
import TransactionBIP137Destination from './TransactionBIP137Destination';
import TransactionBIP322Destination from './TransactionBIP322Destination';
import TransactionCosmosAdr36Destination from './TransactionCosmosAdr36Destination';
import TransactionCosmosContractDestination from './TransactionCosmosContractDestination';
import TransactionCosmosMessage from './TransactionCosmosMessage';
import TransactionDepositToAddressDestination from './TransactionDepositToAddressDestination';
import TransactionDepositToAddressDestinationTxInfo from './TransactionDepositToAddressDestinationTxInfo';
import TransactionDepositToWalletDestination from './TransactionDepositToWalletDestination';
import TransactionDestinationType from './TransactionDestinationType';
import TransactionEvmCalldataInfo from './TransactionEvmCalldataInfo';
import TransactionEvmContractDestination from './TransactionEvmContractDestination';
import TransactionMessageSignEIP191Destination from './TransactionMessageSignEIP191Destination';
import TransactionMessageSignEIP712Destination from './TransactionMessageSignEIP712Destination';
import TransactionRawMessageSignDestination from './TransactionRawMessageSignDestination';
import TransactionSolContractAddressLookupTableAccount from './TransactionSolContractAddressLookupTableAccount';
import TransactionSolContractDestination from './TransactionSolContractDestination';
import TransactionSolContractInstruction from './TransactionSolContractInstruction';
import TransactionStellarContractParam from './TransactionStellarContractParam';
import TransactionStellarDestination from './TransactionStellarDestination';
import TransactionTransferToAddressDestination from './TransactionTransferToAddressDestination';
import TransactionTransferToAddressDestinationAccountOutput from './TransactionTransferToAddressDestinationAccountOutput';
import TransactionTransferToAddressDestinationUtxoOutputsInner from './TransactionTransferToAddressDestinationUtxoOutputsInner';
import TransactionTransferToWalletDestination from './TransactionTransferToWalletDestination';
import WalletSubtype from './WalletSubtype';
import WalletType from './WalletType';

/**
 * The TransactionDestination model module.
 * @module model/TransactionDestination
 */
class TransactionDestination {
    /**
     * Constructs a new <code>TransactionDestination</code>.
     * @alias module:model/TransactionDestination
     * @param {(module:model/TransactionBIP137Destination|module:model/TransactionBIP322Destination|module:model/TransactionCosmosAdr36Destination|module:model/TransactionCosmosContractDestination|module:model/TransactionDepositToAddressDestination|module:model/TransactionDepositToWalletDestination|module:model/TransactionEvmContractDestination|module:model/TransactionMessageSignEIP191Destination|module:model/TransactionMessageSignEIP712Destination|module:model/TransactionRawMessageSignDestination|module:model/TransactionSolContractDestination|module:model/TransactionStellarDestination|module:model/TransactionTransferToAddressDestination|module:model/TransactionTransferToWalletDestination)} instance The actual instance to initialize TransactionDestination.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        var discriminatorValue = instance["destination_type"];

        if (discriminatorValue) {
            switch(discriminatorValue) {
                case "Address":
                    this.actualInstance = TransactionTransferToAddressDestination.constructFromObject(instance);
                    match++;
                    break;
                case "BTC_BIP_137_Signature":
                    this.actualInstance = TransactionBIP137Destination.constructFromObject(instance);
                    match++;
                    break;
                case "BTC_BIP_322_Signature":
                    this.actualInstance = TransactionBIP322Destination.constructFromObject(instance);
                    match++;
                    break;
                case "COSMOS_ADR_36_Signature":
                    this.actualInstance = TransactionCosmosAdr36Destination.constructFromObject(instance);
                    match++;
                    break;
                case "COSMOS_Contract":
                    this.actualInstance = TransactionCosmosContractDestination.constructFromObject(instance);
                    match++;
                    break;
                case "CustodialWallet":
                    this.actualInstance = TransactionTransferToWalletDestination.constructFromObject(instance);
                    match++;
                    break;
                case "DepositToAddress":
                    this.actualInstance = TransactionDepositToAddressDestination.constructFromObject(instance);
                    match++;
                    break;
                case "DepositToWallet":
                    this.actualInstance = TransactionDepositToWalletDestination.constructFromObject(instance);
                    match++;
                    break;
                case "EVM_Contract":
                    this.actualInstance = TransactionEvmContractDestination.constructFromObject(instance);
                    match++;
                    break;
                case "EVM_EIP_191_Signature":
                    this.actualInstance = TransactionMessageSignEIP191Destination.constructFromObject(instance);
                    match++;
                    break;
                case "EVM_EIP_712_Signature":
                    this.actualInstance = TransactionMessageSignEIP712Destination.constructFromObject(instance);
                    match++;
                    break;
                case "ExchangeWallet":
                    this.actualInstance = TransactionTransferToWalletDestination.constructFromObject(instance);
                    match++;
                    break;
                case "Raw_Message_Signature":
                    this.actualInstance = TransactionRawMessageSignDestination.constructFromObject(instance);
                    match++;
                    break;
                case "SOL_Contract":
                    this.actualInstance = TransactionSolContractDestination.constructFromObject(instance);
                    match++;
                    break;
                case "STELLAR_Contract":
                    this.actualInstance = TransactionStellarDestination.constructFromObject(instance);
                    match++;
                    break;
                default:
                    errorMessages.push("Unrecognized discriminator value: " + discriminatorValue);
                    break;
            }
            return;
        }

        try {
            if (instance instanceof TransactionTransferToAddressDestination) {
                this.actualInstance = instance;
            } else if(!!TransactionTransferToAddressDestination.validateJSON && TransactionTransferToAddressDestination.validateJSON(instance)){
                // plain JS object
                // create TransactionTransferToAddressDestination from JS object
                this.actualInstance = TransactionTransferToAddressDestination.constructFromObject(instance);
            } else {
                if(TransactionTransferToAddressDestination.constructFromObject(instance)) {
                    if (!!TransactionTransferToAddressDestination.constructFromObject(instance).toJSON) {
                        if (TransactionTransferToAddressDestination.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionTransferToAddressDestination.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionTransferToAddressDestination.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionTransferToAddressDestination
            errorMessages.push("Failed to construct TransactionTransferToAddressDestination: " + err)
        }

        try {
            if (instance instanceof TransactionTransferToWalletDestination) {
                this.actualInstance = instance;
            } else if(!!TransactionTransferToWalletDestination.validateJSON && TransactionTransferToWalletDestination.validateJSON(instance)){
                // plain JS object
                // create TransactionTransferToWalletDestination from JS object
                this.actualInstance = TransactionTransferToWalletDestination.constructFromObject(instance);
            } else {
                if(TransactionTransferToWalletDestination.constructFromObject(instance)) {
                    if (!!TransactionTransferToWalletDestination.constructFromObject(instance).toJSON) {
                        if (TransactionTransferToWalletDestination.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionTransferToWalletDestination.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionTransferToWalletDestination.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionTransferToWalletDestination
            errorMessages.push("Failed to construct TransactionTransferToWalletDestination: " + err)
        }

        try {
            if (instance instanceof TransactionEvmContractDestination) {
                this.actualInstance = instance;
            } else if(!!TransactionEvmContractDestination.validateJSON && TransactionEvmContractDestination.validateJSON(instance)){
                // plain JS object
                // create TransactionEvmContractDestination from JS object
                this.actualInstance = TransactionEvmContractDestination.constructFromObject(instance);
            } else {
                if(TransactionEvmContractDestination.constructFromObject(instance)) {
                    if (!!TransactionEvmContractDestination.constructFromObject(instance).toJSON) {
                        if (TransactionEvmContractDestination.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionEvmContractDestination.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionEvmContractDestination.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionEvmContractDestination
            errorMessages.push("Failed to construct TransactionEvmContractDestination: " + err)
        }

        try {
            if (instance instanceof TransactionSolContractDestination) {
                this.actualInstance = instance;
            } else if(!!TransactionSolContractDestination.validateJSON && TransactionSolContractDestination.validateJSON(instance)){
                // plain JS object
                // create TransactionSolContractDestination from JS object
                this.actualInstance = TransactionSolContractDestination.constructFromObject(instance);
            } else {
                if(TransactionSolContractDestination.constructFromObject(instance)) {
                    if (!!TransactionSolContractDestination.constructFromObject(instance).toJSON) {
                        if (TransactionSolContractDestination.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionSolContractDestination.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionSolContractDestination.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionSolContractDestination
            errorMessages.push("Failed to construct TransactionSolContractDestination: " + err)
        }

        try {
            if (instance instanceof TransactionCosmosContractDestination) {
                this.actualInstance = instance;
            } else if(!!TransactionCosmosContractDestination.validateJSON && TransactionCosmosContractDestination.validateJSON(instance)){
                // plain JS object
                // create TransactionCosmosContractDestination from JS object
                this.actualInstance = TransactionCosmosContractDestination.constructFromObject(instance);
            } else {
                if(TransactionCosmosContractDestination.constructFromObject(instance)) {
                    if (!!TransactionCosmosContractDestination.constructFromObject(instance).toJSON) {
                        if (TransactionCosmosContractDestination.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionCosmosContractDestination.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionCosmosContractDestination.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionCosmosContractDestination
            errorMessages.push("Failed to construct TransactionCosmosContractDestination: " + err)
        }

        try {
            if (instance instanceof TransactionMessageSignEIP191Destination) {
                this.actualInstance = instance;
            } else if(!!TransactionMessageSignEIP191Destination.validateJSON && TransactionMessageSignEIP191Destination.validateJSON(instance)){
                // plain JS object
                // create TransactionMessageSignEIP191Destination from JS object
                this.actualInstance = TransactionMessageSignEIP191Destination.constructFromObject(instance);
            } else {
                if(TransactionMessageSignEIP191Destination.constructFromObject(instance)) {
                    if (!!TransactionMessageSignEIP191Destination.constructFromObject(instance).toJSON) {
                        if (TransactionMessageSignEIP191Destination.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionMessageSignEIP191Destination.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionMessageSignEIP191Destination.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionMessageSignEIP191Destination
            errorMessages.push("Failed to construct TransactionMessageSignEIP191Destination: " + err)
        }

        try {
            if (instance instanceof TransactionMessageSignEIP712Destination) {
                this.actualInstance = instance;
            } else if(!!TransactionMessageSignEIP712Destination.validateJSON && TransactionMessageSignEIP712Destination.validateJSON(instance)){
                // plain JS object
                // create TransactionMessageSignEIP712Destination from JS object
                this.actualInstance = TransactionMessageSignEIP712Destination.constructFromObject(instance);
            } else {
                if(TransactionMessageSignEIP712Destination.constructFromObject(instance)) {
                    if (!!TransactionMessageSignEIP712Destination.constructFromObject(instance).toJSON) {
                        if (TransactionMessageSignEIP712Destination.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionMessageSignEIP712Destination.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionMessageSignEIP712Destination.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionMessageSignEIP712Destination
            errorMessages.push("Failed to construct TransactionMessageSignEIP712Destination: " + err)
        }

        try {
            if (instance instanceof TransactionRawMessageSignDestination) {
                this.actualInstance = instance;
            } else if(!!TransactionRawMessageSignDestination.validateJSON && TransactionRawMessageSignDestination.validateJSON(instance)){
                // plain JS object
                // create TransactionRawMessageSignDestination from JS object
                this.actualInstance = TransactionRawMessageSignDestination.constructFromObject(instance);
            } else {
                if(TransactionRawMessageSignDestination.constructFromObject(instance)) {
                    if (!!TransactionRawMessageSignDestination.constructFromObject(instance).toJSON) {
                        if (TransactionRawMessageSignDestination.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionRawMessageSignDestination.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionRawMessageSignDestination.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionRawMessageSignDestination
            errorMessages.push("Failed to construct TransactionRawMessageSignDestination: " + err)
        }

        try {
            if (instance instanceof TransactionDepositToAddressDestination) {
                this.actualInstance = instance;
            } else if(!!TransactionDepositToAddressDestination.validateJSON && TransactionDepositToAddressDestination.validateJSON(instance)){
                // plain JS object
                // create TransactionDepositToAddressDestination from JS object
                this.actualInstance = TransactionDepositToAddressDestination.constructFromObject(instance);
            } else {
                if(TransactionDepositToAddressDestination.constructFromObject(instance)) {
                    if (!!TransactionDepositToAddressDestination.constructFromObject(instance).toJSON) {
                        if (TransactionDepositToAddressDestination.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionDepositToAddressDestination.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionDepositToAddressDestination.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionDepositToAddressDestination
            errorMessages.push("Failed to construct TransactionDepositToAddressDestination: " + err)
        }

        try {
            if (instance instanceof TransactionDepositToWalletDestination) {
                this.actualInstance = instance;
            } else if(!!TransactionDepositToWalletDestination.validateJSON && TransactionDepositToWalletDestination.validateJSON(instance)){
                // plain JS object
                // create TransactionDepositToWalletDestination from JS object
                this.actualInstance = TransactionDepositToWalletDestination.constructFromObject(instance);
            } else {
                if(TransactionDepositToWalletDestination.constructFromObject(instance)) {
                    if (!!TransactionDepositToWalletDestination.constructFromObject(instance).toJSON) {
                        if (TransactionDepositToWalletDestination.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionDepositToWalletDestination.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionDepositToWalletDestination.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionDepositToWalletDestination
            errorMessages.push("Failed to construct TransactionDepositToWalletDestination: " + err)
        }

        try {
            if (instance instanceof TransactionBIP137Destination) {
                this.actualInstance = instance;
            } else if(!!TransactionBIP137Destination.validateJSON && TransactionBIP137Destination.validateJSON(instance)){
                // plain JS object
                // create TransactionBIP137Destination from JS object
                this.actualInstance = TransactionBIP137Destination.constructFromObject(instance);
            } else {
                if(TransactionBIP137Destination.constructFromObject(instance)) {
                    if (!!TransactionBIP137Destination.constructFromObject(instance).toJSON) {
                        if (TransactionBIP137Destination.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionBIP137Destination.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionBIP137Destination.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionBIP137Destination
            errorMessages.push("Failed to construct TransactionBIP137Destination: " + err)
        }

        try {
            if (instance instanceof TransactionBIP322Destination) {
                this.actualInstance = instance;
            } else if(!!TransactionBIP322Destination.validateJSON && TransactionBIP322Destination.validateJSON(instance)){
                // plain JS object
                // create TransactionBIP322Destination from JS object
                this.actualInstance = TransactionBIP322Destination.constructFromObject(instance);
            } else {
                if(TransactionBIP322Destination.constructFromObject(instance)) {
                    if (!!TransactionBIP322Destination.constructFromObject(instance).toJSON) {
                        if (TransactionBIP322Destination.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionBIP322Destination.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionBIP322Destination.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionBIP322Destination
            errorMessages.push("Failed to construct TransactionBIP322Destination: " + err)
        }

        try {
            if (instance instanceof TransactionCosmosAdr36Destination) {
                this.actualInstance = instance;
            } else if(!!TransactionCosmosAdr36Destination.validateJSON && TransactionCosmosAdr36Destination.validateJSON(instance)){
                // plain JS object
                // create TransactionCosmosAdr36Destination from JS object
                this.actualInstance = TransactionCosmosAdr36Destination.constructFromObject(instance);
            } else {
                if(TransactionCosmosAdr36Destination.constructFromObject(instance)) {
                    if (!!TransactionCosmosAdr36Destination.constructFromObject(instance).toJSON) {
                        if (TransactionCosmosAdr36Destination.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionCosmosAdr36Destination.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionCosmosAdr36Destination.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionCosmosAdr36Destination
            errorMessages.push("Failed to construct TransactionCosmosAdr36Destination: " + err)
        }

        try {
            if (instance instanceof TransactionStellarDestination) {
                this.actualInstance = instance;
            } else if(!!TransactionStellarDestination.validateJSON && TransactionStellarDestination.validateJSON(instance)){
                // plain JS object
                // create TransactionStellarDestination from JS object
                this.actualInstance = TransactionStellarDestination.constructFromObject(instance);
            } else {
                if(TransactionStellarDestination.constructFromObject(instance)) {
                    if (!!TransactionStellarDestination.constructFromObject(instance).toJSON) {
                        if (TransactionStellarDestination.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionStellarDestination.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionStellarDestination.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionStellarDestination
            errorMessages.push("Failed to construct TransactionStellarDestination: " + err)
        }

        // if (match > 1) {
        //    throw new Error("Multiple matches found constructing `TransactionDestination` with oneOf schemas TransactionBIP137Destination, TransactionBIP322Destination, TransactionCosmosAdr36Destination, TransactionCosmosContractDestination, TransactionDepositToAddressDestination, TransactionDepositToWalletDestination, TransactionEvmContractDestination, TransactionMessageSignEIP191Destination, TransactionMessageSignEIP712Destination, TransactionRawMessageSignDestination, TransactionSolContractDestination, TransactionStellarDestination, TransactionTransferToAddressDestination, TransactionTransferToWalletDestination. Input: " + JSON.stringify(instance));
        // } else
        if (match === 0) {
        //    this.actualInstance = null; // clear the actual instance in case there are multiple matches
        //    throw new Error("No match found constructing `TransactionDestination` with oneOf schemas TransactionBIP137Destination, TransactionBIP322Destination, TransactionCosmosAdr36Destination, TransactionCosmosContractDestination, TransactionDepositToAddressDestination, TransactionDepositToWalletDestination, TransactionEvmContractDestination, TransactionMessageSignEIP191Destination, TransactionMessageSignEIP712Destination, TransactionRawMessageSignDestination, TransactionSolContractDestination, TransactionStellarDestination, TransactionTransferToAddressDestination, TransactionTransferToWalletDestination. Details: " +
        //                    errorMessages.join(", "));
        return;
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>TransactionDestination</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionDestination} obj Optional instance to populate.
     * @return {module:model/TransactionDestination} The populated <code>TransactionDestination</code> instance.
     */
    static constructFromObject(data, obj) {
        return new TransactionDestination(data);
    }

    /**
     * Gets the actual instance, which can be <code>TransactionBIP137Destination</code>, <code>TransactionBIP322Destination</code>, <code>TransactionCosmosAdr36Destination</code>, <code>TransactionCosmosContractDestination</code>, <code>TransactionDepositToAddressDestination</code>, <code>TransactionDepositToWalletDestination</code>, <code>TransactionEvmContractDestination</code>, <code>TransactionMessageSignEIP191Destination</code>, <code>TransactionMessageSignEIP712Destination</code>, <code>TransactionRawMessageSignDestination</code>, <code>TransactionSolContractDestination</code>, <code>TransactionStellarDestination</code>, <code>TransactionTransferToAddressDestination</code>, <code>TransactionTransferToWalletDestination</code>.
     * @return {(module:model/TransactionBIP137Destination|module:model/TransactionBIP322Destination|module:model/TransactionCosmosAdr36Destination|module:model/TransactionCosmosContractDestination|module:model/TransactionDepositToAddressDestination|module:model/TransactionDepositToWalletDestination|module:model/TransactionEvmContractDestination|module:model/TransactionMessageSignEIP191Destination|module:model/TransactionMessageSignEIP712Destination|module:model/TransactionRawMessageSignDestination|module:model/TransactionSolContractDestination|module:model/TransactionStellarDestination|module:model/TransactionTransferToAddressDestination|module:model/TransactionTransferToWalletDestination)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>TransactionBIP137Destination</code>, <code>TransactionBIP322Destination</code>, <code>TransactionCosmosAdr36Destination</code>, <code>TransactionCosmosContractDestination</code>, <code>TransactionDepositToAddressDestination</code>, <code>TransactionDepositToWalletDestination</code>, <code>TransactionEvmContractDestination</code>, <code>TransactionMessageSignEIP191Destination</code>, <code>TransactionMessageSignEIP712Destination</code>, <code>TransactionRawMessageSignDestination</code>, <code>TransactionSolContractDestination</code>, <code>TransactionStellarDestination</code>, <code>TransactionTransferToAddressDestination</code>, <code>TransactionTransferToWalletDestination</code>.
     * @param {(module:model/TransactionBIP137Destination|module:model/TransactionBIP322Destination|module:model/TransactionCosmosAdr36Destination|module:model/TransactionCosmosContractDestination|module:model/TransactionDepositToAddressDestination|module:model/TransactionDepositToWalletDestination|module:model/TransactionEvmContractDestination|module:model/TransactionMessageSignEIP191Destination|module:model/TransactionMessageSignEIP712Destination|module:model/TransactionRawMessageSignDestination|module:model/TransactionSolContractDestination|module:model/TransactionStellarDestination|module:model/TransactionTransferToAddressDestination|module:model/TransactionTransferToWalletDestination)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = TransactionDestination.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of TransactionDestination from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/TransactionDestination} An instance of TransactionDestination.
     */
    static fromJSON = function(json_string){
        return TransactionDestination.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/TransactionDestinationType} destination_type
 */
TransactionDestination.prototype['destination_type'] = undefined;

/**
 * @member {module:model/TransactionTransferToAddressDestinationAccountOutput} account_output
 */
TransactionDestination.prototype['account_output'] = undefined;

/**
 * @member {Array.<module:model/TransactionTransferToAddressDestinationUtxoOutputsInner>} utxo_outputs
 */
TransactionDestination.prototype['utxo_outputs'] = undefined;

/**
 * The address used to receive the remaining funds or change from the transaction.
 * @member {String} change_address
 */
TransactionDestination.prototype['change_address'] = undefined;

/**
 * Whether the transaction request must be executed as a [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfer.   - `true`: The transaction request must be executed as a Cobo Loop transfer.   - `false`: The transaction request may not be executed as a Cobo Loop transfer. 
 * @member {Boolean} force_internal
 */
TransactionDestination.prototype['force_internal'] = undefined;

/**
 * Whether the transaction request must not be executed as a [Cobo Loop](https://manuals.cobo.com/en/portal/custodial-wallets/cobo-loop) transfer.   - `true`: The transaction request must not be executed as a Cobo Loop transfer.   - `false`: The transaction request can be executed as a Cobo Loop transfer. 
 * @member {Boolean} force_external
 */
TransactionDestination.prototype['force_external'] = undefined;

/**
 * The wallet ID.
 * @member {String} wallet_id
 */
TransactionDestination.prototype['wallet_id'] = undefined;

/**
 * The trading account type.
 * @member {String} trading_account_type
 */
TransactionDestination.prototype['trading_account_type'] = undefined;

/**
 * @member {module:model/ExchangeId} exchange_id
 */
TransactionDestination.prototype['exchange_id'] = undefined;

/**
 * The transfer amount. For example, if you trade 1.5 BTC, then the value is `1.5`. 
 * @member {String} amount
 */
TransactionDestination.prototype['amount'] = undefined;

/**
 * The destination address.
 * @member {String} address
 */
TransactionDestination.prototype['address'] = undefined;

/**
 * The transfer amount. For example, if you trade 1.5 ETH, then the value is `1.5`. 
 * @member {String} value
 */
TransactionDestination.prototype['value'] = undefined;

/**
 * The data that is used to invoke a specific function or method within the specified contract at the destination address. 
 * @member {String} calldata
 */
TransactionDestination.prototype['calldata'] = undefined;

/**
 * @member {module:model/TransactionEvmCalldataInfo} calldata_info
 */
TransactionDestination.prototype['calldata_info'] = undefined;

/**
 * @member {Array.<module:model/TransactionSolContractInstruction>} instructions
 */
TransactionDestination.prototype['instructions'] = undefined;

/**
 * @member {Array.<module:model/TransactionSolContractAddressLookupTableAccount>} address_lookup_table_accounts
 */
TransactionDestination.prototype['address_lookup_table_accounts'] = undefined;

/**
 * @member {Array.<module:model/TransactionCosmosMessage>} cosmos_messages
 */
TransactionDestination.prototype['cosmos_messages'] = undefined;

/**
 * The raw data of the message to be signed, encoded in Base64 format.
 * @member {String} message
 */
TransactionDestination.prototype['message'] = undefined;

/**
 * The raw structured data to be signed, formatted as a JSON string.
 * @member {String} raw_structured_data
 */
TransactionDestination.prototype['raw_structured_data'] = undefined;

/**
 * The structured data to be signed, formatted as a JSON object according to the EIP-712 standard.
 * @member {Object.<String, Object>} structured_data
 */
TransactionDestination.prototype['structured_data'] = undefined;

/**
 * @member {module:model/SafeTxExtraData} safe_tx_extra_data
 */
TransactionDestination.prototype['safe_tx_extra_data'] = undefined;

/**
 * Message hash to be signed, in hexadecimal format.
 * @member {String} msg_hash
 */
TransactionDestination.prototype['msg_hash'] = undefined;

/**
 * @member {module:model/WalletType} wallet_type
 */
TransactionDestination.prototype['wallet_type'] = undefined;

/**
 * @member {module:model/WalletSubtype} wallet_subtype
 */
TransactionDestination.prototype['wallet_subtype'] = undefined;

/**
 * The memo that identifies a transaction in order to credit the correct account. For transfers out of Cobo Portal, it is highly recommended to include a memo for the chains such as XRP, EOS, XLM, IOST, BNB_BNB, ATOM, LUNA, and TON.
 * @member {String} memo
 */
TransactionDestination.prototype['memo'] = undefined;

/**
 * @member {module:model/TransactionDepositToAddressDestinationTxInfo} tx_info
 */
TransactionDestination.prototype['tx_info'] = undefined;

/**
 * Message to be signed, in hexadecimal format.
 * @member {String} message_bip137
 */
TransactionDestination.prototype['message_bip137'] = undefined;

/**
 * Message to be signed, in hexadecimal format.
 * @member {String} message_bip322
 */
TransactionDestination.prototype['message_bip322'] = undefined;

/**
 * Message to be signed, in hexadecimal format.
 * @member {String} message_cosmos_adr36
 */
TransactionDestination.prototype['message_cosmos_adr36'] = undefined;

/**
 * @member {module:model/TransactionStellarContractParam} contract_param
 */
TransactionDestination.prototype['contract_param'] = undefined;


TransactionDestination.OneOf = ["TransactionBIP137Destination", "TransactionBIP322Destination", "TransactionCosmosAdr36Destination", "TransactionCosmosContractDestination", "TransactionDepositToAddressDestination", "TransactionDepositToWalletDestination", "TransactionEvmContractDestination", "TransactionMessageSignEIP191Destination", "TransactionMessageSignEIP712Destination", "TransactionRawMessageSignDestination", "TransactionSolContractDestination", "TransactionStellarDestination", "TransactionTransferToAddressDestination", "TransactionTransferToWalletDestination"];

export default TransactionDestination;

