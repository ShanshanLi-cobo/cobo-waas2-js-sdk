/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BridgingFee from './BridgingFee';
import CommissionFee from './CommissionFee';
import OtcFee from './OtcFee';

/**
 * The PaymentEstimatedFee model module.
 * @module model/PaymentEstimatedFee
 */
class PaymentEstimatedFee {
    /**
     * Constructs a new <code>PaymentEstimatedFee</code>.
     * @alias module:model/PaymentEstimatedFee
     * @param token_id {String} The ID of the cryptocurrency you want to payment.
     * @param amount {String} The payment amount. 
     */
    constructor(token_id, amount) { 
        
        PaymentEstimatedFee.initialize(this, token_id, amount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, token_id, amount) { 
        obj['token_id'] = token_id;
        obj['amount'] = amount;
    }

    /**
     * Constructs a <code>PaymentEstimatedFee</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentEstimatedFee} obj Optional instance to populate.
     * @return {module:model/PaymentEstimatedFee} The populated <code>PaymentEstimatedFee</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentEstimatedFee();

            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('commission_fee')) {
                obj['commission_fee'] = CommissionFee.constructFromObject(data['commission_fee']);
            }
            if (data.hasOwnProperty('bridging_fee')) {
                obj['bridging_fee'] = BridgingFee.constructFromObject(data['bridging_fee']);
            }
            if (data.hasOwnProperty('otc_fee')) {
                obj['otc_fee'] = OtcFee.constructFromObject(data['otc_fee']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentEstimatedFee</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentEstimatedFee</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentEstimatedFee.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // validate the optional field `commission_fee`
        if (data['commission_fee']) { // data not null
          if (!!CommissionFee.validateJSON) {
            CommissionFee.validateJSON(data['commission_fee']);
          }
        }
        // validate the optional field `bridging_fee`
        if (data['bridging_fee']) { // data not null
          if (!!BridgingFee.validateJSON) {
            BridgingFee.validateJSON(data['bridging_fee']);
          }
        }
        // validate the optional field `otc_fee`
        if (data['otc_fee']) { // data not null
          if (!!OtcFee.validateJSON) {
            OtcFee.validateJSON(data['otc_fee']);
          }
        }

        return true;
    }


}

PaymentEstimatedFee.RequiredProperties = ["token_id", "amount"];

/**
 * The ID of the cryptocurrency you want to payment.
 * @member {String} token_id
 */
PaymentEstimatedFee.prototype['token_id'] = undefined;

/**
 * The payment amount. 
 * @member {String} amount
 */
PaymentEstimatedFee.prototype['amount'] = undefined;

/**
 * @member {module:model/CommissionFee} commission_fee
 */
PaymentEstimatedFee.prototype['commission_fee'] = undefined;

/**
 * @member {module:model/BridgingFee} bridging_fee
 */
PaymentEstimatedFee.prototype['bridging_fee'] = undefined;

/**
 * @member {module:model/OtcFee} otc_fee
 */
PaymentEstimatedFee.prototype['otc_fee'] = undefined;






export default PaymentEstimatedFee;

