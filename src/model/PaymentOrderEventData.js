/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Order from './Order';
import OrderStatus from './OrderStatus';
import PaymentTransaction from './PaymentTransaction';
import SettleStatus from './SettleStatus';
import WebhookEventDataType from './WebhookEventDataType';

/**
 * The PaymentOrderEventData model module.
 * @module model/PaymentOrderEventData
 */
class PaymentOrderEventData {
    /**
     * Constructs a new <code>PaymentOrderEventData</code>.
     * @alias module:model/PaymentOrderEventData
     * @implements module:model/WebhookEventDataType
     * @implements module:model/Order
     * @param data_type {module:model/PaymentOrderEventData.DataTypeEnum}  The data type of the event. - `Transaction`: The transaction event data. - `TSSRequest`: The TSS request event data. - `Addresses`: The addresses event data. - `WalletInfo`: The wallet information event data. - `MPCVault`: The MPC vault event data. - `Chains`: The enabled chain event data. - `Tokens`: The enabled token event data. - `TokenListing`: The token listing event data.        - `PaymentOrder`: The payment order event data. - `PaymentRefund`: The payment refund event data. - `PaymentSettlement`: The payment settlement event data. - `PaymentTransaction`: The payment transaction event data. - `PaymentAddressUpdate`: The top-up address update event data. - `BalanceUpdateInfo`: The balance update event data. - `SuspendedToken`: The token suspension event data. - `ComplianceDisposition`: The compliance disposition event data. - `ComplianceKytScreenings`: The compliance KYT screenings event data.
     * @param order_id {String} The order ID.
     * @param token_id {String}  The ID of the cryptocurrency used for payment. Supported tokens:  - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC` - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param chain_id {String}  The ID of the blockchain network where the payment transaction should be made. Supported chains:  - USDC: `ETH`, `ARBITRUM`, `SOL`, `BASE`, `MATIC`, `BSC` - USDT: `TRON`, `ETH`, `ARBITRUM`, `SOL`, `BASE`, `MATIC`, `BSC` 
     * @param payable_amount {String} The cryptocurrency amount to be paid for this order.
     * @param receive_address {String} The recipient wallet address to be used for the payment transaction.
     * @param currency {String} The fiat currency of the order.
     * @param order_amount {String} The base amount of the order in fiat currency, excluding the developer fee (specified in `fee_amount`).
     * @param fee_amount {String} The developer fee for the order in fiat currency. It is added to the base amount (`order_amount`) to determine the final charge.
     * @param exchange_rate {String} The exchange rate between a currency pair. Expressed as the amount of fiat currency per one unit of cryptocurrency. For example, if the cryptocurrency is USDT and the fiat currency is USD, a rate of \"0.99\" means 1 USDT = 0.99 USD.
     * @param psp_order_code {String} A unique reference code assigned by the developer to identify this order in their system.
     * @param status {module:model/OrderStatus} 
     * @param received_token_amount {String} The total cryptocurrency amount received for this order. Updates until the expiration time. Precision matches the token standard (e.g., 6 decimals for USDT).
     */
    constructor(data_type, order_id, token_id, chain_id, payable_amount, receive_address, currency, order_amount, fee_amount, exchange_rate, psp_order_code, status, received_token_amount) { 
        WebhookEventDataType.initialize(this, data_type);Order.initialize(this, order_id, token_id, chain_id, payable_amount, receive_address, currency, order_amount, fee_amount, exchange_rate, psp_order_code, status, received_token_amount);
        PaymentOrderEventData.initialize(this, data_type, order_id, token_id, chain_id, payable_amount, receive_address, currency, order_amount, fee_amount, exchange_rate, psp_order_code, status, received_token_amount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data_type, order_id, token_id, chain_id, payable_amount, receive_address, currency, order_amount, fee_amount, exchange_rate, psp_order_code, status, received_token_amount) { 
        obj['data_type'] = data_type;
        obj['order_id'] = order_id;
        obj['token_id'] = token_id;
        obj['chain_id'] = chain_id;
        obj['payable_amount'] = payable_amount;
        obj['receive_address'] = receive_address;
        obj['currency'] = currency;
        obj['order_amount'] = order_amount;
        obj['fee_amount'] = fee_amount;
        obj['exchange_rate'] = exchange_rate;
        obj['psp_order_code'] = psp_order_code;
        obj['status'] = status;
        obj['received_token_amount'] = received_token_amount;
    }

    /**
     * Constructs a <code>PaymentOrderEventData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentOrderEventData} obj Optional instance to populate.
     * @return {module:model/PaymentOrderEventData} The populated <code>PaymentOrderEventData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentOrderEventData();
            WebhookEventDataType.constructFromObject(data, obj);
            Order.constructFromObject(data, obj);

            if (data.hasOwnProperty('data_type')) {
                obj['data_type'] = ApiClient.convertToType(data['data_type'], 'String');
            }
            if (data.hasOwnProperty('order_id')) {
                obj['order_id'] = ApiClient.convertToType(data['order_id'], 'String');
            }
            if (data.hasOwnProperty('merchant_id')) {
                obj['merchant_id'] = ApiClient.convertToType(data['merchant_id'], 'String');
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('chain_id')) {
                obj['chain_id'] = ApiClient.convertToType(data['chain_id'], 'String');
            }
            if (data.hasOwnProperty('payable_amount')) {
                obj['payable_amount'] = ApiClient.convertToType(data['payable_amount'], 'String');
            }
            if (data.hasOwnProperty('receive_address')) {
                obj['receive_address'] = ApiClient.convertToType(data['receive_address'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('order_amount')) {
                obj['order_amount'] = ApiClient.convertToType(data['order_amount'], 'String');
            }
            if (data.hasOwnProperty('fee_amount')) {
                obj['fee_amount'] = ApiClient.convertToType(data['fee_amount'], 'String');
            }
            if (data.hasOwnProperty('exchange_rate')) {
                obj['exchange_rate'] = ApiClient.convertToType(data['exchange_rate'], 'String');
            }
            if (data.hasOwnProperty('expired_at')) {
                obj['expired_at'] = ApiClient.convertToType(data['expired_at'], 'Number');
            }
            if (data.hasOwnProperty('merchant_order_code')) {
                obj['merchant_order_code'] = ApiClient.convertToType(data['merchant_order_code'], 'String');
            }
            if (data.hasOwnProperty('psp_order_code')) {
                obj['psp_order_code'] = ApiClient.convertToType(data['psp_order_code'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = OrderStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('received_token_amount')) {
                obj['received_token_amount'] = ApiClient.convertToType(data['received_token_amount'], 'String');
            }
            if (data.hasOwnProperty('created_timestamp')) {
                obj['created_timestamp'] = ApiClient.convertToType(data['created_timestamp'], 'Number');
            }
            if (data.hasOwnProperty('updated_timestamp')) {
                obj['updated_timestamp'] = ApiClient.convertToType(data['updated_timestamp'], 'Number');
            }
            if (data.hasOwnProperty('transactions')) {
                obj['transactions'] = ApiClient.convertToType(data['transactions'], [PaymentTransaction]);
            }
            if (data.hasOwnProperty('settlement_status')) {
                obj['settlement_status'] = SettleStatus.constructFromObject(data['settlement_status']);
            }
            if (data.hasOwnProperty('amount_tolerance')) {
                obj['amount_tolerance'] = ApiClient.convertToType(data['amount_tolerance'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentOrderEventData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentOrderEventData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentOrderEventData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['data_type'] && !(typeof data['data_type'] === 'string' || data['data_type'] instanceof String)) {
            throw new Error("Expected the field `data_type` to be a primitive type in the JSON string but got " + data['data_type']);
        }
        // ensure the json data is a string
        if (data['order_id'] && !(typeof data['order_id'] === 'string' || data['order_id'] instanceof String)) {
            throw new Error("Expected the field `order_id` to be a primitive type in the JSON string but got " + data['order_id']);
        }
        // ensure the json data is a string
        if (data['merchant_id'] && !(typeof data['merchant_id'] === 'string' || data['merchant_id'] instanceof String)) {
            throw new Error("Expected the field `merchant_id` to be a primitive type in the JSON string but got " + data['merchant_id']);
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is a string
        if (data['chain_id'] && !(typeof data['chain_id'] === 'string' || data['chain_id'] instanceof String)) {
            throw new Error("Expected the field `chain_id` to be a primitive type in the JSON string but got " + data['chain_id']);
        }
        // ensure the json data is a string
        if (data['payable_amount'] && !(typeof data['payable_amount'] === 'string' || data['payable_amount'] instanceof String)) {
            throw new Error("Expected the field `payable_amount` to be a primitive type in the JSON string but got " + data['payable_amount']);
        }
        // ensure the json data is a string
        if (data['receive_address'] && !(typeof data['receive_address'] === 'string' || data['receive_address'] instanceof String)) {
            throw new Error("Expected the field `receive_address` to be a primitive type in the JSON string but got " + data['receive_address']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['order_amount'] && !(typeof data['order_amount'] === 'string' || data['order_amount'] instanceof String)) {
            throw new Error("Expected the field `order_amount` to be a primitive type in the JSON string but got " + data['order_amount']);
        }
        // ensure the json data is a string
        if (data['fee_amount'] && !(typeof data['fee_amount'] === 'string' || data['fee_amount'] instanceof String)) {
            throw new Error("Expected the field `fee_amount` to be a primitive type in the JSON string but got " + data['fee_amount']);
        }
        // ensure the json data is a string
        if (data['exchange_rate'] && !(typeof data['exchange_rate'] === 'string' || data['exchange_rate'] instanceof String)) {
            throw new Error("Expected the field `exchange_rate` to be a primitive type in the JSON string but got " + data['exchange_rate']);
        }
        // ensure the json data is a string
        if (data['merchant_order_code'] && !(typeof data['merchant_order_code'] === 'string' || data['merchant_order_code'] instanceof String)) {
            throw new Error("Expected the field `merchant_order_code` to be a primitive type in the JSON string but got " + data['merchant_order_code']);
        }
        // ensure the json data is a string
        if (data['psp_order_code'] && !(typeof data['psp_order_code'] === 'string' || data['psp_order_code'] instanceof String)) {
            throw new Error("Expected the field `psp_order_code` to be a primitive type in the JSON string but got " + data['psp_order_code']);
        }
        // ensure the json data is a string
        if (data['received_token_amount'] && !(typeof data['received_token_amount'] === 'string' || data['received_token_amount'] instanceof String)) {
            throw new Error("Expected the field `received_token_amount` to be a primitive type in the JSON string but got " + data['received_token_amount']);
        }
        if (data['transactions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transactions'])) {
                throw new Error("Expected the field `transactions` to be an array in the JSON data but got " + data['transactions']);
            }
            // validate the optional field `transactions` (array)
            for (const item of data['transactions']) {
                PaymentTransaction.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['amount_tolerance'] && !(typeof data['amount_tolerance'] === 'string' || data['amount_tolerance'] instanceof String)) {
            throw new Error("Expected the field `amount_tolerance` to be a primitive type in the JSON string but got " + data['amount_tolerance']);
        }

        return true;
    }


}

PaymentOrderEventData.RequiredProperties = ["data_type", "order_id", "token_id", "chain_id", "payable_amount", "receive_address", "currency", "order_amount", "fee_amount", "exchange_rate", "psp_order_code", "status", "received_token_amount"];

/**
 *  The data type of the event. - `Transaction`: The transaction event data. - `TSSRequest`: The TSS request event data. - `Addresses`: The addresses event data. - `WalletInfo`: The wallet information event data. - `MPCVault`: The MPC vault event data. - `Chains`: The enabled chain event data. - `Tokens`: The enabled token event data. - `TokenListing`: The token listing event data.        - `PaymentOrder`: The payment order event data. - `PaymentRefund`: The payment refund event data. - `PaymentSettlement`: The payment settlement event data. - `PaymentTransaction`: The payment transaction event data. - `PaymentAddressUpdate`: The top-up address update event data. - `BalanceUpdateInfo`: The balance update event data. - `SuspendedToken`: The token suspension event data. - `ComplianceDisposition`: The compliance disposition event data. - `ComplianceKytScreenings`: The compliance KYT screenings event data.
 * @member {module:model/PaymentOrderEventData.DataTypeEnum} data_type
 */
PaymentOrderEventData.prototype['data_type'] = undefined;

/**
 * The order ID.
 * @member {String} order_id
 */
PaymentOrderEventData.prototype['order_id'] = undefined;

/**
 * The merchant ID.
 * @member {String} merchant_id
 */
PaymentOrderEventData.prototype['merchant_id'] = undefined;

/**
 *  The ID of the cryptocurrency used for payment. Supported tokens:  - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC` - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
 * @member {String} token_id
 */
PaymentOrderEventData.prototype['token_id'] = undefined;

/**
 *  The ID of the blockchain network where the payment transaction should be made. Supported chains:  - USDC: `ETH`, `ARBITRUM`, `SOL`, `BASE`, `MATIC`, `BSC` - USDT: `TRON`, `ETH`, `ARBITRUM`, `SOL`, `BASE`, `MATIC`, `BSC` 
 * @member {String} chain_id
 */
PaymentOrderEventData.prototype['chain_id'] = undefined;

/**
 * The cryptocurrency amount to be paid for this order.
 * @member {String} payable_amount
 */
PaymentOrderEventData.prototype['payable_amount'] = undefined;

/**
 * The recipient wallet address to be used for the payment transaction.
 * @member {String} receive_address
 */
PaymentOrderEventData.prototype['receive_address'] = undefined;

/**
 * The fiat currency of the order.
 * @member {String} currency
 */
PaymentOrderEventData.prototype['currency'] = undefined;

/**
 * The base amount of the order in fiat currency, excluding the developer fee (specified in `fee_amount`).
 * @member {String} order_amount
 */
PaymentOrderEventData.prototype['order_amount'] = undefined;

/**
 * The developer fee for the order in fiat currency. It is added to the base amount (`order_amount`) to determine the final charge.
 * @member {String} fee_amount
 */
PaymentOrderEventData.prototype['fee_amount'] = undefined;

/**
 * The exchange rate between a currency pair. Expressed as the amount of fiat currency per one unit of cryptocurrency. For example, if the cryptocurrency is USDT and the fiat currency is USD, a rate of \"0.99\" means 1 USDT = 0.99 USD.
 * @member {String} exchange_rate
 */
PaymentOrderEventData.prototype['exchange_rate'] = undefined;

/**
 * The expiration time of the pay-in order, represented as a UNIX timestamp in seconds.
 * @member {Number} expired_at
 */
PaymentOrderEventData.prototype['expired_at'] = undefined;

/**
 * A unique reference code assigned by the merchant to identify this order in their system.
 * @member {String} merchant_order_code
 */
PaymentOrderEventData.prototype['merchant_order_code'] = undefined;

/**
 * A unique reference code assigned by the developer to identify this order in their system.
 * @member {String} psp_order_code
 */
PaymentOrderEventData.prototype['psp_order_code'] = undefined;

/**
 * @member {module:model/OrderStatus} status
 */
PaymentOrderEventData.prototype['status'] = undefined;

/**
 * The total cryptocurrency amount received for this order. Updates until the expiration time. Precision matches the token standard (e.g., 6 decimals for USDT).
 * @member {String} received_token_amount
 */
PaymentOrderEventData.prototype['received_token_amount'] = undefined;

/**
 * The creation time of the order, represented as a UNIX timestamp in seconds.
 * @member {Number} created_timestamp
 */
PaymentOrderEventData.prototype['created_timestamp'] = undefined;

/**
 * The last update time of the order, represented as a UNIX timestamp in seconds.
 * @member {Number} updated_timestamp
 */
PaymentOrderEventData.prototype['updated_timestamp'] = undefined;

/**
 * An array of transactions associated with this pay-in order. Each transaction represents a separate blockchain operation related to the pay-in process.
 * @member {Array.<module:model/PaymentTransaction>} transactions
 */
PaymentOrderEventData.prototype['transactions'] = undefined;

/**
 * @member {module:model/SettleStatus} settlement_status
 */
PaymentOrderEventData.prototype['settlement_status'] = undefined;

/**
 * Allowed amount deviation.
 * @member {String} amount_tolerance
 */
PaymentOrderEventData.prototype['amount_tolerance'] = undefined;


// Implement WebhookEventDataType interface:
/**
 *  The data type of the event. - `Transaction`: The transaction event data. - `TSSRequest`: The TSS request event data. - `Addresses`: The addresses event data. - `WalletInfo`: The wallet information event data. - `MPCVault`: The MPC vault event data. - `Chains`: The enabled chain event data. - `Tokens`: The enabled token event data. - `TokenListing`: The token listing event data.        - `PaymentOrder`: The payment order event data. - `PaymentRefund`: The payment refund event data. - `PaymentSettlement`: The payment settlement event data. - `PaymentTransaction`: The payment transaction event data. - `PaymentAddressUpdate`: The top-up address update event data. - `BalanceUpdateInfo`: The balance update event data. - `SuspendedToken`: The token suspension event data. - `ComplianceDisposition`: The compliance disposition event data. - `ComplianceKytScreenings`: The compliance KYT screenings event data.
 * @member {module:model/WebhookEventDataType.DataTypeEnum} data_type
 */
WebhookEventDataType.prototype['data_type'] = undefined;
// Implement Order interface:
/**
 * The order ID.
 * @member {String} order_id
 */
Order.prototype['order_id'] = undefined;
/**
 * The merchant ID.
 * @member {String} merchant_id
 */
Order.prototype['merchant_id'] = undefined;
/**
 *  The ID of the cryptocurrency used for payment. Supported tokens:  - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC` - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
 * @member {String} token_id
 */
Order.prototype['token_id'] = undefined;
/**
 *  The ID of the blockchain network where the payment transaction should be made. Supported chains:  - USDC: `ETH`, `ARBITRUM`, `SOL`, `BASE`, `MATIC`, `BSC` - USDT: `TRON`, `ETH`, `ARBITRUM`, `SOL`, `BASE`, `MATIC`, `BSC` 
 * @member {String} chain_id
 */
Order.prototype['chain_id'] = undefined;
/**
 * The cryptocurrency amount to be paid for this order.
 * @member {String} payable_amount
 */
Order.prototype['payable_amount'] = undefined;
/**
 * The recipient wallet address to be used for the payment transaction.
 * @member {String} receive_address
 */
Order.prototype['receive_address'] = undefined;
/**
 * The fiat currency of the order.
 * @member {String} currency
 */
Order.prototype['currency'] = undefined;
/**
 * The base amount of the order in fiat currency, excluding the developer fee (specified in `fee_amount`).
 * @member {String} order_amount
 */
Order.prototype['order_amount'] = undefined;
/**
 * The developer fee for the order in fiat currency. It is added to the base amount (`order_amount`) to determine the final charge.
 * @member {String} fee_amount
 */
Order.prototype['fee_amount'] = undefined;
/**
 * The exchange rate between a currency pair. Expressed as the amount of fiat currency per one unit of cryptocurrency. For example, if the cryptocurrency is USDT and the fiat currency is USD, a rate of \"0.99\" means 1 USDT = 0.99 USD.
 * @member {String} exchange_rate
 */
Order.prototype['exchange_rate'] = undefined;
/**
 * The expiration time of the pay-in order, represented as a UNIX timestamp in seconds.
 * @member {Number} expired_at
 */
Order.prototype['expired_at'] = undefined;
/**
 * A unique reference code assigned by the merchant to identify this order in their system.
 * @member {String} merchant_order_code
 */
Order.prototype['merchant_order_code'] = undefined;
/**
 * A unique reference code assigned by the developer to identify this order in their system.
 * @member {String} psp_order_code
 */
Order.prototype['psp_order_code'] = undefined;
/**
 * @member {module:model/OrderStatus} status
 */
Order.prototype['status'] = undefined;
/**
 * The total cryptocurrency amount received for this order. Updates until the expiration time. Precision matches the token standard (e.g., 6 decimals for USDT).
 * @member {String} received_token_amount
 */
Order.prototype['received_token_amount'] = undefined;
/**
 * The creation time of the order, represented as a UNIX timestamp in seconds.
 * @member {Number} created_timestamp
 */
Order.prototype['created_timestamp'] = undefined;
/**
 * The last update time of the order, represented as a UNIX timestamp in seconds.
 * @member {Number} updated_timestamp
 */
Order.prototype['updated_timestamp'] = undefined;
/**
 * An array of transactions associated with this pay-in order. Each transaction represents a separate blockchain operation related to the pay-in process.
 * @member {Array.<module:model/PaymentTransaction>} transactions
 */
Order.prototype['transactions'] = undefined;
/**
 * @member {module:model/SettleStatus} settlement_status
 */
Order.prototype['settlement_status'] = undefined;
/**
 * Allowed amount deviation.
 * @member {String} amount_tolerance
 */
Order.prototype['amount_tolerance'] = undefined;



/**
 * Allowed values for the <code>data_type</code> property.
 * @enum {String}
 * @readonly
 */
PaymentOrderEventData['DataTypeEnum'] = {

    /**
     * value: "Transaction"
     * @const
     */
    "Transaction": "Transaction",

    /**
     * value: "TSSRequest"
     * @const
     */
    "TSSRequest": "TSSRequest",

    /**
     * value: "Addresses"
     * @const
     */
    "Addresses": "Addresses",

    /**
     * value: "WalletInfo"
     * @const
     */
    "WalletInfo": "WalletInfo",

    /**
     * value: "MPCVault"
     * @const
     */
    "MPCVault": "MPCVault",

    /**
     * value: "Chains"
     * @const
     */
    "Chains": "Chains",

    /**
     * value: "Tokens"
     * @const
     */
    "Tokens": "Tokens",

    /**
     * value: "TokenListing"
     * @const
     */
    "TokenListing": "TokenListing",

    /**
     * value: "PaymentOrder"
     * @const
     */
    "PaymentOrder": "PaymentOrder",

    /**
     * value: "PaymentRefund"
     * @const
     */
    "PaymentRefund": "PaymentRefund",

    /**
     * value: "PaymentSettlement"
     * @const
     */
    "PaymentSettlement": "PaymentSettlement",

    /**
     * value: "PaymentTransaction"
     * @const
     */
    "PaymentTransaction": "PaymentTransaction",

    /**
     * value: "PaymentAddressUpdate"
     * @const
     */
    "PaymentAddressUpdate": "PaymentAddressUpdate",

    /**
     * value: "BalanceUpdateInfo"
     * @const
     */
    "BalanceUpdateInfo": "BalanceUpdateInfo",

    /**
     * value: "SuspendedToken"
     * @const
     */
    "SuspendedToken": "SuspendedToken",

    /**
     * value: "ComplianceDisposition"
     * @const
     */
    "ComplianceDisposition": "ComplianceDisposition",

    /**
     * value: "ComplianceKytScreenings"
     * @const
     */
    "ComplianceKytScreenings": "ComplianceKytScreenings",

    /**
     * value: "unknown_default_open_api"
     * @const
     */
    "unknown_default_open_api": "unknown_default_open_api"
};



export default PaymentOrderEventData;

