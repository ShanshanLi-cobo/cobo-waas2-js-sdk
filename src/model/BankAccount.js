/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BankAccount model module.
 * @module model/BankAccount
 */
class BankAccount {
    /**
     * Constructs a new <code>BankAccount</code>.
     * @alias module:model/BankAccount
     * @param bank_account_id {String} The bank account ID.
     * @param info {Object.<String, Object>} JSON-formatted bank account details.
     */
    constructor(bank_account_id, info) { 
        
        BankAccount.initialize(this, bank_account_id, info);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bank_account_id, info) { 
        obj['bank_account_id'] = bank_account_id;
        obj['info'] = info;
    }

    /**
     * Constructs a <code>BankAccount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BankAccount} obj Optional instance to populate.
     * @return {module:model/BankAccount} The populated <code>BankAccount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BankAccount();

            if (data.hasOwnProperty('bank_account_id')) {
                obj['bank_account_id'] = ApiClient.convertToType(data['bank_account_id'], 'String');
            }
            if (data.hasOwnProperty('info')) {
                obj['info'] = ApiClient.convertToType(data['info'], {'String': Object});
            }
            if (data.hasOwnProperty('created_timestamp')) {
                obj['created_timestamp'] = ApiClient.convertToType(data['created_timestamp'], 'Number');
            }
            if (data.hasOwnProperty('updated_timestamp')) {
                obj['updated_timestamp'] = ApiClient.convertToType(data['updated_timestamp'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BankAccount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BankAccount</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BankAccount.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['bank_account_id'] && !(typeof data['bank_account_id'] === 'string' || data['bank_account_id'] instanceof String)) {
            throw new Error("Expected the field `bank_account_id` to be a primitive type in the JSON string but got " + data['bank_account_id']);
        }

        return true;
    }


}

BankAccount.RequiredProperties = ["bank_account_id", "info"];

/**
 * The bank account ID.
 * @member {String} bank_account_id
 */
BankAccount.prototype['bank_account_id'] = undefined;

/**
 * JSON-formatted bank account details.
 * @member {Object.<String, Object>} info
 */
BankAccount.prototype['info'] = undefined;

/**
 * The created time of the bank account, represented as a UNIX timestamp in seconds.
 * @member {Number} created_timestamp
 */
BankAccount.prototype['created_timestamp'] = undefined;

/**
 * The updated time of the bank account, represented as a UNIX timestamp in seconds.
 * @member {Number} updated_timestamp
 */
BankAccount.prototype['updated_timestamp'] = undefined;






export default BankAccount;

