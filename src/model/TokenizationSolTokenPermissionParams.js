/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TokenizationSolTokenPermissionParams model module.
 * @module model/TokenizationSolTokenPermissionParams
 */
class TokenizationSolTokenPermissionParams {
    /**
     * Constructs a new <code>TokenizationSolTokenPermissionParams</code>.
     * Role-based permission settings for Solana SPL Token 2022. If not provided, all permissions will be granted to the issuance wallet by default.
     * @alias module:model/TokenizationSolTokenPermissionParams
     */
    constructor() { 
        
        TokenizationSolTokenPermissionParams.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TokenizationSolTokenPermissionParams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokenizationSolTokenPermissionParams} obj Optional instance to populate.
     * @return {module:model/TokenizationSolTokenPermissionParams} The populated <code>TokenizationSolTokenPermissionParams</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TokenizationSolTokenPermissionParams();

            if (data.hasOwnProperty('permanent_delegate')) {
                obj['permanent_delegate'] = ApiClient.convertToType(data['permanent_delegate'], 'String');
            }
            if (data.hasOwnProperty('minter')) {
                obj['minter'] = ApiClient.convertToType(data['minter'], 'String');
            }
            if (data.hasOwnProperty('freezer')) {
                obj['freezer'] = ApiClient.convertToType(data['freezer'], 'String');
            }
            if (data.hasOwnProperty('updater')) {
                obj['updater'] = ApiClient.convertToType(data['updater'], 'String');
            }
            if (data.hasOwnProperty('pauser')) {
                obj['pauser'] = ApiClient.convertToType(data['pauser'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TokenizationSolTokenPermissionParams</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TokenizationSolTokenPermissionParams</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['permanent_delegate'] && !(typeof data['permanent_delegate'] === 'string' || data['permanent_delegate'] instanceof String)) {
            throw new Error("Expected the field `permanent_delegate` to be a primitive type in the JSON string but got " + data['permanent_delegate']);
        }
        // ensure the json data is a string
        if (data['minter'] && !(typeof data['minter'] === 'string' || data['minter'] instanceof String)) {
            throw new Error("Expected the field `minter` to be a primitive type in the JSON string but got " + data['minter']);
        }
        // ensure the json data is a string
        if (data['freezer'] && !(typeof data['freezer'] === 'string' || data['freezer'] instanceof String)) {
            throw new Error("Expected the field `freezer` to be a primitive type in the JSON string but got " + data['freezer']);
        }
        // ensure the json data is a string
        if (data['updater'] && !(typeof data['updater'] === 'string' || data['updater'] instanceof String)) {
            throw new Error("Expected the field `updater` to be a primitive type in the JSON string but got " + data['updater']);
        }
        // ensure the json data is a string
        if (data['pauser'] && !(typeof data['pauser'] === 'string' || data['pauser'] instanceof String)) {
            throw new Error("Expected the field `pauser` to be a primitive type in the JSON string but got " + data['pauser']);
        }

        return true;
    }


}



/**
 * Solana wallet address that acts as a permanent delegate authority for the token. This authority can perform delegated operations on behalf of token holders.
 * @member {String} permanent_delegate
 */
TokenizationSolTokenPermissionParams.prototype['permanent_delegate'] = undefined;

/**
 * Solana wallet addres that acts as a minter authority for the token. This authority can mint new tokens.
 * @member {String} minter
 */
TokenizationSolTokenPermissionParams.prototype['minter'] = undefined;

/**
 * Solana wallet address that acts as a freezer authority for the token. This authority can freeze token accounts.
 * @member {String} freezer
 */
TokenizationSolTokenPermissionParams.prototype['freezer'] = undefined;

/**
 * Solana wallet address that acts as an updater authority for the token. This authority can update token metadata.
 * @member {String} updater
 */
TokenizationSolTokenPermissionParams.prototype['updater'] = undefined;

/**
 * Solana wallet address that acts as a pauser authority for the token. This authority can pause token transfers.
 * @member {String} pauser
 */
TokenizationSolTokenPermissionParams.prototype['pauser'] = undefined;






export default TokenizationSolTokenPermissionParams;

