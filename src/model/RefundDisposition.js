/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RefundDisposition model module.
 * @module model/RefundDisposition
 */
class RefundDisposition {
    /**
     * Constructs a new <code>RefundDisposition</code>.
     * The information about a fund refund disposition request.
     * @alias module:model/RefundDisposition
     * @param transaction_id {String} The UUID of the transaction to be refunded. This identifies the original transaction that requires refund processing.
     * @param destination_address {String} The blockchain address where the refunded funds will be sent.
     * @param disposition_amount {String} The amount to be refunded from the original transaction, specified as a numeric string. This value cannot exceed the total amount of the original transaction. 
     */
    constructor(transaction_id, destination_address, disposition_amount) { 
        
        RefundDisposition.initialize(this, transaction_id, destination_address, disposition_amount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, transaction_id, destination_address, disposition_amount) { 
        obj['transaction_id'] = transaction_id;
        obj['destination_address'] = destination_address;
        obj['disposition_amount'] = disposition_amount;
    }

    /**
     * Constructs a <code>RefundDisposition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RefundDisposition} obj Optional instance to populate.
     * @return {module:model/RefundDisposition} The populated <code>RefundDisposition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RefundDisposition();

            if (data.hasOwnProperty('transaction_id')) {
                obj['transaction_id'] = ApiClient.convertToType(data['transaction_id'], 'String');
            }
            if (data.hasOwnProperty('destination_address')) {
                obj['destination_address'] = ApiClient.convertToType(data['destination_address'], 'String');
            }
            if (data.hasOwnProperty('disposition_amount')) {
                obj['disposition_amount'] = ApiClient.convertToType(data['disposition_amount'], 'String');
            }
            if (data.hasOwnProperty('category_names')) {
                obj['category_names'] = ApiClient.convertToType(data['category_names'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RefundDisposition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RefundDisposition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RefundDisposition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['transaction_id'] && !(typeof data['transaction_id'] === 'string' || data['transaction_id'] instanceof String)) {
            throw new Error("Expected the field `transaction_id` to be a primitive type in the JSON string but got " + data['transaction_id']);
        }
        // ensure the json data is a string
        if (data['destination_address'] && !(typeof data['destination_address'] === 'string' || data['destination_address'] instanceof String)) {
            throw new Error("Expected the field `destination_address` to be a primitive type in the JSON string but got " + data['destination_address']);
        }
        // ensure the json data is a string
        if (data['disposition_amount'] && !(typeof data['disposition_amount'] === 'string' || data['disposition_amount'] instanceof String)) {
            throw new Error("Expected the field `disposition_amount` to be a primitive type in the JSON string but got " + data['disposition_amount']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['category_names'])) {
            throw new Error("Expected the field `category_names` to be an array in the JSON data but got " + data['category_names']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }

        return true;
    }


}

RefundDisposition.RequiredProperties = ["transaction_id", "destination_address", "disposition_amount"];

/**
 * The UUID of the transaction to be refunded. This identifies the original transaction that requires refund processing.
 * @member {String} transaction_id
 */
RefundDisposition.prototype['transaction_id'] = undefined;

/**
 * The blockchain address where the refunded funds will be sent.
 * @member {String} destination_address
 */
RefundDisposition.prototype['destination_address'] = undefined;

/**
 * The amount to be refunded from the original transaction, specified as a numeric string. This value cannot exceed the total amount of the original transaction. 
 * @member {String} disposition_amount
 */
RefundDisposition.prototype['disposition_amount'] = undefined;

/**
 * Custom categories to identify and track this refund transaction. Used for transaction classification and reporting.
 * @member {Array.<String>} category_names
 */
RefundDisposition.prototype['category_names'] = undefined;

/**
 * Additional notes or description for this refund disposition.
 * @member {String} description
 */
RefundDisposition.prototype['description'] = undefined;






export default RefundDisposition;

