/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TokenizationBurnEstimateFeeParams from './TokenizationBurnEstimateFeeParams';
import TokenizationBurnTokenParamsBurnsInner from './TokenizationBurnTokenParamsBurnsInner';
import TokenizationContractCallEstimateFeeParams from './TokenizationContractCallEstimateFeeParams';
import TokenizationContractCallParamsData from './TokenizationContractCallParamsData';
import TokenizationIssueEstimateFeeParams from './TokenizationIssueEstimateFeeParams';
import TokenizationIssueTokenParamsTokenParams from './TokenizationIssueTokenParamsTokenParams';
import TokenizationMintEstimateFeeParams from './TokenizationMintEstimateFeeParams';
import TokenizationMintTokenParamsMintsInner from './TokenizationMintTokenParamsMintsInner';
import TokenizationOperationType from './TokenizationOperationType';
import TokenizationPauseEstimateFeeParams from './TokenizationPauseEstimateFeeParams';
import TokenizationPermissionAction from './TokenizationPermissionAction';
import TokenizationToggleAllowlistEstimateFeeParams from './TokenizationToggleAllowlistEstimateFeeParams';
import TokenizationTokenOperationSource from './TokenizationTokenOperationSource';
import TokenizationTokenPermissionType from './TokenizationTokenPermissionType';
import TokenizationUnpauseEstimateFeeParams from './TokenizationUnpauseEstimateFeeParams';
import TokenizationUpdateAllowlistAddressesEstimateFeeParams from './TokenizationUpdateAllowlistAddressesEstimateFeeParams';
import TokenizationUpdateBlocklistAddressesEstimateFeeParams from './TokenizationUpdateBlocklistAddressesEstimateFeeParams';
import TokenizationUpdateBlocklistAddressesParamsAddressesInner from './TokenizationUpdateBlocklistAddressesParamsAddressesInner';
import TokenizationUpdatePermissionsEstimateFeeParams from './TokenizationUpdatePermissionsEstimateFeeParams';

/**
 * The TokenizationEstimateFeeRequestOperationParams model module.
 * @module model/TokenizationEstimateFeeRequestOperationParams
 */
class TokenizationEstimateFeeRequestOperationParams {
    /**
     * Constructs a new <code>TokenizationEstimateFeeRequestOperationParams</code>.
     * @alias module:model/TokenizationEstimateFeeRequestOperationParams
     * @param {(module:model/TokenizationBurnEstimateFeeParams|module:model/TokenizationContractCallEstimateFeeParams|module:model/TokenizationIssueEstimateFeeParams|module:model/TokenizationMintEstimateFeeParams|module:model/TokenizationPauseEstimateFeeParams|module:model/TokenizationToggleAllowlistEstimateFeeParams|module:model/TokenizationUnpauseEstimateFeeParams|module:model/TokenizationUpdateAllowlistAddressesEstimateFeeParams|module:model/TokenizationUpdateBlocklistAddressesEstimateFeeParams|module:model/TokenizationUpdatePermissionsEstimateFeeParams)} instance The actual instance to initialize TokenizationEstimateFeeRequestOperationParams.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        var discriminatorValue = instance["operation_type"];

        if (discriminatorValue) {
            switch(discriminatorValue) {
                case "Burn":
                    this.actualInstance = TokenizationBurnEstimateFeeParams.constructFromObject(instance);
                    match++;
                    break;
                case "ContractCall":
                    this.actualInstance = TokenizationContractCallEstimateFeeParams.constructFromObject(instance);
                    match++;
                    break;
                case "Issue":
                    this.actualInstance = TokenizationIssueEstimateFeeParams.constructFromObject(instance);
                    match++;
                    break;
                case "Mint":
                    this.actualInstance = TokenizationMintEstimateFeeParams.constructFromObject(instance);
                    match++;
                    break;
                case "Pause":
                    this.actualInstance = TokenizationPauseEstimateFeeParams.constructFromObject(instance);
                    match++;
                    break;
                case "ToggleAllowlist":
                    this.actualInstance = TokenizationToggleAllowlistEstimateFeeParams.constructFromObject(instance);
                    match++;
                    break;
                case "Unpause":
                    this.actualInstance = TokenizationUnpauseEstimateFeeParams.constructFromObject(instance);
                    match++;
                    break;
                case "UpdateAllowlistAddresses":
                    this.actualInstance = TokenizationUpdateAllowlistAddressesEstimateFeeParams.constructFromObject(instance);
                    match++;
                    break;
                case "UpdateBlocklistAddresses":
                    this.actualInstance = TokenizationUpdateBlocklistAddressesEstimateFeeParams.constructFromObject(instance);
                    match++;
                    break;
                case "UpdatePermissions":
                    this.actualInstance = TokenizationUpdatePermissionsEstimateFeeParams.constructFromObject(instance);
                    match++;
                    break;
                default:
                    errorMessages.push("Unrecognized discriminator value: " + discriminatorValue);
                    break;
            }
            return;
        }

        try {
            if (instance instanceof TokenizationIssueEstimateFeeParams) {
                this.actualInstance = instance;
            } else if(!!TokenizationIssueEstimateFeeParams.validateJSON && TokenizationIssueEstimateFeeParams.validateJSON(instance)){
                // plain JS object
                // create TokenizationIssueEstimateFeeParams from JS object
                this.actualInstance = TokenizationIssueEstimateFeeParams.constructFromObject(instance);
            } else {
                if(TokenizationIssueEstimateFeeParams.constructFromObject(instance)) {
                    if (!!TokenizationIssueEstimateFeeParams.constructFromObject(instance).toJSON) {
                        if (TokenizationIssueEstimateFeeParams.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TokenizationIssueEstimateFeeParams.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TokenizationIssueEstimateFeeParams.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TokenizationIssueEstimateFeeParams
            errorMessages.push("Failed to construct TokenizationIssueEstimateFeeParams: " + err)
        }

        try {
            if (instance instanceof TokenizationMintEstimateFeeParams) {
                this.actualInstance = instance;
            } else if(!!TokenizationMintEstimateFeeParams.validateJSON && TokenizationMintEstimateFeeParams.validateJSON(instance)){
                // plain JS object
                // create TokenizationMintEstimateFeeParams from JS object
                this.actualInstance = TokenizationMintEstimateFeeParams.constructFromObject(instance);
            } else {
                if(TokenizationMintEstimateFeeParams.constructFromObject(instance)) {
                    if (!!TokenizationMintEstimateFeeParams.constructFromObject(instance).toJSON) {
                        if (TokenizationMintEstimateFeeParams.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TokenizationMintEstimateFeeParams.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TokenizationMintEstimateFeeParams.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TokenizationMintEstimateFeeParams
            errorMessages.push("Failed to construct TokenizationMintEstimateFeeParams: " + err)
        }

        try {
            if (instance instanceof TokenizationBurnEstimateFeeParams) {
                this.actualInstance = instance;
            } else if(!!TokenizationBurnEstimateFeeParams.validateJSON && TokenizationBurnEstimateFeeParams.validateJSON(instance)){
                // plain JS object
                // create TokenizationBurnEstimateFeeParams from JS object
                this.actualInstance = TokenizationBurnEstimateFeeParams.constructFromObject(instance);
            } else {
                if(TokenizationBurnEstimateFeeParams.constructFromObject(instance)) {
                    if (!!TokenizationBurnEstimateFeeParams.constructFromObject(instance).toJSON) {
                        if (TokenizationBurnEstimateFeeParams.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TokenizationBurnEstimateFeeParams.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TokenizationBurnEstimateFeeParams.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TokenizationBurnEstimateFeeParams
            errorMessages.push("Failed to construct TokenizationBurnEstimateFeeParams: " + err)
        }

        try {
            if (instance instanceof TokenizationPauseEstimateFeeParams) {
                this.actualInstance = instance;
            } else if(!!TokenizationPauseEstimateFeeParams.validateJSON && TokenizationPauseEstimateFeeParams.validateJSON(instance)){
                // plain JS object
                // create TokenizationPauseEstimateFeeParams from JS object
                this.actualInstance = TokenizationPauseEstimateFeeParams.constructFromObject(instance);
            } else {
                if(TokenizationPauseEstimateFeeParams.constructFromObject(instance)) {
                    if (!!TokenizationPauseEstimateFeeParams.constructFromObject(instance).toJSON) {
                        if (TokenizationPauseEstimateFeeParams.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TokenizationPauseEstimateFeeParams.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TokenizationPauseEstimateFeeParams.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TokenizationPauseEstimateFeeParams
            errorMessages.push("Failed to construct TokenizationPauseEstimateFeeParams: " + err)
        }

        try {
            if (instance instanceof TokenizationUnpauseEstimateFeeParams) {
                this.actualInstance = instance;
            } else if(!!TokenizationUnpauseEstimateFeeParams.validateJSON && TokenizationUnpauseEstimateFeeParams.validateJSON(instance)){
                // plain JS object
                // create TokenizationUnpauseEstimateFeeParams from JS object
                this.actualInstance = TokenizationUnpauseEstimateFeeParams.constructFromObject(instance);
            } else {
                if(TokenizationUnpauseEstimateFeeParams.constructFromObject(instance)) {
                    if (!!TokenizationUnpauseEstimateFeeParams.constructFromObject(instance).toJSON) {
                        if (TokenizationUnpauseEstimateFeeParams.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TokenizationUnpauseEstimateFeeParams.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TokenizationUnpauseEstimateFeeParams.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TokenizationUnpauseEstimateFeeParams
            errorMessages.push("Failed to construct TokenizationUnpauseEstimateFeeParams: " + err)
        }

        try {
            if (instance instanceof TokenizationUpdateAllowlistAddressesEstimateFeeParams) {
                this.actualInstance = instance;
            } else if(!!TokenizationUpdateAllowlistAddressesEstimateFeeParams.validateJSON && TokenizationUpdateAllowlistAddressesEstimateFeeParams.validateJSON(instance)){
                // plain JS object
                // create TokenizationUpdateAllowlistAddressesEstimateFeeParams from JS object
                this.actualInstance = TokenizationUpdateAllowlistAddressesEstimateFeeParams.constructFromObject(instance);
            } else {
                if(TokenizationUpdateAllowlistAddressesEstimateFeeParams.constructFromObject(instance)) {
                    if (!!TokenizationUpdateAllowlistAddressesEstimateFeeParams.constructFromObject(instance).toJSON) {
                        if (TokenizationUpdateAllowlistAddressesEstimateFeeParams.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TokenizationUpdateAllowlistAddressesEstimateFeeParams.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TokenizationUpdateAllowlistAddressesEstimateFeeParams.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TokenizationUpdateAllowlistAddressesEstimateFeeParams
            errorMessages.push("Failed to construct TokenizationUpdateAllowlistAddressesEstimateFeeParams: " + err)
        }

        try {
            if (instance instanceof TokenizationUpdateBlocklistAddressesEstimateFeeParams) {
                this.actualInstance = instance;
            } else if(!!TokenizationUpdateBlocklistAddressesEstimateFeeParams.validateJSON && TokenizationUpdateBlocklistAddressesEstimateFeeParams.validateJSON(instance)){
                // plain JS object
                // create TokenizationUpdateBlocklistAddressesEstimateFeeParams from JS object
                this.actualInstance = TokenizationUpdateBlocklistAddressesEstimateFeeParams.constructFromObject(instance);
            } else {
                if(TokenizationUpdateBlocklistAddressesEstimateFeeParams.constructFromObject(instance)) {
                    if (!!TokenizationUpdateBlocklistAddressesEstimateFeeParams.constructFromObject(instance).toJSON) {
                        if (TokenizationUpdateBlocklistAddressesEstimateFeeParams.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TokenizationUpdateBlocklistAddressesEstimateFeeParams.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TokenizationUpdateBlocklistAddressesEstimateFeeParams.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TokenizationUpdateBlocklistAddressesEstimateFeeParams
            errorMessages.push("Failed to construct TokenizationUpdateBlocklistAddressesEstimateFeeParams: " + err)
        }

        try {
            if (instance instanceof TokenizationToggleAllowlistEstimateFeeParams) {
                this.actualInstance = instance;
            } else if(!!TokenizationToggleAllowlistEstimateFeeParams.validateJSON && TokenizationToggleAllowlistEstimateFeeParams.validateJSON(instance)){
                // plain JS object
                // create TokenizationToggleAllowlistEstimateFeeParams from JS object
                this.actualInstance = TokenizationToggleAllowlistEstimateFeeParams.constructFromObject(instance);
            } else {
                if(TokenizationToggleAllowlistEstimateFeeParams.constructFromObject(instance)) {
                    if (!!TokenizationToggleAllowlistEstimateFeeParams.constructFromObject(instance).toJSON) {
                        if (TokenizationToggleAllowlistEstimateFeeParams.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TokenizationToggleAllowlistEstimateFeeParams.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TokenizationToggleAllowlistEstimateFeeParams.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TokenizationToggleAllowlistEstimateFeeParams
            errorMessages.push("Failed to construct TokenizationToggleAllowlistEstimateFeeParams: " + err)
        }

        try {
            if (instance instanceof TokenizationContractCallEstimateFeeParams) {
                this.actualInstance = instance;
            } else if(!!TokenizationContractCallEstimateFeeParams.validateJSON && TokenizationContractCallEstimateFeeParams.validateJSON(instance)){
                // plain JS object
                // create TokenizationContractCallEstimateFeeParams from JS object
                this.actualInstance = TokenizationContractCallEstimateFeeParams.constructFromObject(instance);
            } else {
                if(TokenizationContractCallEstimateFeeParams.constructFromObject(instance)) {
                    if (!!TokenizationContractCallEstimateFeeParams.constructFromObject(instance).toJSON) {
                        if (TokenizationContractCallEstimateFeeParams.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TokenizationContractCallEstimateFeeParams.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TokenizationContractCallEstimateFeeParams.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TokenizationContractCallEstimateFeeParams
            errorMessages.push("Failed to construct TokenizationContractCallEstimateFeeParams: " + err)
        }

        try {
            if (instance instanceof TokenizationUpdatePermissionsEstimateFeeParams) {
                this.actualInstance = instance;
            } else if(!!TokenizationUpdatePermissionsEstimateFeeParams.validateJSON && TokenizationUpdatePermissionsEstimateFeeParams.validateJSON(instance)){
                // plain JS object
                // create TokenizationUpdatePermissionsEstimateFeeParams from JS object
                this.actualInstance = TokenizationUpdatePermissionsEstimateFeeParams.constructFromObject(instance);
            } else {
                if(TokenizationUpdatePermissionsEstimateFeeParams.constructFromObject(instance)) {
                    if (!!TokenizationUpdatePermissionsEstimateFeeParams.constructFromObject(instance).toJSON) {
                        if (TokenizationUpdatePermissionsEstimateFeeParams.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TokenizationUpdatePermissionsEstimateFeeParams.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TokenizationUpdatePermissionsEstimateFeeParams.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TokenizationUpdatePermissionsEstimateFeeParams
            errorMessages.push("Failed to construct TokenizationUpdatePermissionsEstimateFeeParams: " + err)
        }

        // if (match > 1) {
        //    throw new Error("Multiple matches found constructing `TokenizationEstimateFeeRequestOperationParams` with oneOf schemas TokenizationBurnEstimateFeeParams, TokenizationContractCallEstimateFeeParams, TokenizationIssueEstimateFeeParams, TokenizationMintEstimateFeeParams, TokenizationPauseEstimateFeeParams, TokenizationToggleAllowlistEstimateFeeParams, TokenizationUnpauseEstimateFeeParams, TokenizationUpdateAllowlistAddressesEstimateFeeParams, TokenizationUpdateBlocklistAddressesEstimateFeeParams, TokenizationUpdatePermissionsEstimateFeeParams. Input: " + JSON.stringify(instance));
        // } else
        if (match === 0) {
        //    this.actualInstance = null; // clear the actual instance in case there are multiple matches
        //    throw new Error("No match found constructing `TokenizationEstimateFeeRequestOperationParams` with oneOf schemas TokenizationBurnEstimateFeeParams, TokenizationContractCallEstimateFeeParams, TokenizationIssueEstimateFeeParams, TokenizationMintEstimateFeeParams, TokenizationPauseEstimateFeeParams, TokenizationToggleAllowlistEstimateFeeParams, TokenizationUnpauseEstimateFeeParams, TokenizationUpdateAllowlistAddressesEstimateFeeParams, TokenizationUpdateBlocklistAddressesEstimateFeeParams, TokenizationUpdatePermissionsEstimateFeeParams. Details: " +
        //                    errorMessages.join(", "));
        return;
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>TokenizationEstimateFeeRequestOperationParams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokenizationEstimateFeeRequestOperationParams} obj Optional instance to populate.
     * @return {module:model/TokenizationEstimateFeeRequestOperationParams} The populated <code>TokenizationEstimateFeeRequestOperationParams</code> instance.
     */
    static constructFromObject(data, obj) {
        return new TokenizationEstimateFeeRequestOperationParams(data);
    }

    /**
     * Gets the actual instance, which can be <code>TokenizationBurnEstimateFeeParams</code>, <code>TokenizationContractCallEstimateFeeParams</code>, <code>TokenizationIssueEstimateFeeParams</code>, <code>TokenizationMintEstimateFeeParams</code>, <code>TokenizationPauseEstimateFeeParams</code>, <code>TokenizationToggleAllowlistEstimateFeeParams</code>, <code>TokenizationUnpauseEstimateFeeParams</code>, <code>TokenizationUpdateAllowlistAddressesEstimateFeeParams</code>, <code>TokenizationUpdateBlocklistAddressesEstimateFeeParams</code>, <code>TokenizationUpdatePermissionsEstimateFeeParams</code>.
     * @return {(module:model/TokenizationBurnEstimateFeeParams|module:model/TokenizationContractCallEstimateFeeParams|module:model/TokenizationIssueEstimateFeeParams|module:model/TokenizationMintEstimateFeeParams|module:model/TokenizationPauseEstimateFeeParams|module:model/TokenizationToggleAllowlistEstimateFeeParams|module:model/TokenizationUnpauseEstimateFeeParams|module:model/TokenizationUpdateAllowlistAddressesEstimateFeeParams|module:model/TokenizationUpdateBlocklistAddressesEstimateFeeParams|module:model/TokenizationUpdatePermissionsEstimateFeeParams)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>TokenizationBurnEstimateFeeParams</code>, <code>TokenizationContractCallEstimateFeeParams</code>, <code>TokenizationIssueEstimateFeeParams</code>, <code>TokenizationMintEstimateFeeParams</code>, <code>TokenizationPauseEstimateFeeParams</code>, <code>TokenizationToggleAllowlistEstimateFeeParams</code>, <code>TokenizationUnpauseEstimateFeeParams</code>, <code>TokenizationUpdateAllowlistAddressesEstimateFeeParams</code>, <code>TokenizationUpdateBlocklistAddressesEstimateFeeParams</code>, <code>TokenizationUpdatePermissionsEstimateFeeParams</code>.
     * @param {(module:model/TokenizationBurnEstimateFeeParams|module:model/TokenizationContractCallEstimateFeeParams|module:model/TokenizationIssueEstimateFeeParams|module:model/TokenizationMintEstimateFeeParams|module:model/TokenizationPauseEstimateFeeParams|module:model/TokenizationToggleAllowlistEstimateFeeParams|module:model/TokenizationUnpauseEstimateFeeParams|module:model/TokenizationUpdateAllowlistAddressesEstimateFeeParams|module:model/TokenizationUpdateBlocklistAddressesEstimateFeeParams|module:model/TokenizationUpdatePermissionsEstimateFeeParams)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = TokenizationEstimateFeeRequestOperationParams.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of TokenizationEstimateFeeRequestOperationParams from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/TokenizationEstimateFeeRequestOperationParams} An instance of TokenizationEstimateFeeRequestOperationParams.
     */
    static fromJSON = function(json_string){
        return TokenizationEstimateFeeRequestOperationParams.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The chain ID where the token will be issued.
 * @member {String} chain_id
 */
TokenizationEstimateFeeRequestOperationParams.prototype['chain_id'] = undefined;

/**
 * @member {module:model/TokenizationTokenOperationSource} source
 */
TokenizationEstimateFeeRequestOperationParams.prototype['source'] = undefined;

/**
 * @member {module:model/TokenizationIssueTokenParamsTokenParams} token_params
 */
TokenizationEstimateFeeRequestOperationParams.prototype['token_params'] = undefined;

/**
 * @member {module:model/TokenizationOperationType} operation_type
 */
TokenizationEstimateFeeRequestOperationParams.prototype['operation_type'] = undefined;

/**
 * The request ID that is used to track a transaction request. The request ID is provided by you and must be unique within your organization.
 * @member {String} request_id
 */
TokenizationEstimateFeeRequestOperationParams.prototype['request_id'] = undefined;

/**
 * Details for each token mint, including amount and address to mint to.
 * @member {Array.<module:model/TokenizationMintTokenParamsMintsInner>} mints
 */
TokenizationEstimateFeeRequestOperationParams.prototype['mints'] = undefined;

/**
 * The ID of the token.
 * @member {String} token_id
 */
TokenizationEstimateFeeRequestOperationParams.prototype['token_id'] = undefined;

/**
 * Details for each token burn, including amount and address to burn from.
 * @member {Array.<module:model/TokenizationBurnTokenParamsBurnsInner>} burns
 */
TokenizationEstimateFeeRequestOperationParams.prototype['burns'] = undefined;

/**
 * @member {module:model/TokenizationPermissionAction} action
 */
TokenizationEstimateFeeRequestOperationParams.prototype['action'] = undefined;

/**
 * A list of addresses to manage. For 'add' operations, notes can be provided. For 'remove' operations, notes are ignored.
 * @member {Array.<module:model/TokenizationUpdateBlocklistAddressesParamsAddressesInner>} addresses
 */
TokenizationEstimateFeeRequestOperationParams.prototype['addresses'] = undefined;

/**
 * Whether to activate the allowlist feature for the token.
 * @member {Boolean} activation
 */
TokenizationEstimateFeeRequestOperationParams.prototype['activation'] = undefined;

/**
 * @member {module:model/TokenizationContractCallParamsData} data
 */
TokenizationEstimateFeeRequestOperationParams.prototype['data'] = undefined;

/**
 * The address to manage permissions for.
 * @member {String} address
 */
TokenizationEstimateFeeRequestOperationParams.prototype['address'] = undefined;

/**
 * The list of permissions to operate on.
 * @member {Array.<module:model/TokenizationTokenPermissionType>} permissions
 */
TokenizationEstimateFeeRequestOperationParams.prototype['permissions'] = undefined;


TokenizationEstimateFeeRequestOperationParams.OneOf = ["TokenizationBurnEstimateFeeParams", "TokenizationContractCallEstimateFeeParams", "TokenizationIssueEstimateFeeParams", "TokenizationMintEstimateFeeParams", "TokenizationPauseEstimateFeeParams", "TokenizationToggleAllowlistEstimateFeeParams", "TokenizationUnpauseEstimateFeeParams", "TokenizationUpdateAllowlistAddressesEstimateFeeParams", "TokenizationUpdateBlocklistAddressesEstimateFeeParams", "TokenizationUpdatePermissionsEstimateFeeParams"];

export default TokenizationEstimateFeeRequestOperationParams;

