/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaymentApproveSubscriptionActionData from './PaymentApproveSubscriptionActionData';
import PaymentBaseSubscriptionActionData from './PaymentBaseSubscriptionActionData';
import PaymentCreateSubscriptionActionData from './PaymentCreateSubscriptionActionData';
import PaymentDeveloperSubscriptionActionData from './PaymentDeveloperSubscriptionActionData';
import PaymentExtendPeriodSubscriptionActionData from './PaymentExtendPeriodSubscriptionActionData';
import PaymentSubscriptionActionType from './PaymentSubscriptionActionType';
import PaymentUpdateAmountSubscriptionActionData from './PaymentUpdateAmountSubscriptionActionData';

/**
 * The PaymentSubscriptionActionData model module.
 * @module model/PaymentSubscriptionActionData
 */
class PaymentSubscriptionActionData {
    /**
     * Constructs a new <code>PaymentSubscriptionActionData</code>.
     * @alias module:model/PaymentSubscriptionActionData
     * @param {(module:model/PaymentApproveSubscriptionActionData|module:model/PaymentBaseSubscriptionActionData|module:model/PaymentCreateSubscriptionActionData|module:model/PaymentDeveloperSubscriptionActionData|module:model/PaymentExtendPeriodSubscriptionActionData|module:model/PaymentUpdateAmountSubscriptionActionData)} instance The actual instance to initialize PaymentSubscriptionActionData.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        var discriminatorValue = instance["action_type"];

        if (discriminatorValue) {
            switch(discriminatorValue) {
                case "Approve":
                    this.actualInstance = PaymentBaseSubscriptionActionData.constructFromObject(instance);
                    match++;
                    break;
                case "Charge":
                    this.actualInstance = PaymentBaseSubscriptionActionData.constructFromObject(instance);
                    match++;
                    break;
                case "Create":
                    this.actualInstance = PaymentCreateSubscriptionActionData.constructFromObject(instance);
                    match++;
                    break;
                case "DeveloperPause":
                    this.actualInstance = PaymentDeveloperSubscriptionActionData.constructFromObject(instance);
                    match++;
                    break;
                case "DeveloperUnpause":
                    this.actualInstance = PaymentDeveloperSubscriptionActionData.constructFromObject(instance);
                    match++;
                    break;
                case "Downgrade":
                    this.actualInstance = PaymentUpdateAmountSubscriptionActionData.constructFromObject(instance);
                    match++;
                    break;
                case "ExtendPeriod":
                    this.actualInstance = PaymentExtendPeriodSubscriptionActionData.constructFromObject(instance);
                    match++;
                    break;
                case "Subscribe":
                    this.actualInstance = PaymentBaseSubscriptionActionData.constructFromObject(instance);
                    match++;
                    break;
                case "SubscribeAndCharge":
                    this.actualInstance = PaymentBaseSubscriptionActionData.constructFromObject(instance);
                    match++;
                    break;
                case "Upgrade":
                    this.actualInstance = PaymentUpdateAmountSubscriptionActionData.constructFromObject(instance);
                    match++;
                    break;
                default:
                    errorMessages.push("Unrecognized discriminator value: " + discriminatorValue);
                    break;
            }
            return;
        }

        try {
            if (instance instanceof PaymentCreateSubscriptionActionData) {
                this.actualInstance = instance;
            } else if(!!PaymentCreateSubscriptionActionData.validateJSON && PaymentCreateSubscriptionActionData.validateJSON(instance)){
                // plain JS object
                // create PaymentCreateSubscriptionActionData from JS object
                this.actualInstance = PaymentCreateSubscriptionActionData.constructFromObject(instance);
            } else {
                if(PaymentCreateSubscriptionActionData.constructFromObject(instance)) {
                    if (!!PaymentCreateSubscriptionActionData.constructFromObject(instance).toJSON) {
                        if (PaymentCreateSubscriptionActionData.constructFromObject(instance).toJSON()) {
                            this.actualInstance = PaymentCreateSubscriptionActionData.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = PaymentCreateSubscriptionActionData.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PaymentCreateSubscriptionActionData
            errorMessages.push("Failed to construct PaymentCreateSubscriptionActionData: " + err)
        }

        try {
            if (instance instanceof PaymentApproveSubscriptionActionData) {
                this.actualInstance = instance;
            } else if(!!PaymentApproveSubscriptionActionData.validateJSON && PaymentApproveSubscriptionActionData.validateJSON(instance)){
                // plain JS object
                // create PaymentApproveSubscriptionActionData from JS object
                this.actualInstance = PaymentApproveSubscriptionActionData.constructFromObject(instance);
            } else {
                if(PaymentApproveSubscriptionActionData.constructFromObject(instance)) {
                    if (!!PaymentApproveSubscriptionActionData.constructFromObject(instance).toJSON) {
                        if (PaymentApproveSubscriptionActionData.constructFromObject(instance).toJSON()) {
                            this.actualInstance = PaymentApproveSubscriptionActionData.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = PaymentApproveSubscriptionActionData.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PaymentApproveSubscriptionActionData
            errorMessages.push("Failed to construct PaymentApproveSubscriptionActionData: " + err)
        }

        try {
            if (instance instanceof PaymentBaseSubscriptionActionData) {
                this.actualInstance = instance;
            } else if(!!PaymentBaseSubscriptionActionData.validateJSON && PaymentBaseSubscriptionActionData.validateJSON(instance)){
                // plain JS object
                // create PaymentBaseSubscriptionActionData from JS object
                this.actualInstance = PaymentBaseSubscriptionActionData.constructFromObject(instance);
            } else {
                if(PaymentBaseSubscriptionActionData.constructFromObject(instance)) {
                    if (!!PaymentBaseSubscriptionActionData.constructFromObject(instance).toJSON) {
                        if (PaymentBaseSubscriptionActionData.constructFromObject(instance).toJSON()) {
                            this.actualInstance = PaymentBaseSubscriptionActionData.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = PaymentBaseSubscriptionActionData.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PaymentBaseSubscriptionActionData
            errorMessages.push("Failed to construct PaymentBaseSubscriptionActionData: " + err)
        }

        try {
            if (instance instanceof PaymentDeveloperSubscriptionActionData) {
                this.actualInstance = instance;
            } else if(!!PaymentDeveloperSubscriptionActionData.validateJSON && PaymentDeveloperSubscriptionActionData.validateJSON(instance)){
                // plain JS object
                // create PaymentDeveloperSubscriptionActionData from JS object
                this.actualInstance = PaymentDeveloperSubscriptionActionData.constructFromObject(instance);
            } else {
                if(PaymentDeveloperSubscriptionActionData.constructFromObject(instance)) {
                    if (!!PaymentDeveloperSubscriptionActionData.constructFromObject(instance).toJSON) {
                        if (PaymentDeveloperSubscriptionActionData.constructFromObject(instance).toJSON()) {
                            this.actualInstance = PaymentDeveloperSubscriptionActionData.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = PaymentDeveloperSubscriptionActionData.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PaymentDeveloperSubscriptionActionData
            errorMessages.push("Failed to construct PaymentDeveloperSubscriptionActionData: " + err)
        }

        try {
            if (instance instanceof PaymentExtendPeriodSubscriptionActionData) {
                this.actualInstance = instance;
            } else if(!!PaymentExtendPeriodSubscriptionActionData.validateJSON && PaymentExtendPeriodSubscriptionActionData.validateJSON(instance)){
                // plain JS object
                // create PaymentExtendPeriodSubscriptionActionData from JS object
                this.actualInstance = PaymentExtendPeriodSubscriptionActionData.constructFromObject(instance);
            } else {
                if(PaymentExtendPeriodSubscriptionActionData.constructFromObject(instance)) {
                    if (!!PaymentExtendPeriodSubscriptionActionData.constructFromObject(instance).toJSON) {
                        if (PaymentExtendPeriodSubscriptionActionData.constructFromObject(instance).toJSON()) {
                            this.actualInstance = PaymentExtendPeriodSubscriptionActionData.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = PaymentExtendPeriodSubscriptionActionData.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PaymentExtendPeriodSubscriptionActionData
            errorMessages.push("Failed to construct PaymentExtendPeriodSubscriptionActionData: " + err)
        }

        try {
            if (instance instanceof PaymentUpdateAmountSubscriptionActionData) {
                this.actualInstance = instance;
            } else if(!!PaymentUpdateAmountSubscriptionActionData.validateJSON && PaymentUpdateAmountSubscriptionActionData.validateJSON(instance)){
                // plain JS object
                // create PaymentUpdateAmountSubscriptionActionData from JS object
                this.actualInstance = PaymentUpdateAmountSubscriptionActionData.constructFromObject(instance);
            } else {
                if(PaymentUpdateAmountSubscriptionActionData.constructFromObject(instance)) {
                    if (!!PaymentUpdateAmountSubscriptionActionData.constructFromObject(instance).toJSON) {
                        if (PaymentUpdateAmountSubscriptionActionData.constructFromObject(instance).toJSON()) {
                            this.actualInstance = PaymentUpdateAmountSubscriptionActionData.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = PaymentUpdateAmountSubscriptionActionData.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PaymentUpdateAmountSubscriptionActionData
            errorMessages.push("Failed to construct PaymentUpdateAmountSubscriptionActionData: " + err)
        }

        // if (match > 1) {
        //    throw new Error("Multiple matches found constructing `PaymentSubscriptionActionData` with oneOf schemas PaymentApproveSubscriptionActionData, PaymentBaseSubscriptionActionData, PaymentCreateSubscriptionActionData, PaymentDeveloperSubscriptionActionData, PaymentExtendPeriodSubscriptionActionData, PaymentUpdateAmountSubscriptionActionData. Input: " + JSON.stringify(instance));
        // } else
        if (match === 0) {
        //    this.actualInstance = null; // clear the actual instance in case there are multiple matches
        //    throw new Error("No match found constructing `PaymentSubscriptionActionData` with oneOf schemas PaymentApproveSubscriptionActionData, PaymentBaseSubscriptionActionData, PaymentCreateSubscriptionActionData, PaymentDeveloperSubscriptionActionData, PaymentExtendPeriodSubscriptionActionData, PaymentUpdateAmountSubscriptionActionData. Details: " +
        //                    errorMessages.join(", "));
        return;
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>PaymentSubscriptionActionData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentSubscriptionActionData} obj Optional instance to populate.
     * @return {module:model/PaymentSubscriptionActionData} The populated <code>PaymentSubscriptionActionData</code> instance.
     */
    static constructFromObject(data, obj) {
        return new PaymentSubscriptionActionData(data);
    }

    /**
     * Gets the actual instance, which can be <code>PaymentApproveSubscriptionActionData</code>, <code>PaymentBaseSubscriptionActionData</code>, <code>PaymentCreateSubscriptionActionData</code>, <code>PaymentDeveloperSubscriptionActionData</code>, <code>PaymentExtendPeriodSubscriptionActionData</code>, <code>PaymentUpdateAmountSubscriptionActionData</code>.
     * @return {(module:model/PaymentApproveSubscriptionActionData|module:model/PaymentBaseSubscriptionActionData|module:model/PaymentCreateSubscriptionActionData|module:model/PaymentDeveloperSubscriptionActionData|module:model/PaymentExtendPeriodSubscriptionActionData|module:model/PaymentUpdateAmountSubscriptionActionData)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>PaymentApproveSubscriptionActionData</code>, <code>PaymentBaseSubscriptionActionData</code>, <code>PaymentCreateSubscriptionActionData</code>, <code>PaymentDeveloperSubscriptionActionData</code>, <code>PaymentExtendPeriodSubscriptionActionData</code>, <code>PaymentUpdateAmountSubscriptionActionData</code>.
     * @param {(module:model/PaymentApproveSubscriptionActionData|module:model/PaymentBaseSubscriptionActionData|module:model/PaymentCreateSubscriptionActionData|module:model/PaymentDeveloperSubscriptionActionData|module:model/PaymentExtendPeriodSubscriptionActionData|module:model/PaymentUpdateAmountSubscriptionActionData)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = PaymentSubscriptionActionData.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of PaymentSubscriptionActionData from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/PaymentSubscriptionActionData} An instance of PaymentSubscriptionActionData.
     */
    static fromJSON = function(json_string){
        return PaymentSubscriptionActionData.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/PaymentSubscriptionActionType} action_type
 */
PaymentSubscriptionActionData.prototype['action_type'] = undefined;

/**
 * The subscription user address.
 * @member {String} user_address
 */
PaymentSubscriptionActionData.prototype['user_address'] = undefined;

/**
 * The subscription crypto amount. 
 * @member {String} amount
 */
PaymentSubscriptionActionData.prototype['amount'] = undefined;

/**
 * The ID of the cryptocurrency you want to subscription. Supported values:  - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC` - USDT: `ETH_USDT`, `ARBITRUM_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
 * @member {String} token_id
 */
PaymentSubscriptionActionData.prototype['token_id'] = undefined;

/**
 * the discount rate, discount_rate/10000
 * @member {Number} discount_rate
 */
PaymentSubscriptionActionData.prototype['discount_rate'] = undefined;

/**
 * The subscription id in cobo.
 * @member {String} subscription_id
 */
PaymentSubscriptionActionData.prototype['subscription_id'] = undefined;

/**
 * The signature of permit.
 * @member {String} permit_data
 */
PaymentSubscriptionActionData.prototype['permit_data'] = undefined;

/**
 * The signature for transaction.
 * @member {String} signature
 */
PaymentSubscriptionActionData.prototype['signature'] = undefined;

/**
 * The periods needed updated.
 * @member {Number} periods
 */
PaymentSubscriptionActionData.prototype['periods'] = undefined;

/**
 * The new plan id in cobo.
 * @member {String} new_plan_id
 */
PaymentSubscriptionActionData.prototype['new_plan_id'] = undefined;


PaymentSubscriptionActionData.OneOf = ["PaymentApproveSubscriptionActionData", "PaymentBaseSubscriptionActionData", "PaymentCreateSubscriptionActionData", "PaymentDeveloperSubscriptionActionData", "PaymentExtendPeriodSubscriptionActionData", "PaymentUpdateAmountSubscriptionActionData"];

export default PaymentSubscriptionActionData;

