/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateCryptoAddressRequest model module.
 * @module model/CreateCryptoAddressRequest
 */
class CreateCryptoAddressRequest {
    /**
     * Constructs a new <code>CreateCryptoAddressRequest</code>.
     * @alias module:model/CreateCryptoAddressRequest
     * @param token_id {String} The token ID that identifies the cryptocurrency and its corresponding blockchain.  **Supported values**:   - **USDC**: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`   - **USDT**: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param address {String} The actual blockchain address to be used for payouts or transfers. It must be a valid address on the blockchain associated with the specified `token_id`. 
     */
    constructor(token_id, address) { 
        
        CreateCryptoAddressRequest.initialize(this, token_id, address);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, token_id, address) { 
        obj['token_id'] = token_id;
        obj['address'] = address;
    }

    /**
     * Constructs a <code>CreateCryptoAddressRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateCryptoAddressRequest} obj Optional instance to populate.
     * @return {module:model/CreateCryptoAddressRequest} The populated <code>CreateCryptoAddressRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateCryptoAddressRequest();

            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateCryptoAddressRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateCryptoAddressRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateCryptoAddressRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }

        return true;
    }


}

CreateCryptoAddressRequest.RequiredProperties = ["token_id", "address"];

/**
 * The token ID that identifies the cryptocurrency and its corresponding blockchain.  **Supported values**:   - **USDC**: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`   - **USDT**: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
 * @member {String} token_id
 */
CreateCryptoAddressRequest.prototype['token_id'] = undefined;

/**
 * The actual blockchain address to be used for payouts or transfers. It must be a valid address on the blockchain associated with the specified `token_id`. 
 * @member {String} address
 */
CreateCryptoAddressRequest.prototype['address'] = undefined;

/**
 * An optional label or alias to help identify the address's purpose. For example: `'Main Payout Wallet'`, `'Cold Storage'`. This field is for internal reference only. 
 * @member {String} label
 */
CreateCryptoAddressRequest.prototype['label'] = undefined;






export default CreateCryptoAddressRequest;

