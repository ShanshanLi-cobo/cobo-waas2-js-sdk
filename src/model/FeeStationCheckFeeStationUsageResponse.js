/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FeeStationGasStationType from './FeeStationGasStationType';

/**
 * The FeeStationCheckFeeStationUsageResponse model module.
 * @module model/FeeStationCheckFeeStationUsageResponse
 */
class FeeStationCheckFeeStationUsageResponse {
    /**
     * Constructs a new <code>FeeStationCheckFeeStationUsageResponse</code>.
     * The fee station evaluation result for the transfer request.
     * @alias module:model/FeeStationCheckFeeStationUsageResponse
     * @param token_id {String} The token used to pay the gas fee for this specific transaction. You can retrieve the IDs of all supported tokens by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).
     * @param gas_station_type {module:model/FeeStationGasStationType} 
     * @param is_fee_station_applicable {Boolean} Indicates whether the fee station is applied for this transfer request.
     * @param is_balance_sufficient {Boolean} If the fee station is used, indicates whether its balance is sufficient to cover the required gas fee.
     * @param balance {String} The current token balance available in the fee station.
     * @param total_fee_amount {String} The total gas amount required for this transfer request.
     * @param is_sponsor_applicable {Boolean} Indicates whether USDT (U) sponsorship is applied when the fee station balance is insufficient.
     * @param sponsored_fee_amount {String} The amount of gas fee sponsored by USDT (U) when applicable.
     */
    constructor(token_id, gas_station_type, is_fee_station_applicable, is_balance_sufficient, balance, total_fee_amount, is_sponsor_applicable, sponsored_fee_amount) { 
        
        FeeStationCheckFeeStationUsageResponse.initialize(this, token_id, gas_station_type, is_fee_station_applicable, is_balance_sufficient, balance, total_fee_amount, is_sponsor_applicable, sponsored_fee_amount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, token_id, gas_station_type, is_fee_station_applicable, is_balance_sufficient, balance, total_fee_amount, is_sponsor_applicable, sponsored_fee_amount) { 
        obj['token_id'] = token_id;
        obj['gas_station_type'] = gas_station_type;
        obj['is_fee_station_applicable'] = is_fee_station_applicable;
        obj['is_balance_sufficient'] = is_balance_sufficient;
        obj['balance'] = balance;
        obj['total_fee_amount'] = total_fee_amount;
        obj['is_sponsor_applicable'] = is_sponsor_applicable;
        obj['sponsored_fee_amount'] = sponsored_fee_amount;
    }

    /**
     * Constructs a <code>FeeStationCheckFeeStationUsageResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeeStationCheckFeeStationUsageResponse} obj Optional instance to populate.
     * @return {module:model/FeeStationCheckFeeStationUsageResponse} The populated <code>FeeStationCheckFeeStationUsageResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeeStationCheckFeeStationUsageResponse();

            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('gas_station_type')) {
                obj['gas_station_type'] = FeeStationGasStationType.constructFromObject(data['gas_station_type']);
            }
            if (data.hasOwnProperty('is_fee_station_applicable')) {
                obj['is_fee_station_applicable'] = ApiClient.convertToType(data['is_fee_station_applicable'], 'Boolean');
            }
            if (data.hasOwnProperty('is_balance_sufficient')) {
                obj['is_balance_sufficient'] = ApiClient.convertToType(data['is_balance_sufficient'], 'Boolean');
            }
            if (data.hasOwnProperty('balance')) {
                obj['balance'] = ApiClient.convertToType(data['balance'], 'String');
            }
            if (data.hasOwnProperty('total_fee_amount')) {
                obj['total_fee_amount'] = ApiClient.convertToType(data['total_fee_amount'], 'String');
            }
            if (data.hasOwnProperty('is_sponsor_applicable')) {
                obj['is_sponsor_applicable'] = ApiClient.convertToType(data['is_sponsor_applicable'], 'Boolean');
            }
            if (data.hasOwnProperty('sponsored_fee_amount')) {
                obj['sponsored_fee_amount'] = ApiClient.convertToType(data['sponsored_fee_amount'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeeStationCheckFeeStationUsageResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeeStationCheckFeeStationUsageResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FeeStationCheckFeeStationUsageResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is a string
        if (data['balance'] && !(typeof data['balance'] === 'string' || data['balance'] instanceof String)) {
            throw new Error("Expected the field `balance` to be a primitive type in the JSON string but got " + data['balance']);
        }
        // ensure the json data is a string
        if (data['total_fee_amount'] && !(typeof data['total_fee_amount'] === 'string' || data['total_fee_amount'] instanceof String)) {
            throw new Error("Expected the field `total_fee_amount` to be a primitive type in the JSON string but got " + data['total_fee_amount']);
        }
        // ensure the json data is a string
        if (data['sponsored_fee_amount'] && !(typeof data['sponsored_fee_amount'] === 'string' || data['sponsored_fee_amount'] instanceof String)) {
            throw new Error("Expected the field `sponsored_fee_amount` to be a primitive type in the JSON string but got " + data['sponsored_fee_amount']);
        }

        return true;
    }


}

FeeStationCheckFeeStationUsageResponse.RequiredProperties = ["token_id", "gas_station_type", "is_fee_station_applicable", "is_balance_sufficient", "balance", "total_fee_amount", "is_sponsor_applicable", "sponsored_fee_amount"];

/**
 * The token used to pay the gas fee for this specific transaction. You can retrieve the IDs of all supported tokens by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).
 * @member {String} token_id
 */
FeeStationCheckFeeStationUsageResponse.prototype['token_id'] = undefined;

/**
 * @member {module:model/FeeStationGasStationType} gas_station_type
 */
FeeStationCheckFeeStationUsageResponse.prototype['gas_station_type'] = undefined;

/**
 * Indicates whether the fee station is applied for this transfer request.
 * @member {Boolean} is_fee_station_applicable
 */
FeeStationCheckFeeStationUsageResponse.prototype['is_fee_station_applicable'] = undefined;

/**
 * If the fee station is used, indicates whether its balance is sufficient to cover the required gas fee.
 * @member {Boolean} is_balance_sufficient
 */
FeeStationCheckFeeStationUsageResponse.prototype['is_balance_sufficient'] = undefined;

/**
 * The current token balance available in the fee station.
 * @member {String} balance
 */
FeeStationCheckFeeStationUsageResponse.prototype['balance'] = undefined;

/**
 * The total gas amount required for this transfer request.
 * @member {String} total_fee_amount
 */
FeeStationCheckFeeStationUsageResponse.prototype['total_fee_amount'] = undefined;

/**
 * Indicates whether USDT (U) sponsorship is applied when the fee station balance is insufficient.
 * @member {Boolean} is_sponsor_applicable
 */
FeeStationCheckFeeStationUsageResponse.prototype['is_sponsor_applicable'] = undefined;

/**
 * The amount of gas fee sponsored by USDT (U) when applicable.
 * @member {String} sponsored_fee_amount
 */
FeeStationCheckFeeStationUsageResponse.prototype['sponsored_fee_amount'] = undefined;






export default FeeStationCheckFeeStationUsageResponse;

