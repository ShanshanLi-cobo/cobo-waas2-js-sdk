/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SOLBase model module.
 * @module model/SOLBase
 */
class SOLBase {
    /**
     * Constructs a new <code>SOLBase</code>.
     * The transaction base fee based on the SOL fee model.
     * @alias module:model/SOLBase
     */
    constructor() { 
        
        SOLBase.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SOLBase</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SOLBase} obj Optional instance to populate.
     * @return {module:model/SOLBase} The populated <code>SOLBase</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SOLBase();

            if (data.hasOwnProperty('base_fee')) {
                obj['base_fee'] = ApiClient.convertToType(data['base_fee'], 'String');
            }
            if (data.hasOwnProperty('rent_amount')) {
                obj['rent_amount'] = ApiClient.convertToType(data['rent_amount'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SOLBase</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SOLBase</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['base_fee'] && !(typeof data['base_fee'] === 'string' || data['base_fee'] instanceof String)) {
            throw new Error("Expected the field `base_fee` to be a primitive type in the JSON string but got " + data['base_fee']);
        }
        // ensure the json data is a string
        if (data['rent_amount'] && !(typeof data['rent_amount'] === 'string' || data['rent_amount'] instanceof String)) {
            throw new Error("Expected the field `rent_amount` to be a primitive type in the JSON string but got " + data['rent_amount']);
        }

        return true;
    }


}



/**
 * The fundamental fee required for each transaction. It is charged to prevent spam transactions and network congestion, ensuring that only meaningful transactions consume network resources.
 * @member {String} base_fee
 */
SOLBase.prototype['base_fee'] = undefined;

/**
 * The fee charged as rent for maintaining the state of accounts on the blockchain. This rent ensures accounts are stored on-chain over the long term and that there's sufficient balance to sustain the account state.
 * @member {String} rent_amount
 */
SOLBase.prototype['rent_amount'] = undefined;






export default SOLBase;

