/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TokenizationERC20TokenParams from './TokenizationERC20TokenParams';
import TokenizationERC20WrappedTokenParams from './TokenizationERC20WrappedTokenParams';
import TokenizationSOLTokenParams from './TokenizationSOLTokenParams';
import TokenizationSolTokenPermissionParams from './TokenizationSolTokenPermissionParams';
import TokenizationTokenStandard from './TokenizationTokenStandard';

/**
 * The TokenizationIssueTokenParamsTokenParams model module.
 * @module model/TokenizationIssueTokenParamsTokenParams
 */
class TokenizationIssueTokenParamsTokenParams {
    /**
     * Constructs a new <code>TokenizationIssueTokenParamsTokenParams</code>.
     * @alias module:model/TokenizationIssueTokenParamsTokenParams
     * @param {(module:model/TokenizationERC20TokenParams|module:model/TokenizationERC20WrappedTokenParams|module:model/TokenizationSOLTokenParams)} instance The actual instance to initialize TokenizationIssueTokenParamsTokenParams.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        var discriminatorValue = instance["standard"];

        if (discriminatorValue) {
            switch(discriminatorValue) {
                case "ERC20":
                    this.actualInstance = TokenizationERC20TokenParams.constructFromObject(instance);
                    match++;
                    break;
                case "ERC20Wrapper":
                    this.actualInstance = TokenizationERC20WrappedTokenParams.constructFromObject(instance);
                    match++;
                    break;
                case "SPLToken2022":
                    this.actualInstance = TokenizationSOLTokenParams.constructFromObject(instance);
                    match++;
                    break;
                default:
                    errorMessages.push("Unrecognized discriminator value: " + discriminatorValue);
                    break;
            }
            return;
        }

        try {
            if (instance instanceof TokenizationERC20TokenParams) {
                this.actualInstance = instance;
            } else if(!!TokenizationERC20TokenParams.validateJSON && TokenizationERC20TokenParams.validateJSON(instance)){
                // plain JS object
                // create TokenizationERC20TokenParams from JS object
                this.actualInstance = TokenizationERC20TokenParams.constructFromObject(instance);
            } else {
                if(TokenizationERC20TokenParams.constructFromObject(instance)) {
                    if (!!TokenizationERC20TokenParams.constructFromObject(instance).toJSON) {
                        if (TokenizationERC20TokenParams.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TokenizationERC20TokenParams.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TokenizationERC20TokenParams.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TokenizationERC20TokenParams
            errorMessages.push("Failed to construct TokenizationERC20TokenParams: " + err)
        }

        try {
            if (instance instanceof TokenizationERC20WrappedTokenParams) {
                this.actualInstance = instance;
            } else if(!!TokenizationERC20WrappedTokenParams.validateJSON && TokenizationERC20WrappedTokenParams.validateJSON(instance)){
                // plain JS object
                // create TokenizationERC20WrappedTokenParams from JS object
                this.actualInstance = TokenizationERC20WrappedTokenParams.constructFromObject(instance);
            } else {
                if(TokenizationERC20WrappedTokenParams.constructFromObject(instance)) {
                    if (!!TokenizationERC20WrappedTokenParams.constructFromObject(instance).toJSON) {
                        if (TokenizationERC20WrappedTokenParams.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TokenizationERC20WrappedTokenParams.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TokenizationERC20WrappedTokenParams.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TokenizationERC20WrappedTokenParams
            errorMessages.push("Failed to construct TokenizationERC20WrappedTokenParams: " + err)
        }

        try {
            if (instance instanceof TokenizationSOLTokenParams) {
                this.actualInstance = instance;
            } else if(!!TokenizationSOLTokenParams.validateJSON && TokenizationSOLTokenParams.validateJSON(instance)){
                // plain JS object
                // create TokenizationSOLTokenParams from JS object
                this.actualInstance = TokenizationSOLTokenParams.constructFromObject(instance);
            } else {
                if(TokenizationSOLTokenParams.constructFromObject(instance)) {
                    if (!!TokenizationSOLTokenParams.constructFromObject(instance).toJSON) {
                        if (TokenizationSOLTokenParams.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TokenizationSOLTokenParams.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TokenizationSOLTokenParams.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TokenizationSOLTokenParams
            errorMessages.push("Failed to construct TokenizationSOLTokenParams: " + err)
        }

        // if (match > 1) {
        //    throw new Error("Multiple matches found constructing `TokenizationIssueTokenParamsTokenParams` with oneOf schemas TokenizationERC20TokenParams, TokenizationERC20WrappedTokenParams, TokenizationSOLTokenParams. Input: " + JSON.stringify(instance));
        // } else
        if (match === 0) {
        //    this.actualInstance = null; // clear the actual instance in case there are multiple matches
        //    throw new Error("No match found constructing `TokenizationIssueTokenParamsTokenParams` with oneOf schemas TokenizationERC20TokenParams, TokenizationERC20WrappedTokenParams, TokenizationSOLTokenParams. Details: " +
        //                    errorMessages.join(", "));
        return;
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>TokenizationIssueTokenParamsTokenParams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokenizationIssueTokenParamsTokenParams} obj Optional instance to populate.
     * @return {module:model/TokenizationIssueTokenParamsTokenParams} The populated <code>TokenizationIssueTokenParamsTokenParams</code> instance.
     */
    static constructFromObject(data, obj) {
        return new TokenizationIssueTokenParamsTokenParams(data);
    }

    /**
     * Gets the actual instance, which can be <code>TokenizationERC20TokenParams</code>, <code>TokenizationERC20WrappedTokenParams</code>, <code>TokenizationSOLTokenParams</code>.
     * @return {(module:model/TokenizationERC20TokenParams|module:model/TokenizationERC20WrappedTokenParams|module:model/TokenizationSOLTokenParams)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>TokenizationERC20TokenParams</code>, <code>TokenizationERC20WrappedTokenParams</code>, <code>TokenizationSOLTokenParams</code>.
     * @param {(module:model/TokenizationERC20TokenParams|module:model/TokenizationERC20WrappedTokenParams|module:model/TokenizationSOLTokenParams)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = TokenizationIssueTokenParamsTokenParams.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of TokenizationIssueTokenParamsTokenParams from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/TokenizationIssueTokenParamsTokenParams} An instance of TokenizationIssueTokenParamsTokenParams.
     */
    static fromJSON = function(json_string){
        return TokenizationIssueTokenParamsTokenParams.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/TokenizationTokenStandard} standard
 */
TokenizationIssueTokenParamsTokenParams.prototype['standard'] = undefined;

/**
 * The name of the token.
 * @member {String} name
 */
TokenizationIssueTokenParamsTokenParams.prototype['name'] = undefined;

/**
 * The symbol of the token.
 * @member {String} symbol
 */
TokenizationIssueTokenParamsTokenParams.prototype['symbol'] = undefined;

/**
 * The number of decimals for the token (0-18).
 * @member {Number} decimals
 */
TokenizationIssueTokenParamsTokenParams.prototype['decimals'] = undefined;

/**
 * Whether the allowlist feature is activated for the token. When activated, only addresses in the allowlist can perform token operations.
 * @member {Boolean} token_access_activated
 * @default false
 */
TokenizationIssueTokenParamsTokenParams.prototype['token_access_activated'] = false;

/**
 * @member {module:model/TokenizationSolTokenPermissionParams} permissions
 */
TokenizationIssueTokenParamsTokenParams.prototype['permissions'] = undefined;

/**
 * The address of the underlying token that this tokenized asset represents.
 * @member {String} underlying_token
 */
TokenizationIssueTokenParamsTokenParams.prototype['underlying_token'] = undefined;


TokenizationIssueTokenParamsTokenParams.OneOf = ["TokenizationERC20TokenParams", "TokenizationERC20WrappedTokenParams", "TokenizationSOLTokenParams"];

export default TokenizationIssueTokenParamsTokenParams;

