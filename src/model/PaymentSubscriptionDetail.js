/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaymentSubscription from './PaymentSubscription';
import PaymentSubscriptionAction from './PaymentSubscriptionAction';
import PaymentSubscriptionPeriodType from './PaymentSubscriptionPeriodType';
import PaymentSubscriptionStatus from './PaymentSubscriptionStatus';
import Transaction from './Transaction';

/**
 * The PaymentSubscriptionDetail model module.
 * @module model/PaymentSubscriptionDetail
 */
class PaymentSubscriptionDetail {
    /**
     * Constructs a new <code>PaymentSubscriptionDetail</code>.
     * @alias module:model/PaymentSubscriptionDetail
     * @implements module:model/PaymentSubscription
     * @param plan_id {String} The plan id in cobo.
     * @param subscription_id {String} The subscription id in cobo.
     * @param merchant_id {String} The merchant id in cobo.
     * @param merchant_address {String} The merchant address in cobo.
     * @param user_address {String} The user address in subscription.
     * @param token_id {String} The token_id in subscription.
     * @param amount {String} The amount in subscription.
     * @param start_time {Number} The subscription start timestamp.
     * @param expiration_time {Number} The subscription expired timestamp.
     * @param charges_made {Number} The subscription charge times.
     * @param period_type {module:model/PaymentSubscriptionPeriodType} 
     * @param periods {Number} 
     * @param interval {Number} The subscription charge interval.
     * @param status {module:model/PaymentSubscriptionStatus} 
     * @param created_timestamp {Number} The created time of the subscription, represented as a UNIX timestamp in seconds.
     * @param updated_timestamp {Number} The updated time of the subscription, represented as a UNIX timestamp in seconds.
     */
    constructor(plan_id, subscription_id, merchant_id, merchant_address, user_address, token_id, amount, start_time, expiration_time, charges_made, period_type, periods, interval, status, created_timestamp, updated_timestamp) { 
        PaymentSubscription.initialize(this, plan_id, subscription_id, merchant_id, merchant_address, user_address, token_id, amount, start_time, expiration_time, charges_made, period_type, periods, interval, status, created_timestamp, updated_timestamp);
        PaymentSubscriptionDetail.initialize(this, plan_id, subscription_id, merchant_id, merchant_address, user_address, token_id, amount, start_time, expiration_time, charges_made, period_type, periods, interval, status, created_timestamp, updated_timestamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, plan_id, subscription_id, merchant_id, merchant_address, user_address, token_id, amount, start_time, expiration_time, charges_made, period_type, periods, interval, status, created_timestamp, updated_timestamp) { 
        obj['plan_id'] = plan_id;
        obj['subscription_id'] = subscription_id;
        obj['merchant_id'] = merchant_id;
        obj['merchant_address'] = merchant_address;
        obj['user_address'] = user_address;
        obj['token_id'] = token_id;
        obj['amount'] = amount;
        obj['start_time'] = start_time;
        obj['expiration_time'] = expiration_time;
        obj['charges_made'] = charges_made;
        obj['period_type'] = period_type;
        obj['periods'] = periods;
        obj['interval'] = interval;
        obj['status'] = status;
        obj['created_timestamp'] = created_timestamp;
        obj['updated_timestamp'] = updated_timestamp;
    }

    /**
     * Constructs a <code>PaymentSubscriptionDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentSubscriptionDetail} obj Optional instance to populate.
     * @return {module:model/PaymentSubscriptionDetail} The populated <code>PaymentSubscriptionDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentSubscriptionDetail();
            PaymentSubscription.constructFromObject(data, obj);

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], [PaymentSubscriptionAction]);
            }
            if (data.hasOwnProperty('transactions')) {
                obj['transactions'] = ApiClient.convertToType(data['transactions'], [Transaction]);
            }
            if (data.hasOwnProperty('plan_id')) {
                obj['plan_id'] = ApiClient.convertToType(data['plan_id'], 'String');
            }
            if (data.hasOwnProperty('subscription_id')) {
                obj['subscription_id'] = ApiClient.convertToType(data['subscription_id'], 'String');
            }
            if (data.hasOwnProperty('merchant_id')) {
                obj['merchant_id'] = ApiClient.convertToType(data['merchant_id'], 'String');
            }
            if (data.hasOwnProperty('merchant_address')) {
                obj['merchant_address'] = ApiClient.convertToType(data['merchant_address'], 'String');
            }
            if (data.hasOwnProperty('user_address')) {
                obj['user_address'] = ApiClient.convertToType(data['user_address'], 'String');
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('start_time')) {
                obj['start_time'] = ApiClient.convertToType(data['start_time'], 'Number');
            }
            if (data.hasOwnProperty('expiration_time')) {
                obj['expiration_time'] = ApiClient.convertToType(data['expiration_time'], 'Number');
            }
            if (data.hasOwnProperty('charges_made')) {
                obj['charges_made'] = ApiClient.convertToType(data['charges_made'], 'Number');
            }
            if (data.hasOwnProperty('period_type')) {
                obj['period_type'] = PaymentSubscriptionPeriodType.constructFromObject(data['period_type']);
            }
            if (data.hasOwnProperty('periods')) {
                obj['periods'] = ApiClient.convertToType(data['periods'], 'Number');
            }
            if (data.hasOwnProperty('interval')) {
                obj['interval'] = ApiClient.convertToType(data['interval'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = PaymentSubscriptionStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('created_timestamp')) {
                obj['created_timestamp'] = ApiClient.convertToType(data['created_timestamp'], 'Number');
            }
            if (data.hasOwnProperty('updated_timestamp')) {
                obj['updated_timestamp'] = ApiClient.convertToType(data['updated_timestamp'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentSubscriptionDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentSubscriptionDetail</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentSubscriptionDetail.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['actions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['actions'])) {
                throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
            }
            // validate the optional field `actions` (array)
            for (const item of data['actions']) {
                PaymentSubscriptionAction.validateJSON(item);
            };
        }
        if (data['transactions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transactions'])) {
                throw new Error("Expected the field `transactions` to be an array in the JSON data but got " + data['transactions']);
            }
            // validate the optional field `transactions` (array)
            for (const item of data['transactions']) {
                Transaction.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['plan_id'] && !(typeof data['plan_id'] === 'string' || data['plan_id'] instanceof String)) {
            throw new Error("Expected the field `plan_id` to be a primitive type in the JSON string but got " + data['plan_id']);
        }
        // ensure the json data is a string
        if (data['subscription_id'] && !(typeof data['subscription_id'] === 'string' || data['subscription_id'] instanceof String)) {
            throw new Error("Expected the field `subscription_id` to be a primitive type in the JSON string but got " + data['subscription_id']);
        }
        // ensure the json data is a string
        if (data['merchant_id'] && !(typeof data['merchant_id'] === 'string' || data['merchant_id'] instanceof String)) {
            throw new Error("Expected the field `merchant_id` to be a primitive type in the JSON string but got " + data['merchant_id']);
        }
        // ensure the json data is a string
        if (data['merchant_address'] && !(typeof data['merchant_address'] === 'string' || data['merchant_address'] instanceof String)) {
            throw new Error("Expected the field `merchant_address` to be a primitive type in the JSON string but got " + data['merchant_address']);
        }
        // ensure the json data is a string
        if (data['user_address'] && !(typeof data['user_address'] === 'string' || data['user_address'] instanceof String)) {
            throw new Error("Expected the field `user_address` to be a primitive type in the JSON string but got " + data['user_address']);
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }

        return true;
    }


}

PaymentSubscriptionDetail.RequiredProperties = ["plan_id", "subscription_id", "merchant_id", "merchant_address", "user_address", "token_id", "amount", "start_time", "expiration_time", "charges_made", "period_type", "periods", "interval", "status", "created_timestamp", "updated_timestamp"];

/**
 * An array of subscription actions.
 * @member {Array.<module:model/PaymentSubscriptionAction>} actions
 */
PaymentSubscriptionDetail.prototype['actions'] = undefined;

/**
 * An array of subscription transactions.
 * @member {Array.<module:model/Transaction>} transactions
 */
PaymentSubscriptionDetail.prototype['transactions'] = undefined;

/**
 * The plan id in cobo.
 * @member {String} plan_id
 */
PaymentSubscriptionDetail.prototype['plan_id'] = undefined;

/**
 * The subscription id in cobo.
 * @member {String} subscription_id
 */
PaymentSubscriptionDetail.prototype['subscription_id'] = undefined;

/**
 * The merchant id in cobo.
 * @member {String} merchant_id
 */
PaymentSubscriptionDetail.prototype['merchant_id'] = undefined;

/**
 * The merchant address in cobo.
 * @member {String} merchant_address
 */
PaymentSubscriptionDetail.prototype['merchant_address'] = undefined;

/**
 * The user address in subscription.
 * @member {String} user_address
 */
PaymentSubscriptionDetail.prototype['user_address'] = undefined;

/**
 * The token_id in subscription.
 * @member {String} token_id
 */
PaymentSubscriptionDetail.prototype['token_id'] = undefined;

/**
 * The amount in subscription.
 * @member {String} amount
 */
PaymentSubscriptionDetail.prototype['amount'] = undefined;

/**
 * The subscription start timestamp.
 * @member {Number} start_time
 */
PaymentSubscriptionDetail.prototype['start_time'] = undefined;

/**
 * The subscription expired timestamp.
 * @member {Number} expiration_time
 */
PaymentSubscriptionDetail.prototype['expiration_time'] = undefined;

/**
 * The subscription charge times.
 * @member {Number} charges_made
 */
PaymentSubscriptionDetail.prototype['charges_made'] = undefined;

/**
 * @member {module:model/PaymentSubscriptionPeriodType} period_type
 */
PaymentSubscriptionDetail.prototype['period_type'] = undefined;

/**
 * @member {Number} periods
 */
PaymentSubscriptionDetail.prototype['periods'] = undefined;

/**
 * The subscription charge interval.
 * @member {Number} interval
 */
PaymentSubscriptionDetail.prototype['interval'] = undefined;

/**
 * @member {module:model/PaymentSubscriptionStatus} status
 */
PaymentSubscriptionDetail.prototype['status'] = undefined;

/**
 * The created time of the subscription, represented as a UNIX timestamp in seconds.
 * @member {Number} created_timestamp
 */
PaymentSubscriptionDetail.prototype['created_timestamp'] = undefined;

/**
 * The updated time of the subscription, represented as a UNIX timestamp in seconds.
 * @member {Number} updated_timestamp
 */
PaymentSubscriptionDetail.prototype['updated_timestamp'] = undefined;


// Implement PaymentSubscription interface:
/**
 * The plan id in cobo.
 * @member {String} plan_id
 */
PaymentSubscription.prototype['plan_id'] = undefined;
/**
 * The subscription id in cobo.
 * @member {String} subscription_id
 */
PaymentSubscription.prototype['subscription_id'] = undefined;
/**
 * The merchant id in cobo.
 * @member {String} merchant_id
 */
PaymentSubscription.prototype['merchant_id'] = undefined;
/**
 * The merchant address in cobo.
 * @member {String} merchant_address
 */
PaymentSubscription.prototype['merchant_address'] = undefined;
/**
 * The user address in subscription.
 * @member {String} user_address
 */
PaymentSubscription.prototype['user_address'] = undefined;
/**
 * The token_id in subscription.
 * @member {String} token_id
 */
PaymentSubscription.prototype['token_id'] = undefined;
/**
 * The amount in subscription.
 * @member {String} amount
 */
PaymentSubscription.prototype['amount'] = undefined;
/**
 * The subscription start timestamp.
 * @member {Number} start_time
 */
PaymentSubscription.prototype['start_time'] = undefined;
/**
 * The subscription expired timestamp.
 * @member {Number} expiration_time
 */
PaymentSubscription.prototype['expiration_time'] = undefined;
/**
 * The subscription charge times.
 * @member {Number} charges_made
 */
PaymentSubscription.prototype['charges_made'] = undefined;
/**
 * @member {module:model/PaymentSubscriptionPeriodType} period_type
 */
PaymentSubscription.prototype['period_type'] = undefined;
/**
 * @member {Number} periods
 */
PaymentSubscription.prototype['periods'] = undefined;
/**
 * The subscription charge interval.
 * @member {Number} interval
 */
PaymentSubscription.prototype['interval'] = undefined;
/**
 * @member {module:model/PaymentSubscriptionStatus} status
 */
PaymentSubscription.prototype['status'] = undefined;
/**
 * The created time of the subscription, represented as a UNIX timestamp in seconds.
 * @member {Number} created_timestamp
 */
PaymentSubscription.prototype['created_timestamp'] = undefined;
/**
 * The updated time of the subscription, represented as a UNIX timestamp in seconds.
 * @member {Number} updated_timestamp
 */
PaymentSubscription.prototype['updated_timestamp'] = undefined;




export default PaymentSubscriptionDetail;

