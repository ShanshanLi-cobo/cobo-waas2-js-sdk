/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DispositionEventData from './DispositionEventData';
import DispositionStatus from './DispositionStatus';
import DispositionType from './DispositionType';
import WebhookEventDataType from './WebhookEventDataType';

/**
 * The ComplianceDispositionUpdateEventData model module.
 * @module model/ComplianceDispositionUpdateEventData
 */
class ComplianceDispositionUpdateEventData {
    /**
     * Constructs a new <code>ComplianceDispositionUpdateEventData</code>.
     * @alias module:model/ComplianceDispositionUpdateEventData
     * @implements module:model/WebhookEventDataType
     * @implements module:model/DispositionEventData
     * @param data_type {module:model/ComplianceDispositionUpdateEventData.DataTypeEnum}  The data type of the event. - `Transaction`: The transaction event data. - `TSSRequest`: The TSS request event data. - `Addresses`: The addresses event data. - `WalletInfo`: The wallet information event data. - `MPCVault`: The MPC vault event data. - `Chains`: The enabled chain event data. - `Tokens`: The enabled token event data. - `TokenListing`: The token listing event data.        - `PaymentOrder`: The payment order event data. - `PaymentRefund`: The payment refund event data. - `PaymentSettlement`: The payment settlement event data. - `PaymentTransaction`: The payment transaction event data. - `PaymentAddressUpdate`: The top-up address update event data. - `BalanceUpdateInfo`: The balance update event data. - `SuspendedToken`: The token suspension event data. - `ComplianceDisposition`: The compliance disposition event data. - `ComplianceKytScreenings`: The compliance KYT screenings event data.
     * @param transaction_id {String} The transaction ID.
     * @param disposition_type {module:model/DispositionType} 
     * @param disposition_status {module:model/DispositionStatus} 
     * @param updated_timestamp {Number} The time when the disposition was updated, in Unix timestamp format, measured in milliseconds.
     */
    constructor(data_type, transaction_id, disposition_type, disposition_status, updated_timestamp) { 
        WebhookEventDataType.initialize(this, data_type);DispositionEventData.initialize(this, transaction_id, disposition_type, disposition_status, updated_timestamp);
        ComplianceDispositionUpdateEventData.initialize(this, data_type, transaction_id, disposition_type, disposition_status, updated_timestamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data_type, transaction_id, disposition_type, disposition_status, updated_timestamp) { 
        obj['data_type'] = data_type;
        obj['transaction_id'] = transaction_id;
        obj['disposition_type'] = disposition_type;
        obj['disposition_status'] = disposition_status;
        obj['updated_timestamp'] = updated_timestamp;
    }

    /**
     * Constructs a <code>ComplianceDispositionUpdateEventData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ComplianceDispositionUpdateEventData} obj Optional instance to populate.
     * @return {module:model/ComplianceDispositionUpdateEventData} The populated <code>ComplianceDispositionUpdateEventData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ComplianceDispositionUpdateEventData();
            WebhookEventDataType.constructFromObject(data, obj);
            DispositionEventData.constructFromObject(data, obj);

            if (data.hasOwnProperty('data_type')) {
                obj['data_type'] = ApiClient.convertToType(data['data_type'], 'String');
            }
            if (data.hasOwnProperty('transaction_id')) {
                obj['transaction_id'] = ApiClient.convertToType(data['transaction_id'], 'String');
            }
            if (data.hasOwnProperty('disposition_type')) {
                obj['disposition_type'] = DispositionType.constructFromObject(data['disposition_type']);
            }
            if (data.hasOwnProperty('disposition_status')) {
                obj['disposition_status'] = DispositionStatus.constructFromObject(data['disposition_status']);
            }
            if (data.hasOwnProperty('destination_address')) {
                obj['destination_address'] = ApiClient.convertToType(data['destination_address'], 'String');
            }
            if (data.hasOwnProperty('disposition_amount')) {
                obj['disposition_amount'] = ApiClient.convertToType(data['disposition_amount'], 'String');
            }
            if (data.hasOwnProperty('updated_timestamp')) {
                obj['updated_timestamp'] = ApiClient.convertToType(data['updated_timestamp'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ComplianceDispositionUpdateEventData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ComplianceDispositionUpdateEventData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ComplianceDispositionUpdateEventData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['data_type'] && !(typeof data['data_type'] === 'string' || data['data_type'] instanceof String)) {
            throw new Error("Expected the field `data_type` to be a primitive type in the JSON string but got " + data['data_type']);
        }
        // ensure the json data is a string
        if (data['transaction_id'] && !(typeof data['transaction_id'] === 'string' || data['transaction_id'] instanceof String)) {
            throw new Error("Expected the field `transaction_id` to be a primitive type in the JSON string but got " + data['transaction_id']);
        }
        // ensure the json data is a string
        if (data['destination_address'] && !(typeof data['destination_address'] === 'string' || data['destination_address'] instanceof String)) {
            throw new Error("Expected the field `destination_address` to be a primitive type in the JSON string but got " + data['destination_address']);
        }
        // ensure the json data is a string
        if (data['disposition_amount'] && !(typeof data['disposition_amount'] === 'string' || data['disposition_amount'] instanceof String)) {
            throw new Error("Expected the field `disposition_amount` to be a primitive type in the JSON string but got " + data['disposition_amount']);
        }

        return true;
    }


}

ComplianceDispositionUpdateEventData.RequiredProperties = ["data_type", "transaction_id", "disposition_type", "disposition_status", "updated_timestamp"];

/**
 *  The data type of the event. - `Transaction`: The transaction event data. - `TSSRequest`: The TSS request event data. - `Addresses`: The addresses event data. - `WalletInfo`: The wallet information event data. - `MPCVault`: The MPC vault event data. - `Chains`: The enabled chain event data. - `Tokens`: The enabled token event data. - `TokenListing`: The token listing event data.        - `PaymentOrder`: The payment order event data. - `PaymentRefund`: The payment refund event data. - `PaymentSettlement`: The payment settlement event data. - `PaymentTransaction`: The payment transaction event data. - `PaymentAddressUpdate`: The top-up address update event data. - `BalanceUpdateInfo`: The balance update event data. - `SuspendedToken`: The token suspension event data. - `ComplianceDisposition`: The compliance disposition event data. - `ComplianceKytScreenings`: The compliance KYT screenings event data.
 * @member {module:model/ComplianceDispositionUpdateEventData.DataTypeEnum} data_type
 */
ComplianceDispositionUpdateEventData.prototype['data_type'] = undefined;

/**
 * The transaction ID.
 * @member {String} transaction_id
 */
ComplianceDispositionUpdateEventData.prototype['transaction_id'] = undefined;

/**
 * @member {module:model/DispositionType} disposition_type
 */
ComplianceDispositionUpdateEventData.prototype['disposition_type'] = undefined;

/**
 * @member {module:model/DispositionStatus} disposition_status
 */
ComplianceDispositionUpdateEventData.prototype['disposition_status'] = undefined;

/**
 * The blockchain address to receive the refunded/isolated funds.
 * @member {String} destination_address
 */
ComplianceDispositionUpdateEventData.prototype['destination_address'] = undefined;

/**
 * The amount to be refunded/isolated from the original transaction, specified as a numeric string. This value cannot exceed the total amount of the original transaction. 
 * @member {String} disposition_amount
 */
ComplianceDispositionUpdateEventData.prototype['disposition_amount'] = undefined;

/**
 * The time when the disposition was updated, in Unix timestamp format, measured in milliseconds.
 * @member {Number} updated_timestamp
 */
ComplianceDispositionUpdateEventData.prototype['updated_timestamp'] = undefined;


// Implement WebhookEventDataType interface:
/**
 *  The data type of the event. - `Transaction`: The transaction event data. - `TSSRequest`: The TSS request event data. - `Addresses`: The addresses event data. - `WalletInfo`: The wallet information event data. - `MPCVault`: The MPC vault event data. - `Chains`: The enabled chain event data. - `Tokens`: The enabled token event data. - `TokenListing`: The token listing event data.        - `PaymentOrder`: The payment order event data. - `PaymentRefund`: The payment refund event data. - `PaymentSettlement`: The payment settlement event data. - `PaymentTransaction`: The payment transaction event data. - `PaymentAddressUpdate`: The top-up address update event data. - `BalanceUpdateInfo`: The balance update event data. - `SuspendedToken`: The token suspension event data. - `ComplianceDisposition`: The compliance disposition event data. - `ComplianceKytScreenings`: The compliance KYT screenings event data.
 * @member {module:model/WebhookEventDataType.DataTypeEnum} data_type
 */
WebhookEventDataType.prototype['data_type'] = undefined;
// Implement DispositionEventData interface:
/**
 * The transaction ID.
 * @member {String} transaction_id
 */
DispositionEventData.prototype['transaction_id'] = undefined;
/**
 * @member {module:model/DispositionType} disposition_type
 */
DispositionEventData.prototype['disposition_type'] = undefined;
/**
 * @member {module:model/DispositionStatus} disposition_status
 */
DispositionEventData.prototype['disposition_status'] = undefined;
/**
 * The blockchain address to receive the refunded/isolated funds.
 * @member {String} destination_address
 */
DispositionEventData.prototype['destination_address'] = undefined;
/**
 * The amount to be refunded/isolated from the original transaction, specified as a numeric string. This value cannot exceed the total amount of the original transaction. 
 * @member {String} disposition_amount
 */
DispositionEventData.prototype['disposition_amount'] = undefined;
/**
 * The time when the disposition was updated, in Unix timestamp format, measured in milliseconds.
 * @member {Number} updated_timestamp
 */
DispositionEventData.prototype['updated_timestamp'] = undefined;



/**
 * Allowed values for the <code>data_type</code> property.
 * @enum {String}
 * @readonly
 */
ComplianceDispositionUpdateEventData['DataTypeEnum'] = {

    /**
     * value: "Transaction"
     * @const
     */
    "Transaction": "Transaction",

    /**
     * value: "TSSRequest"
     * @const
     */
    "TSSRequest": "TSSRequest",

    /**
     * value: "Addresses"
     * @const
     */
    "Addresses": "Addresses",

    /**
     * value: "WalletInfo"
     * @const
     */
    "WalletInfo": "WalletInfo",

    /**
     * value: "MPCVault"
     * @const
     */
    "MPCVault": "MPCVault",

    /**
     * value: "Chains"
     * @const
     */
    "Chains": "Chains",

    /**
     * value: "Tokens"
     * @const
     */
    "Tokens": "Tokens",

    /**
     * value: "TokenListing"
     * @const
     */
    "TokenListing": "TokenListing",

    /**
     * value: "PaymentOrder"
     * @const
     */
    "PaymentOrder": "PaymentOrder",

    /**
     * value: "PaymentRefund"
     * @const
     */
    "PaymentRefund": "PaymentRefund",

    /**
     * value: "PaymentSettlement"
     * @const
     */
    "PaymentSettlement": "PaymentSettlement",

    /**
     * value: "PaymentTransaction"
     * @const
     */
    "PaymentTransaction": "PaymentTransaction",

    /**
     * value: "PaymentAddressUpdate"
     * @const
     */
    "PaymentAddressUpdate": "PaymentAddressUpdate",

    /**
     * value: "BalanceUpdateInfo"
     * @const
     */
    "BalanceUpdateInfo": "BalanceUpdateInfo",

    /**
     * value: "SuspendedToken"
     * @const
     */
    "SuspendedToken": "SuspendedToken",

    /**
     * value: "ComplianceDisposition"
     * @const
     */
    "ComplianceDisposition": "ComplianceDisposition",

    /**
     * value: "ComplianceKytScreenings"
     * @const
     */
    "ComplianceKytScreenings": "ComplianceKytScreenings",

    /**
     * value: "unknown_default_open_api"
     * @const
     */
    "unknown_default_open_api": "unknown_default_open_api"
};



export default ComplianceDispositionUpdateEventData;

