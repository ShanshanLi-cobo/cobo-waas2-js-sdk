/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TokenizationAddressPermission from './TokenizationAddressPermission';
import TokenizationStatus from './TokenizationStatus';
import TokenizationTokenInfo from './TokenizationTokenInfo';
import TokenizationTokenStandard from './TokenizationTokenStandard';

/**
 * The TokenizationTokenDetailInfo model module.
 * @module model/TokenizationTokenDetailInfo
 */
class TokenizationTokenDetailInfo {
    /**
     * Constructs a new <code>TokenizationTokenDetailInfo</code>.
     * @alias module:model/TokenizationTokenDetailInfo
     * @implements module:model/TokenizationTokenInfo
     * @param token_id {String} The unique token identifier.
     * @param chain_id {String} The chain ID of the tokenization contract.
     * @param token_symbol {String} The unique token symbol.
     * @param token_standard {module:model/TokenizationTokenStandard} 
     * @param decimals {Number} The number of decimals of the token.
     * @param status {module:model/TokenizationStatus} 
     */
    constructor(token_id, chain_id, token_symbol, token_standard, decimals, status) { 
        TokenizationTokenInfo.initialize(this, token_id, chain_id, token_symbol, token_standard, decimals, status);
        TokenizationTokenDetailInfo.initialize(this, token_id, chain_id, token_symbol, token_standard, decimals, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, token_id, chain_id, token_symbol, token_standard, decimals, status) { 
        obj['token_id'] = token_id;
        obj['chain_id'] = chain_id;
        obj['token_symbol'] = token_symbol;
        obj['token_standard'] = token_standard;
        obj['decimals'] = decimals;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>TokenizationTokenDetailInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokenizationTokenDetailInfo} obj Optional instance to populate.
     * @return {module:model/TokenizationTokenDetailInfo} The populated <code>TokenizationTokenDetailInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TokenizationTokenDetailInfo();
            TokenizationTokenInfo.constructFromObject(data, obj);

            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('chain_id')) {
                obj['chain_id'] = ApiClient.convertToType(data['chain_id'], 'String');
            }
            if (data.hasOwnProperty('token_address')) {
                obj['token_address'] = ApiClient.convertToType(data['token_address'], 'String');
            }
            if (data.hasOwnProperty('token_name')) {
                obj['token_name'] = ApiClient.convertToType(data['token_name'], 'String');
            }
            if (data.hasOwnProperty('token_symbol')) {
                obj['token_symbol'] = ApiClient.convertToType(data['token_symbol'], 'String');
            }
            if (data.hasOwnProperty('token_standard')) {
                obj['token_standard'] = TokenizationTokenStandard.constructFromObject(data['token_standard']);
            }
            if (data.hasOwnProperty('decimals')) {
                obj['decimals'] = ApiClient.convertToType(data['decimals'], 'Number');
            }
            if (data.hasOwnProperty('token_access_activated')) {
                obj['token_access_activated'] = ApiClient.convertToType(data['token_access_activated'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = TokenizationStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('total_supply')) {
                obj['total_supply'] = ApiClient.convertToType(data['total_supply'], 'String');
            }
            if (data.hasOwnProperty('holdings')) {
                obj['holdings'] = ApiClient.convertToType(data['holdings'], 'String');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], [TokenizationAddressPermission]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TokenizationTokenDetailInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TokenizationTokenDetailInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TokenizationTokenDetailInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is a string
        if (data['chain_id'] && !(typeof data['chain_id'] === 'string' || data['chain_id'] instanceof String)) {
            throw new Error("Expected the field `chain_id` to be a primitive type in the JSON string but got " + data['chain_id']);
        }
        // ensure the json data is a string
        if (data['token_address'] && !(typeof data['token_address'] === 'string' || data['token_address'] instanceof String)) {
            throw new Error("Expected the field `token_address` to be a primitive type in the JSON string but got " + data['token_address']);
        }
        // ensure the json data is a string
        if (data['token_name'] && !(typeof data['token_name'] === 'string' || data['token_name'] instanceof String)) {
            throw new Error("Expected the field `token_name` to be a primitive type in the JSON string but got " + data['token_name']);
        }
        // ensure the json data is a string
        if (data['token_symbol'] && !(typeof data['token_symbol'] === 'string' || data['token_symbol'] instanceof String)) {
            throw new Error("Expected the field `token_symbol` to be a primitive type in the JSON string but got " + data['token_symbol']);
        }
        // ensure the json data is a string
        if (data['total_supply'] && !(typeof data['total_supply'] === 'string' || data['total_supply'] instanceof String)) {
            throw new Error("Expected the field `total_supply` to be a primitive type in the JSON string but got " + data['total_supply']);
        }
        // ensure the json data is a string
        if (data['holdings'] && !(typeof data['holdings'] === 'string' || data['holdings'] instanceof String)) {
            throw new Error("Expected the field `holdings` to be a primitive type in the JSON string but got " + data['holdings']);
        }
        if (data['permissions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['permissions'])) {
                throw new Error("Expected the field `permissions` to be an array in the JSON data but got " + data['permissions']);
            }
            // validate the optional field `permissions` (array)
            for (const item of data['permissions']) {
                TokenizationAddressPermission.validateJSON(item);
            };
        }

        return true;
    }


}

TokenizationTokenDetailInfo.RequiredProperties = ["token_id", "chain_id", "token_symbol", "token_standard", "decimals", "status"];

/**
 * The unique token identifier.
 * @member {String} token_id
 */
TokenizationTokenDetailInfo.prototype['token_id'] = undefined;

/**
 * The chain ID of the tokenization contract.
 * @member {String} chain_id
 */
TokenizationTokenDetailInfo.prototype['chain_id'] = undefined;

/**
 * The address of the token contract.
 * @member {String} token_address
 */
TokenizationTokenDetailInfo.prototype['token_address'] = undefined;

/**
 * The name of the token.
 * @member {String} token_name
 */
TokenizationTokenDetailInfo.prototype['token_name'] = undefined;

/**
 * The unique token symbol.
 * @member {String} token_symbol
 */
TokenizationTokenDetailInfo.prototype['token_symbol'] = undefined;

/**
 * @member {module:model/TokenizationTokenStandard} token_standard
 */
TokenizationTokenDetailInfo.prototype['token_standard'] = undefined;

/**
 * The number of decimals of the token.
 * @member {Number} decimals
 */
TokenizationTokenDetailInfo.prototype['decimals'] = undefined;

/**
 * Whether the allowlist feature is activated for the token.
 * @member {Boolean} token_access_activated
 */
TokenizationTokenDetailInfo.prototype['token_access_activated'] = undefined;

/**
 * @member {module:model/TokenizationStatus} status
 */
TokenizationTokenDetailInfo.prototype['status'] = undefined;

/**
 * The total supply of the token.
 * @member {String} total_supply
 */
TokenizationTokenDetailInfo.prototype['total_supply'] = undefined;

/**
 * The amount of tokens held by the organization.
 * @member {String} holdings
 */
TokenizationTokenDetailInfo.prototype['holdings'] = undefined;

/**
 * List of execution addresses and their permissions.
 * @member {Array.<module:model/TokenizationAddressPermission>} permissions
 */
TokenizationTokenDetailInfo.prototype['permissions'] = undefined;


// Implement TokenizationTokenInfo interface:
/**
 * The unique token identifier.
 * @member {String} token_id
 */
TokenizationTokenInfo.prototype['token_id'] = undefined;
/**
 * The chain ID of the tokenization contract.
 * @member {String} chain_id
 */
TokenizationTokenInfo.prototype['chain_id'] = undefined;
/**
 * The address of the token contract.
 * @member {String} token_address
 */
TokenizationTokenInfo.prototype['token_address'] = undefined;
/**
 * The name of the token.
 * @member {String} token_name
 */
TokenizationTokenInfo.prototype['token_name'] = undefined;
/**
 * The unique token symbol.
 * @member {String} token_symbol
 */
TokenizationTokenInfo.prototype['token_symbol'] = undefined;
/**
 * @member {module:model/TokenizationTokenStandard} token_standard
 */
TokenizationTokenInfo.prototype['token_standard'] = undefined;
/**
 * The number of decimals of the token.
 * @member {Number} decimals
 */
TokenizationTokenInfo.prototype['decimals'] = undefined;
/**
 * Whether the allowlist feature is activated for the token.
 * @member {Boolean} token_access_activated
 */
TokenizationTokenInfo.prototype['token_access_activated'] = undefined;
/**
 * @member {module:model/TokenizationStatus} status
 */
TokenizationTokenInfo.prototype['status'] = undefined;
/**
 * The total supply of the token.
 * @member {String} total_supply
 */
TokenizationTokenInfo.prototype['total_supply'] = undefined;
/**
 * The amount of tokens held by the organization.
 * @member {String} holdings
 */
TokenizationTokenInfo.prototype['holdings'] = undefined;




export default TokenizationTokenDetailInfo;

