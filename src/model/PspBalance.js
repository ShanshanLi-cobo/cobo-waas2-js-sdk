/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PspBalance model module.
 * @module model/PspBalance
 */
class PspBalance {
    /**
     * Constructs a new <code>PspBalance</code>.
     * @alias module:model/PspBalance
     * @param token_id {String} The ID of the cryptocurrency.
     */
    constructor(token_id) { 
        
        PspBalance.initialize(this, token_id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, token_id) { 
        obj['token_id'] = token_id;
    }

    /**
     * Constructs a <code>PspBalance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PspBalance} obj Optional instance to populate.
     * @return {module:model/PspBalance} The populated <code>PspBalance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PspBalance();

            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('developer_fee_amount')) {
                obj['developer_fee_amount'] = ApiClient.convertToType(data['developer_fee_amount'], 'String');
            }
            if (data.hasOwnProperty('settled_amount')) {
                obj['settled_amount'] = ApiClient.convertToType(data['settled_amount'], 'String');
            }
            if (data.hasOwnProperty('refunded_amount')) {
                obj['refunded_amount'] = ApiClient.convertToType(data['refunded_amount'], 'String');
            }
            if (data.hasOwnProperty('total_balance')) {
                obj['total_balance'] = ApiClient.convertToType(data['total_balance'], 'String');
            }
            if (data.hasOwnProperty('available_balance')) {
                obj['available_balance'] = ApiClient.convertToType(data['available_balance'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PspBalance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PspBalance</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PspBalance.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is a string
        if (data['developer_fee_amount'] && !(typeof data['developer_fee_amount'] === 'string' || data['developer_fee_amount'] instanceof String)) {
            throw new Error("Expected the field `developer_fee_amount` to be a primitive type in the JSON string but got " + data['developer_fee_amount']);
        }
        // ensure the json data is a string
        if (data['settled_amount'] && !(typeof data['settled_amount'] === 'string' || data['settled_amount'] instanceof String)) {
            throw new Error("Expected the field `settled_amount` to be a primitive type in the JSON string but got " + data['settled_amount']);
        }
        // ensure the json data is a string
        if (data['refunded_amount'] && !(typeof data['refunded_amount'] === 'string' || data['refunded_amount'] instanceof String)) {
            throw new Error("Expected the field `refunded_amount` to be a primitive type in the JSON string but got " + data['refunded_amount']);
        }
        // ensure the json data is a string
        if (data['total_balance'] && !(typeof data['total_balance'] === 'string' || data['total_balance'] instanceof String)) {
            throw new Error("Expected the field `total_balance` to be a primitive type in the JSON string but got " + data['total_balance']);
        }
        // ensure the json data is a string
        if (data['available_balance'] && !(typeof data['available_balance'] === 'string' || data['available_balance'] instanceof String)) {
            throw new Error("Expected the field `available_balance` to be a primitive type in the JSON string but got " + data['available_balance']);
        }

        return true;
    }


}

PspBalance.RequiredProperties = ["token_id"];

/**
 * The ID of the cryptocurrency.
 * @member {String} token_id
 */
PspBalance.prototype['token_id'] = undefined;

/**
 * The psp developer fee amount.
 * @member {String} developer_fee_amount
 */
PspBalance.prototype['developer_fee_amount'] = undefined;

/**
 * The psp settled amount.
 * @member {String} settled_amount
 */
PspBalance.prototype['settled_amount'] = undefined;

/**
 * The psp total refunded amount.
 * @member {String} refunded_amount
 */
PspBalance.prototype['refunded_amount'] = undefined;

/**
 * The psp total balance.
 * @member {String} total_balance
 */
PspBalance.prototype['total_balance'] = undefined;

/**
 * The psp available balance.
 * @member {String} available_balance
 */
PspBalance.prototype['available_balance'] = undefined;






export default PspBalance;

