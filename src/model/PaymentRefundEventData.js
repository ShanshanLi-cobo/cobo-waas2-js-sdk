/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommissionFee from './CommissionFee';
import PaymentTransaction from './PaymentTransaction';
import Refund from './Refund';
import RefundStatus from './RefundStatus';
import RefundType from './RefundType';
import WebhookEventDataType from './WebhookEventDataType';

/**
 * The PaymentRefundEventData model module.
 * @module model/PaymentRefundEventData
 */
class PaymentRefundEventData {
    /**
     * Constructs a new <code>PaymentRefundEventData</code>.
     * @alias module:model/PaymentRefundEventData
     * @implements module:model/WebhookEventDataType
     * @implements module:model/Refund
     * @param data_type {module:model/PaymentRefundEventData.DataTypeEnum}  The data type of the event. - `Transaction`: The transaction event data. - `TSSRequest`: The TSS request event data. - `Addresses`: The addresses event data. - `WalletInfo`: The wallet information event data. - `MPCVault`: The MPC vault event data. - `Chains`: The enabled chain event data. - `Tokens`: The enabled token event data. - `TokenListing`: The token listing event data.        - `PaymentOrder`: The payment order event data. - `PaymentRefund`: The payment refund event data. - `PaymentSettlement`: The payment settlement event data. - `PaymentTransaction`: The payment transaction event data. - `PaymentAddressUpdate`: The top-up address update event data. - `BalanceUpdateInfo`: The balance update event data. - `SuspendedToken`: The token suspension event data. - `ComplianceDisposition`: The compliance disposition event data. - `ComplianceKytScreenings`: The compliance KYT screenings event data.
     * @param refund_id {String} The refund order ID.
     * @param token_id {String} The ID of the cryptocurrency used for refund.
     * @param chain_id {String} The ID of the blockchain network on which the refund transaction occurs.
     * @param amount {String} The amount in cryptocurrency to be returned for this refund order.
     * @param to_address {String} The recipient's wallet address where the refund will be sent.
     * @param status {module:model/RefundStatus} 
     */
    constructor(data_type, refund_id, token_id, chain_id, amount, to_address, status) { 
        WebhookEventDataType.initialize(this, data_type);Refund.initialize(this, refund_id, token_id, chain_id, amount, to_address, status);
        PaymentRefundEventData.initialize(this, data_type, refund_id, token_id, chain_id, amount, to_address, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data_type, refund_id, token_id, chain_id, amount, to_address, status) { 
        obj['data_type'] = data_type;
        obj['refund_id'] = refund_id;
        obj['token_id'] = token_id;
        obj['chain_id'] = chain_id;
        obj['amount'] = amount;
        obj['to_address'] = to_address;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>PaymentRefundEventData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentRefundEventData} obj Optional instance to populate.
     * @return {module:model/PaymentRefundEventData} The populated <code>PaymentRefundEventData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentRefundEventData();
            WebhookEventDataType.constructFromObject(data, obj);
            Refund.constructFromObject(data, obj);

            if (data.hasOwnProperty('data_type')) {
                obj['data_type'] = ApiClient.convertToType(data['data_type'], 'String');
            }
            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('refund_id')) {
                obj['refund_id'] = ApiClient.convertToType(data['refund_id'], 'String');
            }
            if (data.hasOwnProperty('order_id')) {
                obj['order_id'] = ApiClient.convertToType(data['order_id'], 'String');
            }
            if (data.hasOwnProperty('merchant_id')) {
                obj['merchant_id'] = ApiClient.convertToType(data['merchant_id'], 'String');
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('chain_id')) {
                obj['chain_id'] = ApiClient.convertToType(data['chain_id'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('to_address')) {
                obj['to_address'] = ApiClient.convertToType(data['to_address'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = RefundStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('refund_type')) {
                obj['refund_type'] = RefundType.constructFromObject(data['refund_type']);
            }
            if (data.hasOwnProperty('created_timestamp')) {
                obj['created_timestamp'] = ApiClient.convertToType(data['created_timestamp'], 'Number');
            }
            if (data.hasOwnProperty('updated_timestamp')) {
                obj['updated_timestamp'] = ApiClient.convertToType(data['updated_timestamp'], 'Number');
            }
            if (data.hasOwnProperty('initiator')) {
                obj['initiator'] = ApiClient.convertToType(data['initiator'], 'String');
            }
            if (data.hasOwnProperty('transactions')) {
                obj['transactions'] = ApiClient.convertToType(data['transactions'], [PaymentTransaction]);
            }
            if (data.hasOwnProperty('charge_merchant_fee')) {
                obj['charge_merchant_fee'] = ApiClient.convertToType(data['charge_merchant_fee'], 'Boolean');
            }
            if (data.hasOwnProperty('merchant_fee_amount')) {
                obj['merchant_fee_amount'] = ApiClient.convertToType(data['merchant_fee_amount'], 'String');
            }
            if (data.hasOwnProperty('merchant_fee_token_id')) {
                obj['merchant_fee_token_id'] = ApiClient.convertToType(data['merchant_fee_token_id'], 'String');
            }
            if (data.hasOwnProperty('commission_fee')) {
                obj['commission_fee'] = CommissionFee.constructFromObject(data['commission_fee']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentRefundEventData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentRefundEventData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentRefundEventData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['data_type'] && !(typeof data['data_type'] === 'string' || data['data_type'] instanceof String)) {
            throw new Error("Expected the field `data_type` to be a primitive type in the JSON string but got " + data['data_type']);
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        // ensure the json data is a string
        if (data['refund_id'] && !(typeof data['refund_id'] === 'string' || data['refund_id'] instanceof String)) {
            throw new Error("Expected the field `refund_id` to be a primitive type in the JSON string but got " + data['refund_id']);
        }
        // ensure the json data is a string
        if (data['order_id'] && !(typeof data['order_id'] === 'string' || data['order_id'] instanceof String)) {
            throw new Error("Expected the field `order_id` to be a primitive type in the JSON string but got " + data['order_id']);
        }
        // ensure the json data is a string
        if (data['merchant_id'] && !(typeof data['merchant_id'] === 'string' || data['merchant_id'] instanceof String)) {
            throw new Error("Expected the field `merchant_id` to be a primitive type in the JSON string but got " + data['merchant_id']);
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is a string
        if (data['chain_id'] && !(typeof data['chain_id'] === 'string' || data['chain_id'] instanceof String)) {
            throw new Error("Expected the field `chain_id` to be a primitive type in the JSON string but got " + data['chain_id']);
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // ensure the json data is a string
        if (data['to_address'] && !(typeof data['to_address'] === 'string' || data['to_address'] instanceof String)) {
            throw new Error("Expected the field `to_address` to be a primitive type in the JSON string but got " + data['to_address']);
        }
        // ensure the json data is a string
        if (data['initiator'] && !(typeof data['initiator'] === 'string' || data['initiator'] instanceof String)) {
            throw new Error("Expected the field `initiator` to be a primitive type in the JSON string but got " + data['initiator']);
        }
        if (data['transactions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transactions'])) {
                throw new Error("Expected the field `transactions` to be an array in the JSON data but got " + data['transactions']);
            }
            // validate the optional field `transactions` (array)
            for (const item of data['transactions']) {
                PaymentTransaction.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['merchant_fee_amount'] && !(typeof data['merchant_fee_amount'] === 'string' || data['merchant_fee_amount'] instanceof String)) {
            throw new Error("Expected the field `merchant_fee_amount` to be a primitive type in the JSON string but got " + data['merchant_fee_amount']);
        }
        // ensure the json data is a string
        if (data['merchant_fee_token_id'] && !(typeof data['merchant_fee_token_id'] === 'string' || data['merchant_fee_token_id'] instanceof String)) {
            throw new Error("Expected the field `merchant_fee_token_id` to be a primitive type in the JSON string but got " + data['merchant_fee_token_id']);
        }
        // validate the optional field `commission_fee`
        if (data['commission_fee']) { // data not null
          if (!!CommissionFee.validateJSON) {
            CommissionFee.validateJSON(data['commission_fee']);
          }
        }

        return true;
    }


}

PaymentRefundEventData.RequiredProperties = ["data_type", "refund_id", "token_id", "chain_id", "amount", "to_address", "status"];

/**
 *  The data type of the event. - `Transaction`: The transaction event data. - `TSSRequest`: The TSS request event data. - `Addresses`: The addresses event data. - `WalletInfo`: The wallet information event data. - `MPCVault`: The MPC vault event data. - `Chains`: The enabled chain event data. - `Tokens`: The enabled token event data. - `TokenListing`: The token listing event data.        - `PaymentOrder`: The payment order event data. - `PaymentRefund`: The payment refund event data. - `PaymentSettlement`: The payment settlement event data. - `PaymentTransaction`: The payment transaction event data. - `PaymentAddressUpdate`: The top-up address update event data. - `BalanceUpdateInfo`: The balance update event data. - `SuspendedToken`: The token suspension event data. - `ComplianceDisposition`: The compliance disposition event data. - `ComplianceKytScreenings`: The compliance KYT screenings event data.
 * @member {module:model/PaymentRefundEventData.DataTypeEnum} data_type
 */
PaymentRefundEventData.prototype['data_type'] = undefined;

/**
 * The request ID provided by you when creating the refund request.
 * @member {String} request_id
 */
PaymentRefundEventData.prototype['request_id'] = undefined;

/**
 * The refund order ID.
 * @member {String} refund_id
 */
PaymentRefundEventData.prototype['refund_id'] = undefined;

/**
 * The ID of the pay-in order corresponding to this refund.
 * @member {String} order_id
 */
PaymentRefundEventData.prototype['order_id'] = undefined;

/**
 * The merchant ID.
 * @member {String} merchant_id
 */
PaymentRefundEventData.prototype['merchant_id'] = undefined;

/**
 * The ID of the cryptocurrency used for refund.
 * @member {String} token_id
 */
PaymentRefundEventData.prototype['token_id'] = undefined;

/**
 * The ID of the blockchain network on which the refund transaction occurs.
 * @member {String} chain_id
 */
PaymentRefundEventData.prototype['chain_id'] = undefined;

/**
 * The amount in cryptocurrency to be returned for this refund order.
 * @member {String} amount
 */
PaymentRefundEventData.prototype['amount'] = undefined;

/**
 * The recipient's wallet address where the refund will be sent.
 * @member {String} to_address
 */
PaymentRefundEventData.prototype['to_address'] = undefined;

/**
 * @member {module:model/RefundStatus} status
 */
PaymentRefundEventData.prototype['status'] = undefined;

/**
 * @member {module:model/RefundType} refund_type
 */
PaymentRefundEventData.prototype['refund_type'] = undefined;

/**
 * The creation time of the refund order, represented as a UNIX timestamp in seconds.
 * @member {Number} created_timestamp
 */
PaymentRefundEventData.prototype['created_timestamp'] = undefined;

/**
 * The last update time of the refund order, represented as a UNIX timestamp in seconds.
 * @member {Number} updated_timestamp
 */
PaymentRefundEventData.prototype['updated_timestamp'] = undefined;

/**
 *  The initiator of this settlement request. Can return either an API key or the Payments App's ID.  - Format `api_key_<API_KEY>`: Indicates the settlement request was initiated via the Payments API using the API key. - Format `app_<APP_ID>`: Indicates the settlement request was initiated through the Payments App using the App ID. 
 * @member {String} initiator
 */
PaymentRefundEventData.prototype['initiator'] = undefined;

/**
 * An array of transactions associated with this refund order. Each transaction represents a separate blockchain operation related to the refund process.
 * @member {Array.<module:model/PaymentTransaction>} transactions
 */
PaymentRefundEventData.prototype['transactions'] = undefined;

/**
 * Whether to charge developer fee to the merchant for the refund.    - `true`: The fee amount (specified in `merchant_fee_amount`) will be deducted from the merchant's balance and added to the developer's balance    - `false`: The merchant is not charged any developer fee. 
 * @member {Boolean} charge_merchant_fee
 */
PaymentRefundEventData.prototype['charge_merchant_fee'] = undefined;

/**
 * The developer fee amount to charge the merchant, denominated in the cryptocurrency specified by `merchant_fee_token_id`. This is only applicable if `charge_merchant_fee` is set to `true`.
 * @member {String} merchant_fee_amount
 */
PaymentRefundEventData.prototype['merchant_fee_amount'] = undefined;

/**
 * The ID of the cryptocurrency used for the developer fee. This is only applicable if `charge_merchant_fee` is set to true.
 * @member {String} merchant_fee_token_id
 */
PaymentRefundEventData.prototype['merchant_fee_token_id'] = undefined;

/**
 * @member {module:model/CommissionFee} commission_fee
 */
PaymentRefundEventData.prototype['commission_fee'] = undefined;


// Implement WebhookEventDataType interface:
/**
 *  The data type of the event. - `Transaction`: The transaction event data. - `TSSRequest`: The TSS request event data. - `Addresses`: The addresses event data. - `WalletInfo`: The wallet information event data. - `MPCVault`: The MPC vault event data. - `Chains`: The enabled chain event data. - `Tokens`: The enabled token event data. - `TokenListing`: The token listing event data.        - `PaymentOrder`: The payment order event data. - `PaymentRefund`: The payment refund event data. - `PaymentSettlement`: The payment settlement event data. - `PaymentTransaction`: The payment transaction event data. - `PaymentAddressUpdate`: The top-up address update event data. - `BalanceUpdateInfo`: The balance update event data. - `SuspendedToken`: The token suspension event data. - `ComplianceDisposition`: The compliance disposition event data. - `ComplianceKytScreenings`: The compliance KYT screenings event data.
 * @member {module:model/WebhookEventDataType.DataTypeEnum} data_type
 */
WebhookEventDataType.prototype['data_type'] = undefined;
// Implement Refund interface:
/**
 * The request ID provided by you when creating the refund request.
 * @member {String} request_id
 */
Refund.prototype['request_id'] = undefined;
/**
 * The refund order ID.
 * @member {String} refund_id
 */
Refund.prototype['refund_id'] = undefined;
/**
 * The ID of the pay-in order corresponding to this refund.
 * @member {String} order_id
 */
Refund.prototype['order_id'] = undefined;
/**
 * The merchant ID.
 * @member {String} merchant_id
 */
Refund.prototype['merchant_id'] = undefined;
/**
 * The ID of the cryptocurrency used for refund.
 * @member {String} token_id
 */
Refund.prototype['token_id'] = undefined;
/**
 * The ID of the blockchain network on which the refund transaction occurs.
 * @member {String} chain_id
 */
Refund.prototype['chain_id'] = undefined;
/**
 * The amount in cryptocurrency to be returned for this refund order.
 * @member {String} amount
 */
Refund.prototype['amount'] = undefined;
/**
 * The recipient's wallet address where the refund will be sent.
 * @member {String} to_address
 */
Refund.prototype['to_address'] = undefined;
/**
 * @member {module:model/RefundStatus} status
 */
Refund.prototype['status'] = undefined;
/**
 * @member {module:model/RefundType} refund_type
 */
Refund.prototype['refund_type'] = undefined;
/**
 * The creation time of the refund order, represented as a UNIX timestamp in seconds.
 * @member {Number} created_timestamp
 */
Refund.prototype['created_timestamp'] = undefined;
/**
 * The last update time of the refund order, represented as a UNIX timestamp in seconds.
 * @member {Number} updated_timestamp
 */
Refund.prototype['updated_timestamp'] = undefined;
/**
 *  The initiator of this settlement request. Can return either an API key or the Payments App's ID.  - Format `api_key_<API_KEY>`: Indicates the settlement request was initiated via the Payments API using the API key. - Format `app_<APP_ID>`: Indicates the settlement request was initiated through the Payments App using the App ID. 
 * @member {String} initiator
 */
Refund.prototype['initiator'] = undefined;
/**
 * An array of transactions associated with this refund order. Each transaction represents a separate blockchain operation related to the refund process.
 * @member {Array.<module:model/PaymentTransaction>} transactions
 */
Refund.prototype['transactions'] = undefined;
/**
 * Whether to charge developer fee to the merchant for the refund.    - `true`: The fee amount (specified in `merchant_fee_amount`) will be deducted from the merchant's balance and added to the developer's balance    - `false`: The merchant is not charged any developer fee. 
 * @member {Boolean} charge_merchant_fee
 */
Refund.prototype['charge_merchant_fee'] = undefined;
/**
 * The developer fee amount to charge the merchant, denominated in the cryptocurrency specified by `merchant_fee_token_id`. This is only applicable if `charge_merchant_fee` is set to `true`.
 * @member {String} merchant_fee_amount
 */
Refund.prototype['merchant_fee_amount'] = undefined;
/**
 * The ID of the cryptocurrency used for the developer fee. This is only applicable if `charge_merchant_fee` is set to true.
 * @member {String} merchant_fee_token_id
 */
Refund.prototype['merchant_fee_token_id'] = undefined;
/**
 * @member {module:model/CommissionFee} commission_fee
 */
Refund.prototype['commission_fee'] = undefined;



/**
 * Allowed values for the <code>data_type</code> property.
 * @enum {String}
 * @readonly
 */
PaymentRefundEventData['DataTypeEnum'] = {

    /**
     * value: "Transaction"
     * @const
     */
    "Transaction": "Transaction",

    /**
     * value: "TSSRequest"
     * @const
     */
    "TSSRequest": "TSSRequest",

    /**
     * value: "Addresses"
     * @const
     */
    "Addresses": "Addresses",

    /**
     * value: "WalletInfo"
     * @const
     */
    "WalletInfo": "WalletInfo",

    /**
     * value: "MPCVault"
     * @const
     */
    "MPCVault": "MPCVault",

    /**
     * value: "Chains"
     * @const
     */
    "Chains": "Chains",

    /**
     * value: "Tokens"
     * @const
     */
    "Tokens": "Tokens",

    /**
     * value: "TokenListing"
     * @const
     */
    "TokenListing": "TokenListing",

    /**
     * value: "PaymentOrder"
     * @const
     */
    "PaymentOrder": "PaymentOrder",

    /**
     * value: "PaymentRefund"
     * @const
     */
    "PaymentRefund": "PaymentRefund",

    /**
     * value: "PaymentSettlement"
     * @const
     */
    "PaymentSettlement": "PaymentSettlement",

    /**
     * value: "PaymentTransaction"
     * @const
     */
    "PaymentTransaction": "PaymentTransaction",

    /**
     * value: "PaymentAddressUpdate"
     * @const
     */
    "PaymentAddressUpdate": "PaymentAddressUpdate",

    /**
     * value: "BalanceUpdateInfo"
     * @const
     */
    "BalanceUpdateInfo": "BalanceUpdateInfo",

    /**
     * value: "SuspendedToken"
     * @const
     */
    "SuspendedToken": "SuspendedToken",

    /**
     * value: "ComplianceDisposition"
     * @const
     */
    "ComplianceDisposition": "ComplianceDisposition",

    /**
     * value: "ComplianceKytScreenings"
     * @const
     */
    "ComplianceKytScreenings": "ComplianceKytScreenings",

    /**
     * value: "unknown_default_open_api"
     * @const
     */
    "unknown_default_open_api": "unknown_default_open_api"
};



export default PaymentRefundEventData;

