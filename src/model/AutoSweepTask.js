/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AutoSweepTaskStatus from './AutoSweepTaskStatus';

/**
 * The AutoSweepTask model module.
 * @module model/AutoSweepTask
 */
class AutoSweepTask {
    /**
     * Constructs a new <code>AutoSweepTask</code>.
     * The auto sweep task information.
     * @alias module:model/AutoSweepTask
     * @param task_id {String} The auto sweep task ID.
     * @param wallet_id {String} The wallet ID.
     * @param token_id {String} The token ID of the swept token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).
     * @param status {module:model/AutoSweepTaskStatus} 
     * @param created_timestamp {Number} The time when the task was created, in Unix timestamp format, measured in milliseconds.
     */
    constructor(task_id, wallet_id, token_id, status, created_timestamp) { 
        
        AutoSweepTask.initialize(this, task_id, wallet_id, token_id, status, created_timestamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, task_id, wallet_id, token_id, status, created_timestamp) { 
        obj['task_id'] = task_id;
        obj['wallet_id'] = wallet_id;
        obj['token_id'] = token_id;
        obj['status'] = status;
        obj['created_timestamp'] = created_timestamp;
    }

    /**
     * Constructs a <code>AutoSweepTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AutoSweepTask} obj Optional instance to populate.
     * @return {module:model/AutoSweepTask} The populated <code>AutoSweepTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AutoSweepTask();

            if (data.hasOwnProperty('task_id')) {
                obj['task_id'] = ApiClient.convertToType(data['task_id'], 'String');
            }
            if (data.hasOwnProperty('wallet_id')) {
                obj['wallet_id'] = ApiClient.convertToType(data['wallet_id'], 'String');
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = AutoSweepTaskStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('transaction_ids')) {
                obj['transaction_ids'] = ApiClient.convertToType(data['transaction_ids'], ['String']);
            }
            if (data.hasOwnProperty('failed_reasons')) {
                obj['failed_reasons'] = ApiClient.convertToType(data['failed_reasons'], ['String']);
            }
            if (data.hasOwnProperty('created_timestamp')) {
                obj['created_timestamp'] = ApiClient.convertToType(data['created_timestamp'], 'Number');
            }
            if (data.hasOwnProperty('updated_timestamp')) {
                obj['updated_timestamp'] = ApiClient.convertToType(data['updated_timestamp'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AutoSweepTask</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AutoSweepTask</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AutoSweepTask.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['task_id'] && !(typeof data['task_id'] === 'string' || data['task_id'] instanceof String)) {
            throw new Error("Expected the field `task_id` to be a primitive type in the JSON string but got " + data['task_id']);
        }
        // ensure the json data is a string
        if (data['wallet_id'] && !(typeof data['wallet_id'] === 'string' || data['wallet_id'] instanceof String)) {
            throw new Error("Expected the field `wallet_id` to be a primitive type in the JSON string but got " + data['wallet_id']);
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['transaction_ids'])) {
            throw new Error("Expected the field `transaction_ids` to be an array in the JSON data but got " + data['transaction_ids']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['failed_reasons'])) {
            throw new Error("Expected the field `failed_reasons` to be an array in the JSON data but got " + data['failed_reasons']);
        }

        return true;
    }


}

AutoSweepTask.RequiredProperties = ["task_id", "wallet_id", "token_id", "status", "created_timestamp"];

/**
 * The auto sweep task ID.
 * @member {String} task_id
 */
AutoSweepTask.prototype['task_id'] = undefined;

/**
 * The wallet ID.
 * @member {String} wallet_id
 */
AutoSweepTask.prototype['wallet_id'] = undefined;

/**
 * The token ID of the swept token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).
 * @member {String} token_id
 */
AutoSweepTask.prototype['token_id'] = undefined;

/**
 * @member {module:model/AutoSweepTaskStatus} status
 */
AutoSweepTask.prototype['status'] = undefined;

/**
 * The IDs of the corresponding transactions of the auto sweep task.
 * @member {Array.<String>} transaction_ids
 */
AutoSweepTask.prototype['transaction_ids'] = undefined;

/**
 * Failed reason of create auto sweep transaction.
 * @member {Array.<String>} failed_reasons
 */
AutoSweepTask.prototype['failed_reasons'] = undefined;

/**
 * The time when the task was created, in Unix timestamp format, measured in milliseconds.
 * @member {Number} created_timestamp
 */
AutoSweepTask.prototype['created_timestamp'] = undefined;

/**
 * The time when the task was updated, in Unix timestamp format, measured in milliseconds.
 * @member {Number} updated_timestamp
 */
AutoSweepTask.prototype['updated_timestamp'] = undefined;






export default AutoSweepTask;

