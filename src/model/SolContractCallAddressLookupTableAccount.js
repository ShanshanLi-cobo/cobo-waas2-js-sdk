/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SolContractCallAddressLookupTableAccount model module.
 * @module model/SolContractCallAddressLookupTableAccount
 */
class SolContractCallAddressLookupTableAccount {
    /**
     * Constructs a new <code>SolContractCallAddressLookupTableAccount</code>.
     * The information about the Solana address lookup table account.
     * @alias module:model/SolContractCallAddressLookupTableAccount
     * @param alt_account_key {String} The on-chain public key of the address lookup table account (ALT), identifying the specific lookup table.
     * @param addresses {Array.<String>} An array of stored account addresses within the lookup table, which can be referenced in the transaction by index.
     */
    constructor(alt_account_key, addresses) { 
        
        SolContractCallAddressLookupTableAccount.initialize(this, alt_account_key, addresses);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, alt_account_key, addresses) { 
        obj['alt_account_key'] = alt_account_key;
        obj['addresses'] = addresses;
    }

    /**
     * Constructs a <code>SolContractCallAddressLookupTableAccount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SolContractCallAddressLookupTableAccount} obj Optional instance to populate.
     * @return {module:model/SolContractCallAddressLookupTableAccount} The populated <code>SolContractCallAddressLookupTableAccount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SolContractCallAddressLookupTableAccount();

            if (data.hasOwnProperty('alt_account_key')) {
                obj['alt_account_key'] = ApiClient.convertToType(data['alt_account_key'], 'String');
            }
            if (data.hasOwnProperty('addresses')) {
                obj['addresses'] = ApiClient.convertToType(data['addresses'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SolContractCallAddressLookupTableAccount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SolContractCallAddressLookupTableAccount</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SolContractCallAddressLookupTableAccount.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['alt_account_key'] && !(typeof data['alt_account_key'] === 'string' || data['alt_account_key'] instanceof String)) {
            throw new Error("Expected the field `alt_account_key` to be a primitive type in the JSON string but got " + data['alt_account_key']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['addresses'])) {
            throw new Error("Expected the field `addresses` to be an array in the JSON data but got " + data['addresses']);
        }

        return true;
    }


}

SolContractCallAddressLookupTableAccount.RequiredProperties = ["alt_account_key", "addresses"];

/**
 * The on-chain public key of the address lookup table account (ALT), identifying the specific lookup table.
 * @member {String} alt_account_key
 */
SolContractCallAddressLookupTableAccount.prototype['alt_account_key'] = undefined;

/**
 * An array of stored account addresses within the lookup table, which can be referenced in the transaction by index.
 * @member {Array.<String>} addresses
 */
SolContractCallAddressLookupTableAccount.prototype['addresses'] = undefined;






export default SolContractCallAddressLookupTableAccount;

