/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreatePaymentOrderRequest model module.
 * @module model/CreatePaymentOrderRequest
 */
class CreatePaymentOrderRequest {
    /**
     * Constructs a new <code>CreatePaymentOrderRequest</code>.
     * @alias module:model/CreatePaymentOrderRequest
     * @param merchant_id {String} The merchant ID.
     * @param token_id {String} The ID of the cryptocurrency used for payment. Supported values:    - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param order_amount {String} The base amount of the order in fiat currency, excluding the developer fee (specified in `fee_amount`). Values must be greater than `0` and contain two decimal places.
     * @param fee_amount {String} The developer fee for the order in fiat currency. It is added to the base amount (`order_amount`) to determine the final charge. For example, if order_amount is \"100.00\" and fee_amount is \"2.00\", the customer will be charged \"102.00\" in total, with \"100.00\" being settled to the merchant and \"2.00\" settled to the developer. Values must be greater than 0 and contain two decimal places.
     * @param psp_order_code {String} A unique reference code assigned by the developer to identify this order in their system.
     */
    constructor(merchant_id, token_id, order_amount, fee_amount, psp_order_code) { 
        
        CreatePaymentOrderRequest.initialize(this, merchant_id, token_id, order_amount, fee_amount, psp_order_code);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, merchant_id, token_id, order_amount, fee_amount, psp_order_code) { 
        obj['merchant_id'] = merchant_id;
        obj['token_id'] = token_id;
        obj['order_amount'] = order_amount;
        obj['fee_amount'] = fee_amount;
        obj['psp_order_code'] = psp_order_code;
    }

    /**
     * Constructs a <code>CreatePaymentOrderRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreatePaymentOrderRequest} obj Optional instance to populate.
     * @return {module:model/CreatePaymentOrderRequest} The populated <code>CreatePaymentOrderRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreatePaymentOrderRequest();

            if (data.hasOwnProperty('merchant_id')) {
                obj['merchant_id'] = ApiClient.convertToType(data['merchant_id'], 'String');
            }
            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('order_amount')) {
                obj['order_amount'] = ApiClient.convertToType(data['order_amount'], 'String');
            }
            if (data.hasOwnProperty('fee_amount')) {
                obj['fee_amount'] = ApiClient.convertToType(data['fee_amount'], 'String');
            }
            if (data.hasOwnProperty('merchant_order_code')) {
                obj['merchant_order_code'] = ApiClient.convertToType(data['merchant_order_code'], 'String');
            }
            if (data.hasOwnProperty('psp_order_code')) {
                obj['psp_order_code'] = ApiClient.convertToType(data['psp_order_code'], 'String');
            }
            if (data.hasOwnProperty('expired_in')) {
                obj['expired_in'] = ApiClient.convertToType(data['expired_in'], 'Number');
            }
            if (data.hasOwnProperty('use_dedicated_address')) {
                obj['use_dedicated_address'] = ApiClient.convertToType(data['use_dedicated_address'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreatePaymentOrderRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreatePaymentOrderRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreatePaymentOrderRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['merchant_id'] && !(typeof data['merchant_id'] === 'string' || data['merchant_id'] instanceof String)) {
            throw new Error("Expected the field `merchant_id` to be a primitive type in the JSON string but got " + data['merchant_id']);
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['order_amount'] && !(typeof data['order_amount'] === 'string' || data['order_amount'] instanceof String)) {
            throw new Error("Expected the field `order_amount` to be a primitive type in the JSON string but got " + data['order_amount']);
        }
        // ensure the json data is a string
        if (data['fee_amount'] && !(typeof data['fee_amount'] === 'string' || data['fee_amount'] instanceof String)) {
            throw new Error("Expected the field `fee_amount` to be a primitive type in the JSON string but got " + data['fee_amount']);
        }
        // ensure the json data is a string
        if (data['merchant_order_code'] && !(typeof data['merchant_order_code'] === 'string' || data['merchant_order_code'] instanceof String)) {
            throw new Error("Expected the field `merchant_order_code` to be a primitive type in the JSON string but got " + data['merchant_order_code']);
        }
        // ensure the json data is a string
        if (data['psp_order_code'] && !(typeof data['psp_order_code'] === 'string' || data['psp_order_code'] instanceof String)) {
            throw new Error("Expected the field `psp_order_code` to be a primitive type in the JSON string but got " + data['psp_order_code']);
        }

        return true;
    }


}

CreatePaymentOrderRequest.RequiredProperties = ["merchant_id", "token_id", "order_amount", "fee_amount", "psp_order_code"];

/**
 * The merchant ID.
 * @member {String} merchant_id
 */
CreatePaymentOrderRequest.prototype['merchant_id'] = undefined;

/**
 * The ID of the cryptocurrency used for payment. Supported values:    - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
 * @member {String} token_id
 */
CreatePaymentOrderRequest.prototype['token_id'] = undefined;

/**
 * The fiat currency of the order.
 * @member {String} currency
 * @default ''
 */
CreatePaymentOrderRequest.prototype['currency'] = '';

/**
 * The base amount of the order in fiat currency, excluding the developer fee (specified in `fee_amount`). Values must be greater than `0` and contain two decimal places.
 * @member {String} order_amount
 */
CreatePaymentOrderRequest.prototype['order_amount'] = undefined;

/**
 * The developer fee for the order in fiat currency. It is added to the base amount (`order_amount`) to determine the final charge. For example, if order_amount is \"100.00\" and fee_amount is \"2.00\", the customer will be charged \"102.00\" in total, with \"100.00\" being settled to the merchant and \"2.00\" settled to the developer. Values must be greater than 0 and contain two decimal places.
 * @member {String} fee_amount
 */
CreatePaymentOrderRequest.prototype['fee_amount'] = undefined;

/**
 * A unique reference code assigned by the merchant to identify this order in their system.
 * @member {String} merchant_order_code
 */
CreatePaymentOrderRequest.prototype['merchant_order_code'] = undefined;

/**
 * A unique reference code assigned by the developer to identify this order in their system.
 * @member {String} psp_order_code
 */
CreatePaymentOrderRequest.prototype['psp_order_code'] = undefined;

/**
 * The pay-in order will expire after approximately a certain number of seconds: - The order status becomes final and cannot be changed - The `received_token_amount` field will no longer be updated - Funds received after expiration will be categorized as late payments and can only be settled from the developer balance. - A late payment will trigger a `transactionLate` webhook event. 
 * @member {Number} expired_in
 */
CreatePaymentOrderRequest.prototype['expired_in'] = undefined;

/**
 * Indicates whether to allocate a dedicated address for this order.  If false, a shared address from the address pool will be used. 
 * @member {Boolean} use_dedicated_address
 */
CreatePaymentOrderRequest.prototype['use_dedicated_address'] = undefined;






export default CreatePaymentOrderRequest;

