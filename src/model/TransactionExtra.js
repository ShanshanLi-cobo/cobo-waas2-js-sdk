/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActivityType from './ActivityType';
import AddressInfo from './AddressInfo';
import TransactionBabylonBusinessInfo from './TransactionBabylonBusinessInfo';
import TransactionBabylonTxParameters from './TransactionBabylonTxParameters';
import TransactionCoreStakeInfo from './TransactionCoreStakeInfo';
import TransactionExtraType from './TransactionExtraType';

/**
 * The TransactionExtra model module.
 * @module model/TransactionExtra
 */
class TransactionExtra {
    /**
     * Constructs a new <code>TransactionExtra</code>.
     * @alias module:model/TransactionExtra
     * @param {(module:model/TransactionBabylonBusinessInfo|module:model/TransactionBabylonTxParameters|module:model/TransactionCoreStakeInfo)} instance The actual instance to initialize TransactionExtra.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        var discriminatorValue = instance["extra_type"];

        if (discriminatorValue) {
            switch(discriminatorValue) {
                case "BabylonBusinessInfo":
                    this.actualInstance = TransactionBabylonBusinessInfo.constructFromObject(instance);
                    match++;
                    break;
                case "BabylonTxParameters":
                    this.actualInstance = TransactionBabylonTxParameters.constructFromObject(instance);
                    match++;
                    break;
                case "CoreStakeInfo":
                    this.actualInstance = TransactionCoreStakeInfo.constructFromObject(instance);
                    match++;
                    break;
                default:
                    errorMessages.push("Unrecognized discriminator value: " + discriminatorValue);
                    break;
            }
            return;
        }

        try {
            if (instance instanceof TransactionBabylonBusinessInfo) {
                this.actualInstance = instance;
            } else if(!!TransactionBabylonBusinessInfo.validateJSON && TransactionBabylonBusinessInfo.validateJSON(instance)){
                // plain JS object
                // create TransactionBabylonBusinessInfo from JS object
                this.actualInstance = TransactionBabylonBusinessInfo.constructFromObject(instance);
            } else {
                if(TransactionBabylonBusinessInfo.constructFromObject(instance)) {
                    if (!!TransactionBabylonBusinessInfo.constructFromObject(instance).toJSON) {
                        if (TransactionBabylonBusinessInfo.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionBabylonBusinessInfo.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionBabylonBusinessInfo.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionBabylonBusinessInfo
            errorMessages.push("Failed to construct TransactionBabylonBusinessInfo: " + err)
        }

        try {
            if (instance instanceof TransactionBabylonTxParameters) {
                this.actualInstance = instance;
            } else if(!!TransactionBabylonTxParameters.validateJSON && TransactionBabylonTxParameters.validateJSON(instance)){
                // plain JS object
                // create TransactionBabylonTxParameters from JS object
                this.actualInstance = TransactionBabylonTxParameters.constructFromObject(instance);
            } else {
                if(TransactionBabylonTxParameters.constructFromObject(instance)) {
                    if (!!TransactionBabylonTxParameters.constructFromObject(instance).toJSON) {
                        if (TransactionBabylonTxParameters.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionBabylonTxParameters.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionBabylonTxParameters.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionBabylonTxParameters
            errorMessages.push("Failed to construct TransactionBabylonTxParameters: " + err)
        }

        try {
            if (instance instanceof TransactionCoreStakeInfo) {
                this.actualInstance = instance;
            } else if(!!TransactionCoreStakeInfo.validateJSON && TransactionCoreStakeInfo.validateJSON(instance)){
                // plain JS object
                // create TransactionCoreStakeInfo from JS object
                this.actualInstance = TransactionCoreStakeInfo.constructFromObject(instance);
            } else {
                if(TransactionCoreStakeInfo.constructFromObject(instance)) {
                    if (!!TransactionCoreStakeInfo.constructFromObject(instance).toJSON) {
                        if (TransactionCoreStakeInfo.constructFromObject(instance).toJSON()) {
                            this.actualInstance = TransactionCoreStakeInfo.constructFromObject(instance);
                        }
                    } else {
                        this.actualInstance = TransactionCoreStakeInfo.constructFromObject(instance);
                    }
                }

            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TransactionCoreStakeInfo
            errorMessages.push("Failed to construct TransactionCoreStakeInfo: " + err)
        }

        // if (match > 1) {
        //    throw new Error("Multiple matches found constructing `TransactionExtra` with oneOf schemas TransactionBabylonBusinessInfo, TransactionBabylonTxParameters, TransactionCoreStakeInfo. Input: " + JSON.stringify(instance));
        // } else
        if (match === 0) {
        //    this.actualInstance = null; // clear the actual instance in case there are multiple matches
        //    throw new Error("No match found constructing `TransactionExtra` with oneOf schemas TransactionBabylonBusinessInfo, TransactionBabylonTxParameters, TransactionCoreStakeInfo. Details: " +
        //                    errorMessages.join(", "));
        return;
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>TransactionExtra</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionExtra} obj Optional instance to populate.
     * @return {module:model/TransactionExtra} The populated <code>TransactionExtra</code> instance.
     */
    static constructFromObject(data, obj) {
        return new TransactionExtra(data);
    }

    /**
     * Gets the actual instance, which can be <code>TransactionBabylonBusinessInfo</code>, <code>TransactionBabylonTxParameters</code>, <code>TransactionCoreStakeInfo</code>.
     * @return {(module:model/TransactionBabylonBusinessInfo|module:model/TransactionBabylonTxParameters|module:model/TransactionCoreStakeInfo)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>TransactionBabylonBusinessInfo</code>, <code>TransactionBabylonTxParameters</code>, <code>TransactionCoreStakeInfo</code>.
     * @param {(module:model/TransactionBabylonBusinessInfo|module:model/TransactionBabylonTxParameters|module:model/TransactionCoreStakeInfo)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = TransactionExtra.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of TransactionExtra from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/TransactionExtra} An instance of TransactionExtra.
     */
    static fromJSON = function(json_string){
        return TransactionExtra.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/TransactionExtraType} extra_type
 */
TransactionExtra.prototype['extra_type'] = undefined;

/**
 * @member {module:model/AddressInfo} babylon_address_info
 */
TransactionExtra.prototype['babylon_address_info'] = undefined;

/**
 * @member {module:model/AddressInfo} btc_address_info
 */
TransactionExtra.prototype['btc_address_info'] = undefined;

/**
 * The origin staking amount.
 * @member {String} stake_amount
 */
TransactionExtra.prototype['stake_amount'] = undefined;

/**
 * The public key of the finality provider.
 * @member {String} finality_provider_public_key
 */
TransactionExtra.prototype['finality_provider_public_key'] = undefined;

/**
 * The number of blocks that need to be processed before the locked tokens are unlocked and become accessible.
 * @member {Number} stake_block_time
 */
TransactionExtra.prototype['stake_block_time'] = undefined;

/**
 * The version of babylon global parameters.
 * @member {Number} param_version
 */
TransactionExtra.prototype['param_version'] = undefined;

/**
 * @member {module:model/ActivityType} withdraw_from_type
 */
TransactionExtra.prototype['withdraw_from_type'] = undefined;

/**
 * @member {module:model/ActivityType} slash_from_type
 */
TransactionExtra.prototype['slash_from_type'] = undefined;

/**
 * The Unix timestamp (in seconds) when the staking position will be unlocked and available for withdrawal.
 * @member {Number} timelock
 */
TransactionExtra.prototype['timelock'] = undefined;

/**
 * The change address on the Bitcoin chain. If not provided, the source wallet's address will be used as the change address.
 * @member {String} change_address
 */
TransactionExtra.prototype['change_address'] = undefined;

/**
 * The validator's EVM address.
 * @member {String} validator_address
 */
TransactionExtra.prototype['validator_address'] = undefined;

/**
 * The EVM address to receive staking rewards.
 * @member {String} reward_address
 */
TransactionExtra.prototype['reward_address'] = undefined;


TransactionExtra.OneOf = ["TransactionBabylonBusinessInfo", "TransactionBabylonTxParameters", "TransactionCoreStakeInfo"];

export default TransactionExtra;

