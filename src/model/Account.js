/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Account model module.
 * @module model/Account
 */
class Account {
    /**
     * Constructs a new <code>Account</code>.
     * Details of a payment account used for top-up operations, including address and balance metadata.
     * @alias module:model/Account
     * @param token_id {String} The ID of the cryptocurrency.
     * @param address {String} The token receiving address of the account.
     * @param merchant_balance {String} The merchant account balance, as a decimal string.
     * @param psp_balance {String} The PSP account balance, as a decimal string.
     */
    constructor(token_id, address, merchant_balance, psp_balance) { 
        
        Account.initialize(this, token_id, address, merchant_balance, psp_balance);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, token_id, address, merchant_balance, psp_balance) { 
        obj['token_id'] = token_id;
        obj['address'] = address;
        obj['merchant_balance'] = merchant_balance;
        obj['psp_balance'] = psp_balance;
    }

    /**
     * Constructs a <code>Account</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Account} obj Optional instance to populate.
     * @return {module:model/Account} The populated <code>Account</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Account();

            if (data.hasOwnProperty('token_id')) {
                obj['token_id'] = ApiClient.convertToType(data['token_id'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('merchant_balance')) {
                obj['merchant_balance'] = ApiClient.convertToType(data['merchant_balance'], 'String');
            }
            if (data.hasOwnProperty('psp_balance')) {
                obj['psp_balance'] = ApiClient.convertToType(data['psp_balance'], 'String');
            }
            if (data.hasOwnProperty('created_timestamp')) {
                obj['created_timestamp'] = ApiClient.convertToType(data['created_timestamp'], 'Number');
            }
            if (data.hasOwnProperty('updated_timestamp')) {
                obj['updated_timestamp'] = ApiClient.convertToType(data['updated_timestamp'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Account</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Account</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Account.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['token_id'] && !(typeof data['token_id'] === 'string' || data['token_id'] instanceof String)) {
            throw new Error("Expected the field `token_id` to be a primitive type in the JSON string but got " + data['token_id']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['merchant_balance'] && !(typeof data['merchant_balance'] === 'string' || data['merchant_balance'] instanceof String)) {
            throw new Error("Expected the field `merchant_balance` to be a primitive type in the JSON string but got " + data['merchant_balance']);
        }
        // ensure the json data is a string
        if (data['psp_balance'] && !(typeof data['psp_balance'] === 'string' || data['psp_balance'] instanceof String)) {
            throw new Error("Expected the field `psp_balance` to be a primitive type in the JSON string but got " + data['psp_balance']);
        }

        return true;
    }


}

Account.RequiredProperties = ["token_id", "address", "merchant_balance", "psp_balance"];

/**
 * The ID of the cryptocurrency.
 * @member {String} token_id
 */
Account.prototype['token_id'] = undefined;

/**
 * The token receiving address of the account.
 * @member {String} address
 */
Account.prototype['address'] = undefined;

/**
 * The merchant account balance, as a decimal string.
 * @member {String} merchant_balance
 */
Account.prototype['merchant_balance'] = undefined;

/**
 * The PSP account balance, as a decimal string.
 * @member {String} psp_balance
 */
Account.prototype['psp_balance'] = undefined;

/**
 * The time when the account was created, in Unix timestamp format, measured in milliseconds.
 * @member {Number} created_timestamp
 */
Account.prototype['created_timestamp'] = undefined;

/**
 * The time when the account was updated, in Unix timestamp format, measured in milliseconds.
 * @member {Number} updated_timestamp
 */
Account.prototype['updated_timestamp'] = undefined;






export default Account;

