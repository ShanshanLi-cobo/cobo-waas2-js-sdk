/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AcquiringType from './AcquiringType';
import CreateSettlement from './CreateSettlement';
import PayoutChannel from './PayoutChannel';
import SettlementType from './SettlementType';

/**
 * The CreateSettlementRequestRequest model module.
 * @module model/CreateSettlementRequestRequest
 */
class CreateSettlementRequestRequest {
    /**
     * Constructs a new <code>CreateSettlementRequestRequest</code>.
     * @alias module:model/CreateSettlementRequestRequest
     * @param request_id {String} The request ID that is used to track a settlement request. The request ID is provided by you and must be unique.
     * @param settlements {Array.<module:model/CreateSettlement>} 
     */
    constructor(request_id, settlements) { 
        
        CreateSettlementRequestRequest.initialize(this, request_id, settlements);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, request_id, settlements) { 
        obj['request_id'] = request_id;
        obj['settlements'] = settlements;
    }

    /**
     * Constructs a <code>CreateSettlementRequestRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateSettlementRequestRequest} obj Optional instance to populate.
     * @return {module:model/CreateSettlementRequestRequest} The populated <code>CreateSettlementRequestRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateSettlementRequestRequest();

            if (data.hasOwnProperty('request_id')) {
                obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
            }
            if (data.hasOwnProperty('acquiring_type')) {
                obj['acquiring_type'] = AcquiringType.constructFromObject(data['acquiring_type']);
            }
            if (data.hasOwnProperty('payout_channel')) {
                obj['payout_channel'] = PayoutChannel.constructFromObject(data['payout_channel']);
            }
            if (data.hasOwnProperty('settlement_type')) {
                obj['settlement_type'] = SettlementType.constructFromObject(data['settlement_type']);
            }
            if (data.hasOwnProperty('settlements')) {
                obj['settlements'] = ApiClient.convertToType(data['settlements'], [CreateSettlement]);
            }
            if (data.hasOwnProperty('bank_account_id')) {
                obj['bank_account_id'] = ApiClient.convertToType(data['bank_account_id'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateSettlementRequestRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateSettlementRequestRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateSettlementRequestRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['request_id'] && !(typeof data['request_id'] === 'string' || data['request_id'] instanceof String)) {
            throw new Error("Expected the field `request_id` to be a primitive type in the JSON string but got " + data['request_id']);
        }
        if (data['settlements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['settlements'])) {
                throw new Error("Expected the field `settlements` to be an array in the JSON data but got " + data['settlements']);
            }
            // validate the optional field `settlements` (array)
            for (const item of data['settlements']) {
                CreateSettlement.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['bank_account_id'] && !(typeof data['bank_account_id'] === 'string' || data['bank_account_id'] instanceof String)) {
            throw new Error("Expected the field `bank_account_id` to be a primitive type in the JSON string but got " + data['bank_account_id']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }

        return true;
    }


}

CreateSettlementRequestRequest.RequiredProperties = ["request_id", "settlements"];

/**
 * The request ID that is used to track a settlement request. The request ID is provided by you and must be unique.
 * @member {String} request_id
 */
CreateSettlementRequestRequest.prototype['request_id'] = undefined;

/**
 * @member {module:model/AcquiringType} acquiring_type
 */
CreateSettlementRequestRequest.prototype['acquiring_type'] = undefined;

/**
 * @member {module:model/PayoutChannel} payout_channel
 */
CreateSettlementRequestRequest.prototype['payout_channel'] = undefined;

/**
 * @member {module:model/SettlementType} settlement_type
 */
CreateSettlementRequestRequest.prototype['settlement_type'] = undefined;

/**
 * @member {Array.<module:model/CreateSettlement>} settlements
 */
CreateSettlementRequestRequest.prototype['settlements'] = undefined;

/**
 * ï½œ Only used in OffRamp payout channel. The ID of the bank account where the settled funds will be deposited.
 * @member {String} bank_account_id
 */
CreateSettlementRequestRequest.prototype['bank_account_id'] = undefined;

/**
 * The fiat currency for the settlement request.
 * @member {String} currency
 */
CreateSettlementRequestRequest.prototype['currency'] = undefined;






export default CreateSettlementRequestRequest;

