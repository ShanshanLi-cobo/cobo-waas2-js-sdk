/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActivityType from './ActivityType';
import TransactionExtraType from './TransactionExtraType';

/**
 * The TransactionBabylonTxParameters model module.
 * @module model/TransactionBabylonTxParameters
 */
class TransactionBabylonTxParameters {
    /**
     * Constructs a new <code>TransactionBabylonTxParameters</code>.
     * The Babylon transaction parameters.
     * @alias module:model/TransactionBabylonTxParameters
     * @param extra_type {module:model/TransactionExtraType} 
     */
    constructor(extra_type) { 
        
        TransactionBabylonTxParameters.initialize(this, extra_type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, extra_type) { 
        obj['extra_type'] = extra_type;
    }

    /**
     * Constructs a <code>TransactionBabylonTxParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionBabylonTxParameters} obj Optional instance to populate.
     * @return {module:model/TransactionBabylonTxParameters} The populated <code>TransactionBabylonTxParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionBabylonTxParameters();

            if (data.hasOwnProperty('extra_type')) {
                obj['extra_type'] = TransactionExtraType.constructFromObject(data['extra_type']);
            }
            if (data.hasOwnProperty('stake_amount')) {
                obj['stake_amount'] = ApiClient.convertToType(data['stake_amount'], 'String');
            }
            if (data.hasOwnProperty('finality_provider_public_key')) {
                obj['finality_provider_public_key'] = ApiClient.convertToType(data['finality_provider_public_key'], 'String');
            }
            if (data.hasOwnProperty('stake_block_time')) {
                obj['stake_block_time'] = ApiClient.convertToType(data['stake_block_time'], 'Number');
            }
            if (data.hasOwnProperty('param_version')) {
                obj['param_version'] = ApiClient.convertToType(data['param_version'], 'Number');
            }
            if (data.hasOwnProperty('withdraw_from_type')) {
                obj['withdraw_from_type'] = ActivityType.constructFromObject(data['withdraw_from_type']);
            }
            if (data.hasOwnProperty('slash_from_type')) {
                obj['slash_from_type'] = ActivityType.constructFromObject(data['slash_from_type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionBabylonTxParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionBabylonTxParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransactionBabylonTxParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['stake_amount'] && !(typeof data['stake_amount'] === 'string' || data['stake_amount'] instanceof String)) {
            throw new Error("Expected the field `stake_amount` to be a primitive type in the JSON string but got " + data['stake_amount']);
        }
        // ensure the json data is a string
        if (data['finality_provider_public_key'] && !(typeof data['finality_provider_public_key'] === 'string' || data['finality_provider_public_key'] instanceof String)) {
            throw new Error("Expected the field `finality_provider_public_key` to be a primitive type in the JSON string but got " + data['finality_provider_public_key']);
        }

        return true;
    }


}

TransactionBabylonTxParameters.RequiredProperties = ["extra_type"];

/**
 * @member {module:model/TransactionExtraType} extra_type
 */
TransactionBabylonTxParameters.prototype['extra_type'] = undefined;

/**
 * The origin staking amount.
 * @member {String} stake_amount
 */
TransactionBabylonTxParameters.prototype['stake_amount'] = undefined;

/**
 * The public key of the finality provider.
 * @member {String} finality_provider_public_key
 */
TransactionBabylonTxParameters.prototype['finality_provider_public_key'] = undefined;

/**
 * The number of blocks that need to be processed before the locked tokens are unlocked and become accessible.
 * @member {Number} stake_block_time
 */
TransactionBabylonTxParameters.prototype['stake_block_time'] = undefined;

/**
 * The version of babylon global parameters.
 * @member {Number} param_version
 */
TransactionBabylonTxParameters.prototype['param_version'] = undefined;

/**
 * @member {module:model/ActivityType} withdraw_from_type
 */
TransactionBabylonTxParameters.prototype['withdraw_from_type'] = undefined;

/**
 * @member {module:model/ActivityType} slash_from_type
 */
TransactionBabylonTxParameters.prototype['slash_from_type'] = undefined;






export default TransactionBabylonTxParameters;

