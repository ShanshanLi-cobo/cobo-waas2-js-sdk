/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcquiringType from '../model/AcquiringType';
import BankAccount from '../model/BankAccount';
import CreateCryptoAddressRequest from '../model/CreateCryptoAddressRequest';
import CreateMerchantRequest from '../model/CreateMerchantRequest';
import CreatePaymentOrderRequest from '../model/CreatePaymentOrderRequest';
import CreateRefundRequest from '../model/CreateRefundRequest';
import CreateSettlementRequestRequest from '../model/CreateSettlementRequestRequest';
import CryptoAddress from '../model/CryptoAddress';
import DeleteCryptoAddress201Response from '../model/DeleteCryptoAddress201Response';
import ErrorResponse from '../model/ErrorResponse';
import ForcedSweep from '../model/ForcedSweep';
import ForcedSweepRequest from '../model/ForcedSweepRequest';
import GetExchangeRate200Response from '../model/GetExchangeRate200Response';
import GetRefunds200Response from '../model/GetRefunds200Response';
import GetSettlementInfoByIds200Response from '../model/GetSettlementInfoByIds200Response';
import ListForcedSweepRequests200Response from '../model/ListForcedSweepRequests200Response';
import ListMerchantBalances200Response from '../model/ListMerchantBalances200Response';
import ListMerchants200Response from '../model/ListMerchants200Response';
import ListPaymentOrders200Response from '../model/ListPaymentOrders200Response';
import ListPaymentWalletBalances200Response from '../model/ListPaymentWalletBalances200Response';
import ListSettlementDetails200Response from '../model/ListSettlementDetails200Response';
import ListSettlementRequests200Response from '../model/ListSettlementRequests200Response';
import ListTopUpPayers200Response from '../model/ListTopUpPayers200Response';
import Merchant from '../model/Merchant';
import Order from '../model/Order';
import PspBalance from '../model/PspBalance';
import ReceivedAmountPerAddress from '../model/ReceivedAmountPerAddress';
import Refund from '../model/Refund';
import Settlement from '../model/Settlement';
import SupportedToken from '../model/SupportedToken';
import TopUpAddress from '../model/TopUpAddress';
import UpdateMerchantByIdRequest from '../model/UpdateMerchantByIdRequest';
import UpdatePaymentOrderRequest from '../model/UpdatePaymentOrderRequest';
import UpdateRefundByIdRequest from '../model/UpdateRefundByIdRequest';
import UpdateTopUpAddress from '../model/UpdateTopUpAddress';

/**
* Payment service.
* @module api/PaymentApi
*/
export default class PaymentApi {

    /**
    * Constructs a new PaymentApi. 
    * @alias module:api/PaymentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cancel refund order
     * This operation cancels a specified refund order. You can only cancel refund orders that have not been processed yet. 
     * @param {String} refund_id The refund order ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Refund} and HTTP response
     */
    cancelRefundByIdWithHttpInfo(refund_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'refund_id' is set
      if (refund_id === undefined || refund_id === null) {
        throw new Error("Missing the required parameter 'refund_id' when calling cancelRefundById");
      }

      let pathParams = {
        'refund_id': refund_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Refund;
      return this.apiClient.callApi(
        '/payments/refunds/{refund_id}/cancel', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancel refund order
     * This operation cancels a specified refund order. You can only cancel refund orders that have not been processed yet. 
     * @param {String} refund_id The refund order ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Refund}
     */
    cancelRefundById(refund_id) {
      return this.cancelRefundByIdWithHttpInfo(refund_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create crypto address
     * This operation registers a crypto address for crypto withdrawal.  The registered address can later be referenced by its ID when creating settlement requests. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateCryptoAddressRequest} [CreateCryptoAddressRequest] The request body to register a crypto address.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CryptoAddress} and HTTP response
     */
    createCryptoAddressWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['CreateCryptoAddressRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CryptoAddress;
      return this.apiClient.callApi(
        '/payments/crypto_addresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create crypto address
     * This operation registers a crypto address for crypto withdrawal.  The registered address can later be referenced by its ID when creating settlement requests. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateCryptoAddressRequest} opts.CreateCryptoAddressRequest The request body to register a crypto address.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CryptoAddress}
     */
    createCryptoAddress(opts) {
      return this.createCryptoAddressWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create forced sweep
     * This operation creates a forced sweep to transfer funds from addresses within a specified wallet to its designated sweep-to address. 
     * @param {Object} opts Optional parameters
     * @param {module:model/ForcedSweepRequest} [ForcedSweepRequest] The request body for forced sweep.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ForcedSweep} and HTTP response
     */
    createForcedSweepRequestWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['ForcedSweepRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ForcedSweep;
      return this.apiClient.callApi(
        '/payments/force_sweep_requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create forced sweep
     * This operation creates a forced sweep to transfer funds from addresses within a specified wallet to its designated sweep-to address. 
     * @param {Object} opts Optional parameters
     * @param {module:model/ForcedSweepRequest} opts.ForcedSweepRequest The request body for forced sweep.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ForcedSweep}
     */
    createForcedSweepRequest(opts) {
      return this.createForcedSweepRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create merchant
     * This operation creates a merchant and links it to a specified wallet. Payments to the merchant will be deposited into the linked wallet.  Upon successful creation, a merchant ID is generated and returned along with the merchant's information.  If you are a merchant (directly serving the payer), you only need to create one merchant and do not need to configure the developer fee rate. The developer fee rate only applies to platforms such as payment service providers (PSPs) that charge fees to their downstream merchants. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMerchantRequest} [CreateMerchantRequest] The request body to create a merchant.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Merchant} and HTTP response
     */
    createMerchantWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['CreateMerchantRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Merchant;
      return this.apiClient.callApi(
        '/payments/merchants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create merchant
     * This operation creates a merchant and links it to a specified wallet. Payments to the merchant will be deposited into the linked wallet.  Upon successful creation, a merchant ID is generated and returned along with the merchant's information.  If you are a merchant (directly serving the payer), you only need to create one merchant and do not need to configure the developer fee rate. The developer fee rate only applies to platforms such as payment service providers (PSPs) that charge fees to their downstream merchants. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMerchantRequest} opts.CreateMerchantRequest The request body to create a merchant.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Merchant}
     */
    createMerchant(opts) {
      return this.createMerchantWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create pay-in order
     * This operation creates a pay-in order. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatePaymentOrderRequest} [CreatePaymentOrderRequest] The request body to create a pay-in order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Order} and HTTP response
     */
    createPaymentOrderWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['CreatePaymentOrderRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/payments/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create pay-in order
     * This operation creates a pay-in order. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatePaymentOrderRequest} opts.CreatePaymentOrderRequest The request body to create a pay-in order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Order}
     */
    createPaymentOrder(opts) {
      return this.createPaymentOrderWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create refund order
     * This operation creates a refund order to return cryptocurrency to a specified address.   When creating a refund order, you can optionally link it to an existing pay-in order for tracking and reconciliation purposes. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateRefundRequest} [CreateRefundRequest] The request body to create a refund order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Refund} and HTTP response
     */
    createRefundWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['CreateRefundRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Refund;
      return this.apiClient.callApi(
        '/payments/refunds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create refund order
     * This operation creates a refund order to return cryptocurrency to a specified address.   When creating a refund order, you can optionally link it to an existing pay-in order for tracking and reconciliation purposes. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateRefundRequest} opts.CreateRefundRequest The request body to create a refund order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Refund}
     */
    createRefund(opts) {
      return this.createRefundWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create settlement request
     * This operation creates a settlement request to withdraw available balances. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSettlementRequestRequest} [CreateSettlementRequestRequest] The request body to create a settlement request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Settlement} and HTTP response
     */
    createSettlementRequestWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['CreateSettlementRequestRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Settlement;
      return this.apiClient.callApi(
        '/payments/settlement_requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create settlement request
     * This operation creates a settlement request to withdraw available balances. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSettlementRequestRequest} opts.CreateSettlementRequestRequest The request body to create a settlement request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Settlement}
     */
    createSettlementRequest(opts) {
      return this.createSettlementRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete crypto address
     * This operation unregisters a crypto address from being used for crypto withdrawals. 
     * @param {String} crypto_address_id The crypto address ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteCryptoAddress201Response} and HTTP response
     */
    deleteCryptoAddressWithHttpInfo(crypto_address_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'crypto_address_id' is set
      if (crypto_address_id === undefined || crypto_address_id === null) {
        throw new Error("Missing the required parameter 'crypto_address_id' when calling deleteCryptoAddress");
      }

      let pathParams = {
        'crypto_address_id': crypto_address_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteCryptoAddress201Response;
      return this.apiClient.callApi(
        '/payments/crypto_addresses/{crypto_address_id}/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete crypto address
     * This operation unregisters a crypto address from being used for crypto withdrawals. 
     * @param {String} crypto_address_id The crypto address ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteCryptoAddress201Response}
     */
    deleteCryptoAddress(crypto_address_id) {
      return this.deleteCryptoAddressWithHttpInfo(crypto_address_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get exchange rate
     * This operation retrieves the current exchange rate between a specified currency pair. 
     * @param {String} token_id The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:   - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param {String} currency The fiat currency. Currently, only `USD` is supported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetExchangeRate200Response} and HTTP response
     */
    getExchangeRateWithHttpInfo(token_id, currency) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling getExchangeRate");
      }
      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling getExchangeRate");
      }

      let pathParams = {
        'token_id': token_id,
        'currency': currency
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetExchangeRate200Response;
      return this.apiClient.callApi(
        '/payments/exchange_rates/{token_id}/{currency}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get exchange rate
     * This operation retrieves the current exchange rate between a specified currency pair. 
     * @param {String} token_id The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:   - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param {String} currency The fiat currency. Currently, only `USD` is supported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetExchangeRate200Response}
     */
    getExchangeRate(token_id, currency) {
      return this.getExchangeRateWithHttpInfo(token_id, currency)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get payer balance
     * This operation retrieves the total amount received for a specific payer. The information is grouped by token and receiving address. 
     * @param {String} merchant_id The merchant ID.
     * @param {String} payer_id Unique payer identifier on the Cobo side, auto-generated by the system.
     * @param {String} token_id The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:   - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ReceivedAmountPerAddress>} and HTTP response
     */
    getPayerBalanceByAddressWithHttpInfo(merchant_id, payer_id, token_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'merchant_id' is set
      if (merchant_id === undefined || merchant_id === null) {
        throw new Error("Missing the required parameter 'merchant_id' when calling getPayerBalanceByAddress");
      }
      // verify the required parameter 'payer_id' is set
      if (payer_id === undefined || payer_id === null) {
        throw new Error("Missing the required parameter 'payer_id' when calling getPayerBalanceByAddress");
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling getPayerBalanceByAddress");
      }

      let pathParams = {
      };
      let queryParams = {
        'merchant_id': merchant_id,
        'payer_id': payer_id,
        'token_id': token_id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ReceivedAmountPerAddress];
      return this.apiClient.callApi(
        '/payments/balance/payer/address', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get payer balance
     * This operation retrieves the total amount received for a specific payer. The information is grouped by token and receiving address. 
     * @param {String} merchant_id The merchant ID.
     * @param {String} payer_id Unique payer identifier on the Cobo side, auto-generated by the system.
     * @param {String} token_id The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:   - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ReceivedAmountPerAddress>}
     */
    getPayerBalanceByAddress(merchant_id, payer_id, token_id) {
      return this.getPayerBalanceByAddressWithHttpInfo(merchant_id, payer_id, token_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get pay-in order information
     * This operation retrieves details of a specific pay-in order. 
     * @param {String} order_id The pay-in order ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Order} and HTTP response
     */
    getPaymentOrderDetailByIdWithHttpInfo(order_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'order_id' is set
      if (order_id === undefined || order_id === null) {
        throw new Error("Missing the required parameter 'order_id' when calling getPaymentOrderDetailById");
      }

      let pathParams = {
        'order_id': order_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/payments/orders/{order_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get pay-in order information
     * This operation retrieves details of a specific pay-in order. 
     * @param {String} order_id The pay-in order ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Order}
     */
    getPaymentOrderDetailById(order_id) {
      return this.getPaymentOrderDetailByIdWithHttpInfo(order_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get developer balance
     * This operation retrieves the balance information for you as the developer. The balance information is grouped by token. 
     * @param {String} token_id The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:   - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PspBalance} and HTTP response
     */
    getPspBalanceWithHttpInfo(token_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling getPspBalance");
      }

      let pathParams = {
      };
      let queryParams = {
        'token_id': token_id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PspBalance;
      return this.apiClient.callApi(
        '/payments/balance/psp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get developer balance
     * This operation retrieves the balance information for you as the developer. The balance information is grouped by token. 
     * @param {String} token_id The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:   - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PspBalance}
     */
    getPspBalance(token_id) {
      return this.getPspBalanceWithHttpInfo(token_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get refund order information
     * This operation retrieves the detailed information about a specified refund order. 
     * @param {String} refund_id The refund order ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Refund} and HTTP response
     */
    getRefundDetailByIdWithHttpInfo(refund_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'refund_id' is set
      if (refund_id === undefined || refund_id === null) {
        throw new Error("Missing the required parameter 'refund_id' when calling getRefundDetailById");
      }

      let pathParams = {
        'refund_id': refund_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Refund;
      return this.apiClient.callApi(
        '/payments/refunds/{refund_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get refund order information
     * This operation retrieves the detailed information about a specified refund order. 
     * @param {String} refund_id The refund order ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Refund}
     */
    getRefundDetailById(refund_id) {
      return this.getRefundDetailByIdWithHttpInfo(refund_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all refund orders
     * This operation retrieves the information of all refund orders. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} [merchant_id] The merchant ID.
     * @param {String} [request_id] The request ID.
     * @param {String} [statuses] A list of order, refund or settlement statuses. You can refer to the following operations for the possible status values:  - [Get pay-in order information](https://www.cobo.com/developers/v2/api-references/payment/get-pay-in-order-information)  - [Get refund order information](https://www.cobo.com/developers/v2/api-references/payment/get-refund-order-information)  - [List all settlement details](https://www.cobo.com/developers/v2/api-references/payment/list-all-settlement-details) 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetRefunds200Response} and HTTP response
     */
    getRefundsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'merchant_id': opts['merchant_id'],
        'request_id': opts['request_id'],
        'statuses': opts['statuses']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRefunds200Response;
      return this.apiClient.callApi(
        '/payments/refunds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all refund orders
     * This operation retrieves the information of all refund orders. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} opts.merchant_id The merchant ID.
     * @param {String} opts.request_id The request ID.
     * @param {String} opts.statuses A list of order, refund or settlement statuses. You can refer to the following operations for the possible status values:  - [Get pay-in order information](https://www.cobo.com/developers/v2/api-references/payment/get-pay-in-order-information)  - [Get refund order information](https://www.cobo.com/developers/v2/api-references/payment/get-refund-order-information)  - [List all settlement details](https://www.cobo.com/developers/v2/api-references/payment/list-all-settlement-details) 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetRefunds200Response}
     */
    getRefunds(opts) {
      return this.getRefundsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get settlement request information
     * This operation retrieves the information of a specific settlement request. 
     * @param {String} settlement_request_id The settlement request ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Settlement} and HTTP response
     */
    getSettlementByIdWithHttpInfo(settlement_request_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'settlement_request_id' is set
      if (settlement_request_id === undefined || settlement_request_id === null) {
        throw new Error("Missing the required parameter 'settlement_request_id' when calling getSettlementById");
      }

      let pathParams = {
        'settlement_request_id': settlement_request_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Settlement;
      return this.apiClient.callApi(
        '/payments/settlement_requests/{settlement_request_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get settlement request information
     * This operation retrieves the information of a specific settlement request. 
     * @param {String} settlement_request_id The settlement request ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Settlement}
     */
    getSettlementById(settlement_request_id) {
      return this.getSettlementByIdWithHttpInfo(settlement_request_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get withdrawable balances
     * This operation retrieves the balances of specified merchants or the developer. 
     * @param {Object} opts Optional parameters
     * @param {String} [merchant_ids] A list of merchant IDs to query.
     * @param {String} [currency = 'USD')] The currency for the operation. Currently, only `USD` is supported.
     * @param {module:model/AcquiringType} [acquiring_type] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSettlementInfoByIds200Response} and HTTP response
     */
    getSettlementInfoByIdsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'merchant_ids': opts['merchant_ids'],
        'currency': opts['currency'],
        'acquiring_type': opts['acquiring_type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSettlementInfoByIds200Response;
      return this.apiClient.callApi(
        '/payments/settlement_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get withdrawable balances
     * This operation retrieves the balances of specified merchants or the developer. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.merchant_ids A list of merchant IDs to query.
     * @param {String} opts.currency The currency for the operation. Currently, only `USD` is supported. (default to 'USD')
     * @param {module:model/AcquiringType} opts.acquiring_type 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSettlementInfoByIds200Response}
     */
    getSettlementInfoByIds(opts) {
      return this.getSettlementInfoByIdsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get top-up address
     * This operation retrieves the information of the dedicated top-up address assigned to a specific payer under a merchant on a specified chain. 
     * @param {String} merchant_id The merchant ID.
     * @param {String} token_id The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:   - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param {String} custom_payer_id A unique identifier assigned by the developer to track and identify individual payers in their system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TopUpAddress} and HTTP response
     */
    getTopUpAddressWithHttpInfo(merchant_id, token_id, custom_payer_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'merchant_id' is set
      if (merchant_id === undefined || merchant_id === null) {
        throw new Error("Missing the required parameter 'merchant_id' when calling getTopUpAddress");
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling getTopUpAddress");
      }
      // verify the required parameter 'custom_payer_id' is set
      if (custom_payer_id === undefined || custom_payer_id === null) {
        throw new Error("Missing the required parameter 'custom_payer_id' when calling getTopUpAddress");
      }

      let pathParams = {
      };
      let queryParams = {
        'merchant_id': merchant_id,
        'token_id': token_id,
        'custom_payer_id': custom_payer_id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TopUpAddress;
      return this.apiClient.callApi(
        '/payments/topup/address', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get top-up address
     * This operation retrieves the information of the dedicated top-up address assigned to a specific payer under a merchant on a specified chain. 
     * @param {String} merchant_id The merchant ID.
     * @param {String} token_id The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:   - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param {String} custom_payer_id A unique identifier assigned by the developer to track and identify individual payers in their system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TopUpAddress}
     */
    getTopUpAddress(merchant_id, token_id, custom_payer_id) {
      return this.getTopUpAddressWithHttpInfo(merchant_id, token_id, custom_payer_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all bank accounts
     * This operation retrieves the information of all bank accounts you have registered for payment settlement. Contact our support team at [help@cobo.com](mailto:help@cobo.com) to register a new bank account. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/BankAccount>} and HTTP response
     */
    listBankAccountsWithHttpInfo() {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BankAccount];
      return this.apiClient.callApi(
        '/payments/bank_accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all bank accounts
     * This operation retrieves the information of all bank accounts you have registered for payment settlement. Contact our support team at [help@cobo.com](mailto:help@cobo.com) to register a new bank account. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/BankAccount>}
     */
    listBankAccounts() {
      return this.listBankAccountsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List crypto addresses
     * This operation retrieves a list of crypto addresses registered for crypto withdrawal.   Contact our support team at [help@cobo.com](mailto:help@cobo.com) to register a new crypto address. 
     * @param {Object} opts Optional parameters
     * @param {String} [token_id] The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:   - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CryptoAddress>} and HTTP response
     */
    listCryptoAddressesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'token_id': opts['token_id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CryptoAddress];
      return this.apiClient.callApi(
        '/payments/crypto_addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List crypto addresses
     * This operation retrieves a list of crypto addresses registered for crypto withdrawal.   Contact our support team at [help@cobo.com](mailto:help@cobo.com) to register a new crypto address. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.token_id The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:   - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CryptoAddress>}
     */
    listCryptoAddresses(opts) {
      return this.listCryptoAddressesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List forced sweeps
     * This operation retrieves the information of all forced sweeps. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} [request_id] The request ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListForcedSweepRequests200Response} and HTTP response
     */
    listForcedSweepRequestsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'request_id': opts['request_id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListForcedSweepRequests200Response;
      return this.apiClient.callApi(
        '/payments/force_sweep_requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List forced sweeps
     * This operation retrieves the information of all forced sweeps. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} opts.request_id The request ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListForcedSweepRequests200Response}
     */
    listForcedSweepRequests(opts) {
      return this.listForcedSweepRequestsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List merchant balances
     * This operation retrieves the balance information for specified merchants. The balance information is grouped by token and acquiring type. If you do not specify the `merchant_ids` parameter, the balance information for all merchants will be returned. 
     * @param {String} token_id The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:   - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param {module:model/AcquiringType} acquiring_type The payment acquisition type. - `Order`: Payers pay by fixed-amount orders. Ideal for specific purchases and one-time transactions. - `TopUp`: Account recharge flow where payers deposit funds to their dedicated top-up addresses. Ideal for flexible or usage-based payment models. 
     * @param {Object} opts Optional parameters
     * @param {String} [merchant_ids] A list of merchant IDs to query.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMerchantBalances200Response} and HTTP response
     */
    listMerchantBalancesWithHttpInfo(token_id, acquiring_type, opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling listMerchantBalances");
      }
      // verify the required parameter 'acquiring_type' is set
      if (acquiring_type === undefined || acquiring_type === null) {
        throw new Error("Missing the required parameter 'acquiring_type' when calling listMerchantBalances");
      }

      let pathParams = {
      };
      let queryParams = {
        'merchant_ids': opts['merchant_ids'],
        'token_id': token_id,
        'acquiring_type': acquiring_type
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMerchantBalances200Response;
      return this.apiClient.callApi(
        '/payments/balance/merchants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List merchant balances
     * This operation retrieves the balance information for specified merchants. The balance information is grouped by token and acquiring type. If you do not specify the `merchant_ids` parameter, the balance information for all merchants will be returned. 
     * @param {String} token_id The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:   - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param {module:model/AcquiringType} acquiring_type The payment acquisition type. - `Order`: Payers pay by fixed-amount orders. Ideal for specific purchases and one-time transactions. - `TopUp`: Account recharge flow where payers deposit funds to their dedicated top-up addresses. Ideal for flexible or usage-based payment models. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.merchant_ids A list of merchant IDs to query.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMerchantBalances200Response}
     */
    listMerchantBalances(token_id, acquiring_type, opts) {
      return this.listMerchantBalancesWithHttpInfo(token_id, acquiring_type, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all merchants
     * This operation retrieves the information of all merchants.   You can filter the results by using a keyword for fuzzy search on merchant names or by specifying a wallet ID. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} [keyword] A search term used for fuzzy matching of merchant names.
     * @param {String} [wallet_id] The wallet ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMerchants200Response} and HTTP response
     */
    listMerchantsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'keyword': opts['keyword'],
        'wallet_id': opts['wallet_id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMerchants200Response;
      return this.apiClient.callApi(
        '/payments/merchants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all merchants
     * This operation retrieves the information of all merchants.   You can filter the results by using a keyword for fuzzy search on merchant names or by specifying a wallet ID. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} opts.keyword A search term used for fuzzy matching of merchant names.
     * @param {String} opts.wallet_id The wallet ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMerchants200Response}
     */
    listMerchants(opts) {
      return this.listMerchantsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all pay-in orders
     * This operation retrieves the information of all pay-in orders. You can filter the result by merchant ID. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} [merchant_id] The merchant ID.
     * @param {String} [psp_order_id] A unique reference code assigned by the developer to identify this order in their system.
     * @param {String} [statuses] A list of order, refund or settlement statuses. You can refer to the following operations for the possible status values:  - [Get pay-in order information](https://www.cobo.com/developers/v2/api-references/payment/get-pay-in-order-information)  - [Get refund order information](https://www.cobo.com/developers/v2/api-references/payment/get-refund-order-information)  - [List all settlement details](https://www.cobo.com/developers/v2/api-references/payment/list-all-settlement-details) 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListPaymentOrders200Response} and HTTP response
     */
    listPaymentOrdersWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'merchant_id': opts['merchant_id'],
        'psp_order_id': opts['psp_order_id'],
        'statuses': opts['statuses']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPaymentOrders200Response;
      return this.apiClient.callApi(
        '/payments/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all pay-in orders
     * This operation retrieves the information of all pay-in orders. You can filter the result by merchant ID. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} opts.merchant_id The merchant ID.
     * @param {String} opts.psp_order_id A unique reference code assigned by the developer to identify this order in their system.
     * @param {String} opts.statuses A list of order, refund or settlement statuses. You can refer to the following operations for the possible status values:  - [Get pay-in order information](https://www.cobo.com/developers/v2/api-references/payment/get-pay-in-order-information)  - [Get refund order information](https://www.cobo.com/developers/v2/api-references/payment/get-refund-order-information)  - [List all settlement details](https://www.cobo.com/developers/v2/api-references/payment/list-all-settlement-details) 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListPaymentOrders200Response}
     */
    listPaymentOrders(opts) {
      return this.listPaymentOrdersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all supported tokens
     * This operation retrieves the information of all supported tokens. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SupportedToken>} and HTTP response
     */
    listPaymentSupportedTokensWithHttpInfo() {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SupportedToken];
      return this.apiClient.callApi(
        '/payments/supported_tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all supported tokens
     * This operation retrieves the information of all supported tokens. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SupportedToken>}
     */
    listPaymentSupportedTokens() {
      return this.listPaymentSupportedTokensWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List payment wallet balances
     * This operation retrieves the balance information for specified payment wallets. The balance information is grouped by token. If you do not specify the `wallet_ids` parameter, the balance information for all payment wallets will be returned. 
     * @param {String} token_id The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:   - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param {Object} opts Optional parameters
     * @param {String} [wallet_ids] A list of wallet IDs to query.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListPaymentWalletBalances200Response} and HTTP response
     */
    listPaymentWalletBalancesWithHttpInfo(token_id, opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling listPaymentWalletBalances");
      }

      let pathParams = {
      };
      let queryParams = {
        'wallet_ids': opts['wallet_ids'],
        'token_id': token_id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPaymentWalletBalances200Response;
      return this.apiClient.callApi(
        '/payments/balance/payment_wallets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List payment wallet balances
     * This operation retrieves the balance information for specified payment wallets. The balance information is grouped by token. If you do not specify the `wallet_ids` parameter, the balance information for all payment wallets will be returned. 
     * @param {String} token_id The token ID, which is a unique identifier that specifies both the blockchain network and cryptocurrency token in the format `{CHAIN}_{TOKEN}`. Supported values include:   - USDC: `ETH_USDC`, `ARBITRUM_USDCOIN`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC2`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param {Object} opts Optional parameters
     * @param {String} opts.wallet_ids A list of wallet IDs to query.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListPaymentWalletBalances200Response}
     */
    listPaymentWalletBalances(token_id, opts) {
      return this.listPaymentWalletBalancesWithHttpInfo(token_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all settlement details
     * This operation retrieves the information of all settlement details. You can filter the result by merchant ID or status. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} [merchant_id] The merchant ID.
     * @param {String} [statuses] A list of order, refund or settlement statuses. You can refer to the following operations for the possible status values:  - [Get pay-in order information](https://www.cobo.com/developers/v2/api-references/payment/get-pay-in-order-information)  - [Get refund order information](https://www.cobo.com/developers/v2/api-references/payment/get-refund-order-information)  - [List all settlement details](https://www.cobo.com/developers/v2/api-references/payment/list-all-settlement-details) 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListSettlementDetails200Response} and HTTP response
     */
    listSettlementDetailsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'merchant_id': opts['merchant_id'],
        'statuses': opts['statuses']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSettlementDetails200Response;
      return this.apiClient.callApi(
        '/payments/settlement_details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all settlement details
     * This operation retrieves the information of all settlement details. You can filter the result by merchant ID or status. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} opts.merchant_id The merchant ID.
     * @param {String} opts.statuses A list of order, refund or settlement statuses. You can refer to the following operations for the possible status values:  - [Get pay-in order information](https://www.cobo.com/developers/v2/api-references/payment/get-pay-in-order-information)  - [Get refund order information](https://www.cobo.com/developers/v2/api-references/payment/get-refund-order-information)  - [List all settlement details](https://www.cobo.com/developers/v2/api-references/payment/list-all-settlement-details) 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSettlementDetails200Response}
     */
    listSettlementDetails(opts) {
      return this.listSettlementDetailsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all settlement requests
     * This operation retrieves the information of all settlement requests. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} [request_id] The request ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListSettlementRequests200Response} and HTTP response
     */
    listSettlementRequestsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'request_id': opts['request_id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSettlementRequests200Response;
      return this.apiClient.callApi(
        '/payments/settlement_requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all settlement requests
     * This operation retrieves the information of all settlement requests. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} opts.request_id The request ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSettlementRequests200Response}
     */
    listSettlementRequests(opts) {
      return this.listSettlementRequestsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List payers
     * This operation retrieves the information of all payers under a merchant.   You can filter the result by the payer ID. 
     * @param {String} merchant_id The merchant ID.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} [payer_id] A unique identifier assigned by Cobo to track and identify individual payers.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTopUpPayers200Response} and HTTP response
     */
    listTopUpPayersWithHttpInfo(merchant_id, opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'merchant_id' is set
      if (merchant_id === undefined || merchant_id === null) {
        throw new Error("Missing the required parameter 'merchant_id' when calling listTopUpPayers");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'merchant_id': merchant_id,
        'payer_id': opts['payer_id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTopUpPayers200Response;
      return this.apiClient.callApi(
        '/payments/topup/payers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List payers
     * This operation retrieves the information of all payers under a merchant.   You can filter the result by the payer ID. 
     * @param {String} merchant_id The merchant ID.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} opts.payer_id A unique identifier assigned by Cobo to track and identify individual payers.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTopUpPayers200Response}
     */
    listTopUpPayers(merchant_id, opts) {
      return this.listTopUpPayersWithHttpInfo(merchant_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update merchant
     * This operation updates the information of an existing merchant. 
     * @param {String} merchant_id The merchant ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMerchantByIdRequest} [UpdateMerchantByIdRequest] The request body to update a merchant.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Merchant} and HTTP response
     */
    updateMerchantByIdWithHttpInfo(merchant_id, opts) {
      opts = opts || {};
      let postBody = opts['UpdateMerchantByIdRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'merchant_id' is set
      if (merchant_id === undefined || merchant_id === null) {
        throw new Error("Missing the required parameter 'merchant_id' when calling updateMerchantById");
      }

      let pathParams = {
        'merchant_id': merchant_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Merchant;
      return this.apiClient.callApi(
        '/payments/merchants/{merchant_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update merchant
     * This operation updates the information of an existing merchant. 
     * @param {String} merchant_id The merchant ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMerchantByIdRequest} opts.UpdateMerchantByIdRequest The request body to update a merchant.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Merchant}
     */
    updateMerchantById(merchant_id, opts) {
      return this.updateMerchantByIdWithHttpInfo(merchant_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update pay-in order
     * This operation updates a pay-in order. Use this operation to expire a pay-in order that is no longer needed. 
     * @param {String} order_id The pay-in order ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdatePaymentOrderRequest} [UpdatePaymentOrderRequest] The request body to update a pay-in order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Order} and HTTP response
     */
    updatePaymentOrderWithHttpInfo(order_id, opts) {
      opts = opts || {};
      let postBody = opts['UpdatePaymentOrderRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'order_id' is set
      if (order_id === undefined || order_id === null) {
        throw new Error("Missing the required parameter 'order_id' when calling updatePaymentOrder");
      }

      let pathParams = {
        'order_id': order_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/payments/orders/{order_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update pay-in order
     * This operation updates a pay-in order. Use this operation to expire a pay-in order that is no longer needed. 
     * @param {String} order_id The pay-in order ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdatePaymentOrderRequest} opts.UpdatePaymentOrderRequest The request body to update a pay-in order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Order}
     */
    updatePaymentOrder(order_id, opts) {
      return this.updatePaymentOrderWithHttpInfo(order_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update refund order
     * This operation updates a specified refund order by modifying its recipient address. You can only update the recipient address for refund orders that have not been processed yet. 
     * @param {String} refund_id The refund order ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateRefundByIdRequest} [UpdateRefundByIdRequest] The request body to update a refund order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Refund} and HTTP response
     */
    updateRefundByIdWithHttpInfo(refund_id, opts) {
      opts = opts || {};
      let postBody = opts['UpdateRefundByIdRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'refund_id' is set
      if (refund_id === undefined || refund_id === null) {
        throw new Error("Missing the required parameter 'refund_id' when calling updateRefundById");
      }

      let pathParams = {
        'refund_id': refund_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Refund;
      return this.apiClient.callApi(
        '/payments/refunds/{refund_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update refund order
     * This operation updates a specified refund order by modifying its recipient address. You can only update the recipient address for refund orders that have not been processed yet. 
     * @param {String} refund_id The refund order ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateRefundByIdRequest} opts.UpdateRefundByIdRequest The request body to update a refund order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Refund}
     */
    updateRefundById(refund_id, opts) {
      return this.updateRefundByIdWithHttpInfo(refund_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update top-up address
     * This operation updates the dedicated top-up address assigned to a specific payer under a merchant on a specified chain. 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateTopUpAddress} [UpdateTopUpAddress] The request body to update top-up address.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TopUpAddress} and HTTP response
     */
    updateTopUpAddressWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['UpdateTopUpAddress'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TopUpAddress;
      return this.apiClient.callApi(
        '/payments/topup/address', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update top-up address
     * This operation updates the dedicated top-up address assigned to a specific payer under a merchant on a specified chain. 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateTopUpAddress} opts.UpdateTopUpAddress The request body to update top-up address.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TopUpAddress}
     */
    updateTopUpAddress(opts) {
      return this.updateTopUpAddressWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
