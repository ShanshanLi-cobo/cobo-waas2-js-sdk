/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcquiringType from '../model/AcquiringType';
import BankAccount from '../model/BankAccount';
import CreateBankAccountRequest from '../model/CreateBankAccountRequest';
import CreateCryptoAddressRequest from '../model/CreateCryptoAddressRequest';
import CreateMerchantRequest from '../model/CreateMerchantRequest';
import CreateOrderLinkRequest from '../model/CreateOrderLinkRequest';
import CreatePaymentOrderRequest from '../model/CreatePaymentOrderRequest';
import CreateRefundRequest from '../model/CreateRefundRequest';
import CreateSettlementRequestRequest from '../model/CreateSettlementRequestRequest';
import CryptoAddress from '../model/CryptoAddress';
import DeleteCryptoAddress201Response from '../model/DeleteCryptoAddress201Response';
import ErrorResponse from '../model/ErrorResponse';
import ForcedSweep from '../model/ForcedSweep';
import ForcedSweepRequest from '../model/ForcedSweepRequest';
import GetExchangeRate200Response from '../model/GetExchangeRate200Response';
import GetRefunds200Response from '../model/GetRefunds200Response';
import GetSettlementInfoByIds200Response from '../model/GetSettlementInfoByIds200Response';
import Link from '../model/Link';
import ListForcedSweepRequests200Response from '../model/ListForcedSweepRequests200Response';
import ListMerchantBalances200Response from '../model/ListMerchantBalances200Response';
import ListMerchants200Response from '../model/ListMerchants200Response';
import ListPaymentOrders200Response from '../model/ListPaymentOrders200Response';
import ListPaymentWalletBalances200Response from '../model/ListPaymentWalletBalances200Response';
import ListSettlementDetails200Response from '../model/ListSettlementDetails200Response';
import ListSettlementRequests200Response from '../model/ListSettlementRequests200Response';
import ListSubscriptionActions200Response from '../model/ListSubscriptionActions200Response';
import ListSubscriptionPlans200Response from '../model/ListSubscriptionPlans200Response';
import ListSubscriptions200Response from '../model/ListSubscriptions200Response';
import ListTopUpPayerAccounts200Response from '../model/ListTopUpPayerAccounts200Response';
import ListTopUpPayers200Response from '../model/ListTopUpPayers200Response';
import Merchant from '../model/Merchant';
import Order from '../model/Order';
import PaymentCreateSubscriptionAction from '../model/PaymentCreateSubscriptionAction';
import PaymentCreateSubscriptionPlan from '../model/PaymentCreateSubscriptionPlan';
import PaymentEstimateFee201Response from '../model/PaymentEstimateFee201Response';
import PaymentEstimateFeeRequest from '../model/PaymentEstimateFeeRequest';
import PaymentSubscriptionAction from '../model/PaymentSubscriptionAction';
import PaymentSubscriptionActionType from '../model/PaymentSubscriptionActionType';
import PaymentSubscriptionDetail from '../model/PaymentSubscriptionDetail';
import PaymentSubscriptionPlan from '../model/PaymentSubscriptionPlan';
import PaymentSubscriptionPlanDetail from '../model/PaymentSubscriptionPlanDetail';
import PspBalance from '../model/PspBalance';
import ReceivedAmountPerAddress from '../model/ReceivedAmountPerAddress';
import Refund from '../model/Refund';
import Settlement from '../model/Settlement';
import SupportedToken from '../model/SupportedToken';
import TopUpAddress from '../model/TopUpAddress';
import UpdateBankAccountByIdRequest from '../model/UpdateBankAccountByIdRequest';
import UpdateMerchantByIdRequest from '../model/UpdateMerchantByIdRequest';
import UpdatePaymentOrderRequest from '../model/UpdatePaymentOrderRequest';
import UpdateRefundByIdRequest from '../model/UpdateRefundByIdRequest';
import UpdateTopUpAddress from '../model/UpdateTopUpAddress';
import WalletSetup from '../model/WalletSetup';

/**
* Payment service.
* @module api/PaymentApi
*/
export default class PaymentApi {

    /**
    * Constructs a new PaymentApi. 
    * @alias module:api/PaymentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cancel refund order
     * This operation cancels a specified refund order. 
     * @param {String} refund_id The refund order ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Refund} and HTTP response
     */
    cancelRefundByIdWithHttpInfo(refund_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'refund_id' is set
      if (refund_id === undefined || refund_id === null) {
        throw new Error("Missing the required parameter 'refund_id' when calling cancelRefundById");
      }

      let pathParams = {
        'refund_id': refund_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Refund;
      return this.apiClient.callApi(
        '/payments/refunds/{refund_id}/cancel', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancel refund order
     * This operation cancels a specified refund order. 
     * @param {String} refund_id The refund order ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Refund}
     */
    cancelRefundById(refund_id) {
      return this.cancelRefundByIdWithHttpInfo(refund_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create bank account
     * This operation registers a bank account for payment settlement.  Upon successful registration, the bank account details can be retrieved using the assigned bank account ID. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateBankAccountRequest} [CreateBankAccountRequest] The request body to register a bank account.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BankAccount} and HTTP response
     */
    createBankAccountWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['CreateBankAccountRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BankAccount;
      return this.apiClient.callApi(
        '/payments/bank_accounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create bank account
     * This operation registers a bank account for payment settlement.  Upon successful registration, the bank account details can be retrieved using the assigned bank account ID. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateBankAccountRequest} opts.CreateBankAccountRequest The request body to register a bank account.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BankAccount}
     */
    createBankAccount(opts) {
      return this.createBankAccountWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create crypto address
     * Create a new cryptocurrency address for receiving payouts or transfers.  The address must match the specified `token_id`'s blockchain.  Optionally, a label can be provided to help categorize the address internally. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateCryptoAddressRequest} [CreateCryptoAddressRequest] The request body to create a crypto address.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CryptoAddress} and HTTP response
     */
    createCryptoAddressWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['CreateCryptoAddressRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CryptoAddress;
      return this.apiClient.callApi(
        '/payments/crypto_addresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create crypto address
     * Create a new cryptocurrency address for receiving payouts or transfers.  The address must match the specified `token_id`'s blockchain.  Optionally, a label can be provided to help categorize the address internally. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateCryptoAddressRequest} opts.CreateCryptoAddressRequest The request body to create a crypto address.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CryptoAddress}
     */
    createCryptoAddress(opts) {
      return this.createCryptoAddressWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create force sweep request
     * This operation creates a force sweep request to settle or refund available balances.  
     * @param {Object} opts Optional parameters
     * @param {module:model/ForcedSweepRequest} [ForcedSweepRequest] The request body to force sweep.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ForcedSweep} and HTTP response
     */
    createForcedSweepRequestWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['ForcedSweepRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ForcedSweep;
      return this.apiClient.callApi(
        '/payments/force_sweep_requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create force sweep request
     * This operation creates a force sweep request to settle or refund available balances.  
     * @param {Object} opts Optional parameters
     * @param {module:model/ForcedSweepRequest} opts.ForcedSweepRequest The request body to force sweep.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ForcedSweep}
     */
    createForcedSweepRequest(opts) {
      return this.createForcedSweepRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create merchant
     * This operation creates a merchant and links it to a specified wallet. Payments to the merchant will be deposited into the linked wallet.  Upon successful creation, a merchant ID is generated and returned along with the merchant's information. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMerchantRequest} [CreateMerchantRequest] The request body to create a merchant.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Merchant} and HTTP response
     */
    createMerchantWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['CreateMerchantRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Merchant;
      return this.apiClient.callApi(
        '/payments/merchants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create merchant
     * This operation creates a merchant and links it to a specified wallet. Payments to the merchant will be deposited into the linked wallet.  Upon successful creation, a merchant ID is generated and returned along with the merchant's information. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMerchantRequest} opts.CreateMerchantRequest The request body to create a merchant.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Merchant}
     */
    createMerchant(opts) {
      return this.createMerchantWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create order link
     * This operation creates a payment link of a pay-in order. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrderLinkRequest} [CreateOrderLinkRequest] The request body to create a payment link of a pay-in order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Link} and HTTP response
     */
    createOrderLinkWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['CreateOrderLinkRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Link;
      return this.apiClient.callApi(
        '/payments/links/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create order link
     * This operation creates a payment link of a pay-in order. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateOrderLinkRequest} opts.CreateOrderLinkRequest The request body to create a payment link of a pay-in order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Link}
     */
    createOrderLink(opts) {
      return this.createOrderLinkWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create pay-in order
     * This operation creates a pay-in order. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatePaymentOrderRequest} [CreatePaymentOrderRequest] The request body to create a pay-in order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Order} and HTTP response
     */
    createPaymentOrderWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['CreatePaymentOrderRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/payments/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create pay-in order
     * This operation creates a pay-in order. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreatePaymentOrderRequest} opts.CreatePaymentOrderRequest The request body to create a pay-in order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Order}
     */
    createPaymentOrder(opts) {
      return this.createPaymentOrderWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create refund order
     * This operation creates a refund order to return cryptocurrency to a specified address.   When creating a refund order, you can optionally link it to an existing pay-in order for tracking and reconciliation purposes. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateRefundRequest} [CreateRefundRequest] The request body to create a refund order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Refund} and HTTP response
     */
    createRefundWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['CreateRefundRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Refund;
      return this.apiClient.callApi(
        '/payments/refunds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create refund order
     * This operation creates a refund order to return cryptocurrency to a specified address.   When creating a refund order, you can optionally link it to an existing pay-in order for tracking and reconciliation purposes. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateRefundRequest} opts.CreateRefundRequest The request body to create a refund order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Refund}
     */
    createRefund(opts) {
      return this.createRefundWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create settlement request
     * This operation creates a settlement request to withdraw available balances.   You can include multiple merchants and cryptocurrencies in a single settlement request. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSettlementRequestRequest} [CreateSettlementRequestRequest] The request body to create a settlement request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Settlement} and HTTP response
     */
    createSettlementRequestWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['CreateSettlementRequestRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Settlement;
      return this.apiClient.callApi(
        '/payments/settlement_requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create settlement request
     * This operation creates a settlement request to withdraw available balances.   You can include multiple merchants and cryptocurrencies in a single settlement request. 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateSettlementRequestRequest} opts.CreateSettlementRequestRequest The request body to create a settlement request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Settlement}
     */
    createSettlementRequest(opts) {
      return this.createSettlementRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a subscription action
     * This operation creates a subscription action. 
     * @param {Object} opts Optional parameters
     * @param {module:model/PaymentCreateSubscriptionAction} [PaymentCreateSubscriptionAction] The request body to create subscription action.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentSubscriptionAction} and HTTP response
     */
    createSubscriptionActionWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['PaymentCreateSubscriptionAction'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentSubscriptionAction;
      return this.apiClient.callApi(
        '/payments/subscription_actions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a subscription action
     * This operation creates a subscription action. 
     * @param {Object} opts Optional parameters
     * @param {module:model/PaymentCreateSubscriptionAction} opts.PaymentCreateSubscriptionAction The request body to create subscription action.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentSubscriptionAction}
     */
    createSubscriptionAction(opts) {
      return this.createSubscriptionActionWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create subscription plan
     * This operation creates a subscription plan. 
     * @param {Object} opts Optional parameters
     * @param {module:model/PaymentCreateSubscriptionPlan} [PaymentCreateSubscriptionPlan] The request body to create subscription plan.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentSubscriptionPlan} and HTTP response
     */
    createSubscriptionPlanWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['PaymentCreateSubscriptionPlan'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentSubscriptionPlan;
      return this.apiClient.callApi(
        '/payments/subscription_plans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create subscription plan
     * This operation creates a subscription plan. 
     * @param {Object} opts Optional parameters
     * @param {module:model/PaymentCreateSubscriptionPlan} opts.PaymentCreateSubscriptionPlan The request body to create subscription plan.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentSubscriptionPlan}
     */
    createSubscriptionPlan(opts) {
      return this.createSubscriptionPlanWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete crypto address
     * This operation deletes a crypto address. 
     * @param {String} crypto_address_id The crypto address ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteCryptoAddress201Response} and HTTP response
     */
    deleteCryptoAddressWithHttpInfo(crypto_address_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'crypto_address_id' is set
      if (crypto_address_id === undefined || crypto_address_id === null) {
        throw new Error("Missing the required parameter 'crypto_address_id' when calling deleteCryptoAddress");
      }

      let pathParams = {
        'crypto_address_id': crypto_address_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteCryptoAddress201Response;
      return this.apiClient.callApi(
        '/payments/crypto_addresses/{crypto_address_id}/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete crypto address
     * This operation deletes a crypto address. 
     * @param {String} crypto_address_id The crypto address ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteCryptoAddress201Response}
     */
    deleteCryptoAddress(crypto_address_id) {
      return this.deleteCryptoAddressWithHttpInfo(crypto_address_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get exchange rate
     * This operation retrieves the current exchange rate between a specified currency pair. 
     * @param {String} token_id The token ID, which identifies the cryptocurrency. Supported values:    - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param {String} currency The fiat currency. Currently, only `USD` is supported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetExchangeRate200Response} and HTTP response
     */
    getExchangeRateWithHttpInfo(token_id, currency) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling getExchangeRate");
      }
      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling getExchangeRate");
      }

      let pathParams = {
        'token_id': token_id,
        'currency': currency
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetExchangeRate200Response;
      return this.apiClient.callApi(
        '/payments/exchange_rates/{token_id}/{currency}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get exchange rate
     * This operation retrieves the current exchange rate between a specified currency pair. 
     * @param {String} token_id The token ID, which identifies the cryptocurrency. Supported values:    - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param {String} currency The fiat currency. Currently, only `USD` is supported.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetExchangeRate200Response}
     */
    getExchangeRate(token_id, currency) {
      return this.getExchangeRateWithHttpInfo(token_id, currency)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get payer balance by address
     * This operation retrieves aggregated balance details for a specific token and payer, with amounts grouped by address. 
     * @param {String} payer_id Unique payer identifier on the Cobo side, auto-generated by the system.
     * @param {String} token_id The token ID, which identifies the cryptocurrency. Supported values:    - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param {Object} opts Optional parameters
     * @param {String} [merchant_id] The merchant ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ReceivedAmountPerAddress>} and HTTP response
     */
    getPayerBalanceByAddressWithHttpInfo(payer_id, token_id, opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'payer_id' is set
      if (payer_id === undefined || payer_id === null) {
        throw new Error("Missing the required parameter 'payer_id' when calling getPayerBalanceByAddress");
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling getPayerBalanceByAddress");
      }

      let pathParams = {
      };
      let queryParams = {
        'merchant_id': opts['merchant_id'],
        'payer_id': payer_id,
        'token_id': token_id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ReceivedAmountPerAddress];
      return this.apiClient.callApi(
        '/payments/balance/payer/address', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get payer balance by address
     * This operation retrieves aggregated balance details for a specific token and payer, with amounts grouped by address. 
     * @param {String} payer_id Unique payer identifier on the Cobo side, auto-generated by the system.
     * @param {String} token_id The token ID, which identifies the cryptocurrency. Supported values:    - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param {Object} opts Optional parameters
     * @param {String} opts.merchant_id The merchant ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ReceivedAmountPerAddress>}
     */
    getPayerBalanceByAddress(payer_id, token_id, opts) {
      return this.getPayerBalanceByAddressWithHttpInfo(payer_id, token_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get pay-in order information
     * This operation retrieves details of a specific pay-in order. 
     * @param {String} order_id The pay-in order ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Order} and HTTP response
     */
    getPaymentOrderDetailByIdWithHttpInfo(order_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'order_id' is set
      if (order_id === undefined || order_id === null) {
        throw new Error("Missing the required parameter 'order_id' when calling getPaymentOrderDetailById");
      }

      let pathParams = {
        'order_id': order_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/payments/orders/{order_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get pay-in order information
     * This operation retrieves details of a specific pay-in order. 
     * @param {String} order_id The pay-in order ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Order}
     */
    getPaymentOrderDetailById(order_id) {
      return this.getPaymentOrderDetailByIdWithHttpInfo(order_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get psp balance
     * This operation retrieves the information of psp balance. 
     * @param {String} token_id The token ID, which identifies the cryptocurrency. Supported values:    - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PspBalance} and HTTP response
     */
    getPspBalanceWithHttpInfo(token_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling getPspBalance");
      }

      let pathParams = {
      };
      let queryParams = {
        'token_id': token_id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PspBalance;
      return this.apiClient.callApi(
        '/payments/balance/psp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get psp balance
     * This operation retrieves the information of psp balance. 
     * @param {String} token_id The token ID, which identifies the cryptocurrency. Supported values:    - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PspBalance}
     */
    getPspBalance(token_id) {
      return this.getPspBalanceWithHttpInfo(token_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get refund order information
     * This operation retrieves the detailed information about a specified refund order. 
     * @param {String} refund_id The refund order ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Refund} and HTTP response
     */
    getRefundDetailByIdWithHttpInfo(refund_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'refund_id' is set
      if (refund_id === undefined || refund_id === null) {
        throw new Error("Missing the required parameter 'refund_id' when calling getRefundDetailById");
      }

      let pathParams = {
        'refund_id': refund_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Refund;
      return this.apiClient.callApi(
        '/payments/refunds/{refund_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get refund order information
     * This operation retrieves the detailed information about a specified refund order. 
     * @param {String} refund_id The refund order ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Refund}
     */
    getRefundDetailById(refund_id) {
      return this.getRefundDetailByIdWithHttpInfo(refund_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all refund orders
     * This operation retrieves the information of all refund orders. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} [after] This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @param {String} [merchant_id] The merchant ID.
     * @param {String} [request_id] The request ID.
     * @param {String} [statuses] A list of  statuses of order, refund or settle request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetRefunds200Response} and HTTP response
     */
    getRefundsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'merchant_id': opts['merchant_id'],
        'request_id': opts['request_id'],
        'statuses': opts['statuses']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRefunds200Response;
      return this.apiClient.callApi(
        '/payments/refunds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all refund orders
     * This operation retrieves the information of all refund orders. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} opts.after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @param {String} opts.merchant_id The merchant ID.
     * @param {String} opts.request_id The request ID.
     * @param {String} opts.statuses A list of  statuses of order, refund or settle request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetRefunds200Response}
     */
    getRefunds(opts) {
      return this.getRefundsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get settlement request information
     * This operation retrieves the information of a specific settlement request. 
     * @param {String} settlement_request_id The settlement request ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Settlement} and HTTP response
     */
    getSettlementByIdWithHttpInfo(settlement_request_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'settlement_request_id' is set
      if (settlement_request_id === undefined || settlement_request_id === null) {
        throw new Error("Missing the required parameter 'settlement_request_id' when calling getSettlementById");
      }

      let pathParams = {
        'settlement_request_id': settlement_request_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Settlement;
      return this.apiClient.callApi(
        '/payments/settlement_requests/{settlement_request_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get settlement request information
     * This operation retrieves the information of a specific settlement request. 
     * @param {String} settlement_request_id The settlement request ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Settlement}
     */
    getSettlementById(settlement_request_id) {
      return this.getSettlementByIdWithHttpInfo(settlement_request_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get withdrawable balances
     * This operation retrieves the current withdrawable balances of specified merchants or the developer. 
     * @param {Object} opts Optional parameters
     * @param {String} [merchant_ids] A list of merchant IDs to query.
     * @param {String} [currency = 'USD')] The currency for the operation. Currently, only `USD` is supported.
     * @param {module:model/AcquiringType} [acquiring_type] AcquiringType defines the acquisition logic used in the payment flow: - `Order`: Each order is created with a specific amount and associated payment request. Funds are settled on a per-order basis. - `TopUp`: Recharge-style flow where funds are topped up to a payer balance or account. Useful for flexible or usage-based payment models. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetSettlementInfoByIds200Response} and HTTP response
     */
    getSettlementInfoByIdsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'merchant_ids': opts['merchant_ids'],
        'currency': opts['currency'],
        'acquiring_type': opts['acquiring_type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSettlementInfoByIds200Response;
      return this.apiClient.callApi(
        '/payments/settlement_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get withdrawable balances
     * This operation retrieves the current withdrawable balances of specified merchants or the developer. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.merchant_ids A list of merchant IDs to query.
     * @param {String} opts.currency The currency for the operation. Currently, only `USD` is supported. (default to 'USD')
     * @param {module:model/AcquiringType} opts.acquiring_type AcquiringType defines the acquisition logic used in the payment flow: - `Order`: Each order is created with a specific amount and associated payment request. Funds are settled on a per-order basis. - `TopUp`: Recharge-style flow where funds are topped up to a payer balance or account. Useful for flexible or usage-based payment models. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetSettlementInfoByIds200Response}
     */
    getSettlementInfoByIds(opts) {
      return this.getSettlementInfoByIdsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get subscription by id
     * This operation retrieves the information of subscription detail. You can filter the result by subscription_id. 
     * @param {String} subscription_id A unique identifier subscription.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentSubscriptionDetail} and HTTP response
     */
    getSubscriptionByIdWithHttpInfo(subscription_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'subscription_id' is set
      if (subscription_id === undefined || subscription_id === null) {
        throw new Error("Missing the required parameter 'subscription_id' when calling getSubscriptionById");
      }

      let pathParams = {
        'subscription_id': subscription_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentSubscriptionDetail;
      return this.apiClient.callApi(
        '/payments/subscriptions/{subscription_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get subscription by id
     * This operation retrieves the information of subscription detail. You can filter the result by subscription_id. 
     * @param {String} subscription_id A unique identifier subscription.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentSubscriptionDetail}
     */
    getSubscriptionById(subscription_id) {
      return this.getSubscriptionByIdWithHttpInfo(subscription_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get subscription plan by id
     * This operation retrieves the information of subscription plan detail. You can filter the result by subscription_id. 
     * @param {String} plan_id A unique identifier subscription.
     * @param {String} token_id The token ID, which identifies the cryptocurrency. Supported values:    - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentSubscriptionPlanDetail} and HTTP response
     */
    getSubscriptionPlanByIdWithHttpInfo(plan_id, token_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'plan_id' is set
      if (plan_id === undefined || plan_id === null) {
        throw new Error("Missing the required parameter 'plan_id' when calling getSubscriptionPlanById");
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling getSubscriptionPlanById");
      }

      let pathParams = {
        'plan_id': plan_id
      };
      let queryParams = {
        'token_id': token_id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaymentSubscriptionPlanDetail;
      return this.apiClient.callApi(
        '/payments/subscription_plans/{plan_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get subscription plan by id
     * This operation retrieves the information of subscription plan detail. You can filter the result by subscription_id. 
     * @param {String} plan_id A unique identifier subscription.
     * @param {String} token_id The token ID, which identifies the cryptocurrency. Supported values:    - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentSubscriptionPlanDetail}
     */
    getSubscriptionPlanById(plan_id, token_id) {
      return this.getSubscriptionPlanByIdWithHttpInfo(plan_id, token_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get top-up address
     * Get a top-up address for certain payer under merchant. 
     * @param {String} token_id The token ID, which identifies the cryptocurrency. Supported values:    - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param {String} custom_payer_id Unique customer identifier on the merchant side, used to allocate a dedicated top-up address 
     * @param {Object} opts Optional parameters
     * @param {String} [merchant_id] The merchant ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TopUpAddress} and HTTP response
     */
    getTopUpAddressWithHttpInfo(token_id, custom_payer_id, opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling getTopUpAddress");
      }
      // verify the required parameter 'custom_payer_id' is set
      if (custom_payer_id === undefined || custom_payer_id === null) {
        throw new Error("Missing the required parameter 'custom_payer_id' when calling getTopUpAddress");
      }

      let pathParams = {
      };
      let queryParams = {
        'merchant_id': opts['merchant_id'],
        'token_id': token_id,
        'custom_payer_id': custom_payer_id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TopUpAddress;
      return this.apiClient.callApi(
        '/payments/topup/address', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get top-up address
     * Get a top-up address for certain payer under merchant. 
     * @param {String} token_id The token ID, which identifies the cryptocurrency. Supported values:    - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param {String} custom_payer_id Unique customer identifier on the merchant side, used to allocate a dedicated top-up address 
     * @param {Object} opts Optional parameters
     * @param {String} opts.merchant_id The merchant ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TopUpAddress}
     */
    getTopUpAddress(token_id, custom_payer_id, opts) {
      return this.getTopUpAddressWithHttpInfo(token_id, custom_payer_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all bank accounts
     * This operation retrieves the information of all bank accounts registered. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/BankAccount>} and HTTP response
     */
    listBankAccountsWithHttpInfo() {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [BankAccount];
      return this.apiClient.callApi(
        '/payments/bank_accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all bank accounts
     * This operation retrieves the information of all bank accounts registered. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/BankAccount>}
     */
    listBankAccounts() {
      return this.listBankAccountsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List crypto addresses
     * Retrieve a list of cryptocurrency addresses previously created for a given `token_id`. 
     * @param {Object} opts Optional parameters
     * @param {String} [token_id] The token ID, which identifies the cryptocurrency. Supported values:    - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CryptoAddress>} and HTTP response
     */
    listCryptoAddressesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'token_id': opts['token_id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CryptoAddress];
      return this.apiClient.callApi(
        '/payments/crypto_addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List crypto addresses
     * Retrieve a list of cryptocurrency addresses previously created for a given `token_id`. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.token_id The token ID, which identifies the cryptocurrency. Supported values:    - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CryptoAddress>}
     */
    listCryptoAddresses(opts) {
      return this.listCryptoAddressesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List force sweep requests
     * This operation retrieves the information of force_sweep requests. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} [after] This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @param {String} [request_id] The request ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListForcedSweepRequests200Response} and HTTP response
     */
    listForcedSweepRequestsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'request_id': opts['request_id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListForcedSweepRequests200Response;
      return this.apiClient.callApi(
        '/payments/force_sweep_requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List force sweep requests
     * This operation retrieves the information of force_sweep requests. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} opts.after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @param {String} opts.request_id The request ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListForcedSweepRequests200Response}
     */
    listForcedSweepRequests(opts) {
      return this.listForcedSweepRequestsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List merchant balances
     * This operation retrieves the information of merchant balances. 
     * @param {String} token_id The token ID, which identifies the cryptocurrency. Supported values:    - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param {module:model/AcquiringType} acquiring_type AcquiringType defines the acquisition logic used in the payment flow: - `Order`: Each order is created with a specific amount and associated payment request. Funds are settled on a per-order basis. - `TopUp`: Recharge-style flow where funds are topped up to a payer balance or account. Useful for flexible or usage-based payment models. 
     * @param {Object} opts Optional parameters
     * @param {String} [merchant_ids] A list of merchant IDs to query.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMerchantBalances200Response} and HTTP response
     */
    listMerchantBalancesWithHttpInfo(token_id, acquiring_type, opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling listMerchantBalances");
      }
      // verify the required parameter 'acquiring_type' is set
      if (acquiring_type === undefined || acquiring_type === null) {
        throw new Error("Missing the required parameter 'acquiring_type' when calling listMerchantBalances");
      }

      let pathParams = {
      };
      let queryParams = {
        'merchant_ids': opts['merchant_ids'],
        'token_id': token_id,
        'acquiring_type': acquiring_type
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMerchantBalances200Response;
      return this.apiClient.callApi(
        '/payments/balance/merchants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List merchant balances
     * This operation retrieves the information of merchant balances. 
     * @param {String} token_id The token ID, which identifies the cryptocurrency. Supported values:    - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param {module:model/AcquiringType} acquiring_type AcquiringType defines the acquisition logic used in the payment flow: - `Order`: Each order is created with a specific amount and associated payment request. Funds are settled on a per-order basis. - `TopUp`: Recharge-style flow where funds are topped up to a payer balance or account. Useful for flexible or usage-based payment models. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.merchant_ids A list of merchant IDs to query.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMerchantBalances200Response}
     */
    listMerchantBalances(token_id, acquiring_type, opts) {
      return this.listMerchantBalancesWithHttpInfo(token_id, acquiring_type, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all merchants
     * This operation retrieves the information of all merchants.   You can filter the results by using a keyword for fuzzy search on merchant names or by specifying a wallet ID. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} [after] This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @param {String} [keyword] A search term used for fuzzy matching of merchant names.
     * @param {String} [wallet_id] The wallet ID.
     * @param {module:model/WalletSetup} [wallet_setup] WalletSetup defines the type of funds used in the merchant account, either \"Shared\" or \"Separate\" is allowed when creating a merchant: - `Default`: Wallet of psp owned default merchant. - `Shared`: Shared wallet of non-psp owned merchants. - `Separate`: Separate wallet of non-psp owned merchants. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMerchants200Response} and HTTP response
     */
    listMerchantsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'keyword': opts['keyword'],
        'wallet_id': opts['wallet_id'],
        'wallet_setup': opts['wallet_setup']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMerchants200Response;
      return this.apiClient.callApi(
        '/payments/merchants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all merchants
     * This operation retrieves the information of all merchants.   You can filter the results by using a keyword for fuzzy search on merchant names or by specifying a wallet ID. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} opts.after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @param {String} opts.keyword A search term used for fuzzy matching of merchant names.
     * @param {String} opts.wallet_id The wallet ID.
     * @param {module:model/WalletSetup} opts.wallet_setup WalletSetup defines the type of funds used in the merchant account, either \"Shared\" or \"Separate\" is allowed when creating a merchant: - `Default`: Wallet of psp owned default merchant. - `Shared`: Shared wallet of non-psp owned merchants. - `Separate`: Separate wallet of non-psp owned merchants. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMerchants200Response}
     */
    listMerchants(opts) {
      return this.listMerchantsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all pay-in orders
     * This operation retrieves the information of all pay-in orders. You can filter the result by merchant ID. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} [after] This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @param {String} [merchant_id] The merchant ID.
     * @param {String} [psp_order_id] The PSP order ID.
     * @param {String} [statuses] A list of  statuses of order, refund or settle request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListPaymentOrders200Response} and HTTP response
     */
    listPaymentOrdersWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'merchant_id': opts['merchant_id'],
        'psp_order_id': opts['psp_order_id'],
        'statuses': opts['statuses']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPaymentOrders200Response;
      return this.apiClient.callApi(
        '/payments/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all pay-in orders
     * This operation retrieves the information of all pay-in orders. You can filter the result by merchant ID. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} opts.after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @param {String} opts.merchant_id The merchant ID.
     * @param {String} opts.psp_order_id The PSP order ID.
     * @param {String} opts.statuses A list of  statuses of order, refund or settle request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListPaymentOrders200Response}
     */
    listPaymentOrders(opts) {
      return this.listPaymentOrdersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all supported tokens
     * This operation retrieves the information of all supported tokens. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SupportedToken>} and HTTP response
     */
    listPaymentSupportedTokensWithHttpInfo() {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SupportedToken];
      return this.apiClient.callApi(
        '/payments/supported_tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all supported tokens
     * This operation retrieves the information of all supported tokens. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SupportedToken>}
     */
    listPaymentSupportedTokens() {
      return this.listPaymentSupportedTokensWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List payment wallet balances
     * This operation retrieves the information of payment wallet balances. 
     * @param {String} token_id The token ID, which identifies the cryptocurrency. Supported values:    - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param {Object} opts Optional parameters
     * @param {String} [wallet_ids] A list of wallet IDs to query.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListPaymentWalletBalances200Response} and HTTP response
     */
    listPaymentWalletBalancesWithHttpInfo(token_id, opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling listPaymentWalletBalances");
      }

      let pathParams = {
      };
      let queryParams = {
        'wallet_ids': opts['wallet_ids'],
        'token_id': token_id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPaymentWalletBalances200Response;
      return this.apiClient.callApi(
        '/payments/balance/payment_wallets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List payment wallet balances
     * This operation retrieves the information of payment wallet balances. 
     * @param {String} token_id The token ID, which identifies the cryptocurrency. Supported values:    - USDC: `ETH_USDC`, `ARBITRUM_USDC`, `SOL_USDC`, `BASE_USDC`, `MATIC_USDC`, `BSC_USDC`   - USDT: `TRON_USDT`, `ETH_USDT`, `ARBITRUM_USDT`, `SOL_USDT`, `BASE_USDT`, `MATIC_USDT`, `BSC_USDT` 
     * @param {Object} opts Optional parameters
     * @param {String} opts.wallet_ids A list of wallet IDs to query.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListPaymentWalletBalances200Response}
     */
    listPaymentWalletBalances(token_id, opts) {
      return this.listPaymentWalletBalancesWithHttpInfo(token_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all settlement details
     * This operation retrieves the information of all settlement details. You can filter the result by merchant ID or status. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} [after] This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @param {String} [merchant_id] The merchant ID.
     * @param {String} [statuses] A list of  statuses of order, refund or settle request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListSettlementDetails200Response} and HTTP response
     */
    listSettlementDetailsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'merchant_id': opts['merchant_id'],
        'statuses': opts['statuses']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSettlementDetails200Response;
      return this.apiClient.callApi(
        '/payments/settlement_details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all settlement details
     * This operation retrieves the information of all settlement details. You can filter the result by merchant ID or status. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} opts.after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @param {String} opts.merchant_id The merchant ID.
     * @param {String} opts.statuses A list of  statuses of order, refund or settle request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSettlementDetails200Response}
     */
    listSettlementDetails(opts) {
      return this.listSettlementDetailsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all settlement requests
     * This operation retrieves the information of all settlement requests. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} [after] This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @param {String} [request_id] The request ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListSettlementRequests200Response} and HTTP response
     */
    listSettlementRequestsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'request_id': opts['request_id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSettlementRequests200Response;
      return this.apiClient.callApi(
        '/payments/settlement_requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all settlement requests
     * This operation retrieves the information of all settlement requests. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} opts.after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @param {String} opts.request_id The request ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSettlementRequests200Response}
     */
    listSettlementRequests(opts) {
      return this.listSettlementRequestsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List subscription actions
     * This operation retrieves the information of subscription actions. You can filter the result by plan id. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} [after] This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @param {String} [plan_id] A unique identifier plan.
     * @param {String} [merchant_id] The merchant ID.
     * @param {String} [subscription_id] A unique identifier subscription.
     * @param {String} [request_id] The request ID.
     * @param {module:model/PaymentSubscriptionActionType} [action_type] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListSubscriptionActions200Response} and HTTP response
     */
    listSubscriptionActionsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'plan_id': opts['plan_id'],
        'merchant_id': opts['merchant_id'],
        'subscription_id': opts['subscription_id'],
        'request_id': opts['request_id'],
        'action_type': opts['action_type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSubscriptionActions200Response;
      return this.apiClient.callApi(
        '/payments/subscription_actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List subscription actions
     * This operation retrieves the information of subscription actions. You can filter the result by plan id. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} opts.after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @param {String} opts.plan_id A unique identifier plan.
     * @param {String} opts.merchant_id The merchant ID.
     * @param {String} opts.subscription_id A unique identifier subscription.
     * @param {String} opts.request_id The request ID.
     * @param {module:model/PaymentSubscriptionActionType} opts.action_type 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSubscriptionActions200Response}
     */
    listSubscriptionActions(opts) {
      return this.listSubscriptionActionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List subscription plans
     * This operation retrieves the information of subscription plans. You can filter the result by developer plan id. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} [after] This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @param {String} [developer_plan_id] A unique identifier assigned by the developer to track and identify individual subscription plan in their system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListSubscriptionPlans200Response} and HTTP response
     */
    listSubscriptionPlansWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'developer_plan_id': opts['developer_plan_id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSubscriptionPlans200Response;
      return this.apiClient.callApi(
        '/payments/subscription_plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List subscription plans
     * This operation retrieves the information of subscription plans. You can filter the result by developer plan id. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} opts.after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @param {String} opts.developer_plan_id A unique identifier assigned by the developer to track and identify individual subscription plan in their system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSubscriptionPlans200Response}
     */
    listSubscriptionPlans(opts) {
      return this.listSubscriptionPlansWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List subscriptions
     * This operation retrieves the information of subscriptions. You can filter the result by plan id. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} [after] This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @param {String} [plan_id] A unique identifier plan.
     * @param {String} [merchant_id] The merchant ID.
     * @param {String} [action_id] A unique identifier subscription action.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListSubscriptions200Response} and HTTP response
     */
    listSubscriptionsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'plan_id': opts['plan_id'],
        'merchant_id': opts['merchant_id'],
        'action_id': opts['action_id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSubscriptions200Response;
      return this.apiClient.callApi(
        '/payments/subscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List subscriptions
     * This operation retrieves the information of subscriptions. You can filter the result by plan id. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} opts.after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @param {String} opts.plan_id A unique identifier plan.
     * @param {String} opts.merchant_id The merchant ID.
     * @param {String} opts.action_id A unique identifier subscription action.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSubscriptions200Response}
     */
    listSubscriptions(opts) {
      return this.listSubscriptionsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List top-up payer accounts
     * This operation retrieves the accounts of all payers. You can filter the result by merchant ID and payer_id. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} [after] This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @param {String} [merchant_id] The merchant ID.
     * @param {String} [payer_id] Unique payer identifier on the Cobo side, auto-generated by the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTopUpPayerAccounts200Response} and HTTP response
     */
    listTopUpPayerAccountsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'merchant_id': opts['merchant_id'],
        'payer_id': opts['payer_id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTopUpPayerAccounts200Response;
      return this.apiClient.callApi(
        '/payments/topup/payer_accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List top-up payer accounts
     * This operation retrieves the accounts of all payers. You can filter the result by merchant ID and payer_id. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} opts.after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @param {String} opts.merchant_id The merchant ID.
     * @param {String} opts.payer_id Unique payer identifier on the Cobo side, auto-generated by the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTopUpPayerAccounts200Response}
     */
    listTopUpPayerAccounts(opts) {
      return this.listTopUpPayerAccountsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List top-up payers
     * This operation retrieves the information of all payers. You can filter the result by merchant ID and payer_id. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} [after] This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @param {String} [merchant_id] The merchant ID.
     * @param {String} [payer_id] Unique payer identifier on the Cobo side, auto-generated by the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTopUpPayers200Response} and HTTP response
     */
    listTopUpPayersWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'merchant_id': opts['merchant_id'],
        'payer_id': opts['payer_id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTopUpPayers200Response;
      return this.apiClient.callApi(
        '/payments/topup/payers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List top-up payers
     * This operation retrieves the information of all payers. You can filter the result by merchant ID and payer_id. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} opts.after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @param {String} opts.merchant_id The merchant ID.
     * @param {String} opts.payer_id Unique payer identifier on the Cobo side, auto-generated by the system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTopUpPayers200Response}
     */
    listTopUpPayers(opts) {
      return this.listTopUpPayersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Payment estimate fee
     * This operation to payment estimate fee. 
     * @param {Object} opts Optional parameters
     * @param {module:model/PaymentEstimateFeeRequest} [PaymentEstimateFeeRequest] The request body to create a estimated fee request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PaymentEstimateFee201Response} and HTTP response
     */
    paymentEstimateFeeWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['PaymentEstimateFeeRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentEstimateFee201Response;
      return this.apiClient.callApi(
        '/payments/estimate_fee', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Payment estimate fee
     * This operation to payment estimate fee. 
     * @param {Object} opts Optional parameters
     * @param {module:model/PaymentEstimateFeeRequest} opts.PaymentEstimateFeeRequest The request body to create a estimated fee request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PaymentEstimateFee201Response}
     */
    paymentEstimateFee(opts) {
      return this.paymentEstimateFeeWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update bank account
     * This operation updates the information of an existing bank account. 
     * @param {String} bank_account_id The bank account ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateBankAccountByIdRequest} [UpdateBankAccountByIdRequest] The request body for updating an existing bank account.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BankAccount} and HTTP response
     */
    updateBankAccountByIdWithHttpInfo(bank_account_id, opts) {
      opts = opts || {};
      let postBody = opts['UpdateBankAccountByIdRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'bank_account_id' is set
      if (bank_account_id === undefined || bank_account_id === null) {
        throw new Error("Missing the required parameter 'bank_account_id' when calling updateBankAccountById");
      }

      let pathParams = {
        'bank_account_id': bank_account_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BankAccount;
      return this.apiClient.callApi(
        '/payments/bank_accounts/{bank_account_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update bank account
     * This operation updates the information of an existing bank account. 
     * @param {String} bank_account_id The bank account ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateBankAccountByIdRequest} opts.UpdateBankAccountByIdRequest The request body for updating an existing bank account.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BankAccount}
     */
    updateBankAccountById(bank_account_id, opts) {
      return this.updateBankAccountByIdWithHttpInfo(bank_account_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update merchant
     * This operation updates the information of an existing merchant. 
     * @param {String} merchant_id The merchant ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMerchantByIdRequest} [UpdateMerchantByIdRequest] The request body to update a merchant.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Merchant} and HTTP response
     */
    updateMerchantByIdWithHttpInfo(merchant_id, opts) {
      opts = opts || {};
      let postBody = opts['UpdateMerchantByIdRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'merchant_id' is set
      if (merchant_id === undefined || merchant_id === null) {
        throw new Error("Missing the required parameter 'merchant_id' when calling updateMerchantById");
      }

      let pathParams = {
        'merchant_id': merchant_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Merchant;
      return this.apiClient.callApi(
        '/payments/merchants/{merchant_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update merchant
     * This operation updates the information of an existing merchant. 
     * @param {String} merchant_id The merchant ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMerchantByIdRequest} opts.UpdateMerchantByIdRequest The request body to update a merchant.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Merchant}
     */
    updateMerchantById(merchant_id, opts) {
      return this.updateMerchantByIdWithHttpInfo(merchant_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update pay-in order
     * This operation updates a pay-in order. Use this operation to expire a pay-in order that is no longer needed. 
     * @param {String} order_id The pay-in order ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdatePaymentOrderRequest} [UpdatePaymentOrderRequest] The request body to update a pay-in order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Order} and HTTP response
     */
    updatePaymentOrderWithHttpInfo(order_id, opts) {
      opts = opts || {};
      let postBody = opts['UpdatePaymentOrderRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'order_id' is set
      if (order_id === undefined || order_id === null) {
        throw new Error("Missing the required parameter 'order_id' when calling updatePaymentOrder");
      }

      let pathParams = {
        'order_id': order_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Order;
      return this.apiClient.callApi(
        '/payments/orders/{order_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update pay-in order
     * This operation updates a pay-in order. Use this operation to expire a pay-in order that is no longer needed. 
     * @param {String} order_id The pay-in order ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdatePaymentOrderRequest} opts.UpdatePaymentOrderRequest The request body to update a pay-in order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Order}
     */
    updatePaymentOrder(order_id, opts) {
      return this.updatePaymentOrderWithHttpInfo(order_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update refund order information
     * This operation updates a specified refund order. 
     * @param {String} refund_id The refund order ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateRefundByIdRequest} [UpdateRefundByIdRequest] The request body to update a refund order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Refund} and HTTP response
     */
    updateRefundByIdWithHttpInfo(refund_id, opts) {
      opts = opts || {};
      let postBody = opts['UpdateRefundByIdRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'refund_id' is set
      if (refund_id === undefined || refund_id === null) {
        throw new Error("Missing the required parameter 'refund_id' when calling updateRefundById");
      }

      let pathParams = {
        'refund_id': refund_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Refund;
      return this.apiClient.callApi(
        '/payments/refunds/{refund_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update refund order information
     * This operation updates a specified refund order. 
     * @param {String} refund_id The refund order ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateRefundByIdRequest} opts.UpdateRefundByIdRequest The request body to update a refund order.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Refund}
     */
    updateRefundById(refund_id, opts) {
      return this.updateRefundByIdWithHttpInfo(refund_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update top-up address
     * Update the top-up address for a payer under a specific merchant and token. 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateTopUpAddress} [UpdateTopUpAddress] The request body to update top up address.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TopUpAddress} and HTTP response
     */
    updateTopUpAddressWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['UpdateTopUpAddress'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TopUpAddress;
      return this.apiClient.callApi(
        '/payments/topup/address', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update top-up address
     * Update the top-up address for a payer under a specific merchant and token. 
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateTopUpAddress} opts.UpdateTopUpAddress The request body to update top up address.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TopUpAddress}
     */
    updateTopUpAddress(opts) {
      return this.updateTopUpAddressWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
