/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import EstimatedFee from '../model/EstimatedFee';
import GetTokenizationAllowlistActivation200Response from '../model/GetTokenizationAllowlistActivation200Response';
import ListTokenizationBlocklistAddresses200Response from '../model/ListTokenizationBlocklistAddresses200Response';
import TokenizationActivityInfo from '../model/TokenizationActivityInfo';
import TokenizationActivityStatus from '../model/TokenizationActivityStatus';
import TokenizationAllowlistActivationRequest from '../model/TokenizationAllowlistActivationRequest';
import TokenizationAllowlistAddressesResponse from '../model/TokenizationAllowlistAddressesResponse';
import TokenizationBurnTokenRequest from '../model/TokenizationBurnTokenRequest';
import TokenizationContractCallRequest from '../model/TokenizationContractCallRequest';
import TokenizationEstimateFeeRequest from '../model/TokenizationEstimateFeeRequest';
import TokenizationIssuedTokenRequest from '../model/TokenizationIssuedTokenRequest';
import TokenizationListActivitiesResponse from '../model/TokenizationListActivitiesResponse';
import TokenizationListEnabledChainsResponse from '../model/TokenizationListEnabledChainsResponse';
import TokenizationListHoldingsResponse from '../model/TokenizationListHoldingsResponse';
import TokenizationListTokenInfoResponse from '../model/TokenizationListTokenInfoResponse';
import TokenizationMintTokenRequest from '../model/TokenizationMintTokenRequest';
import TokenizationOperationResponse from '../model/TokenizationOperationResponse';
import TokenizationOperationType from '../model/TokenizationOperationType';
import TokenizationPauseTokenRequest from '../model/TokenizationPauseTokenRequest';
import TokenizationStatus from '../model/TokenizationStatus';
import TokenizationTokenDetailInfo from '../model/TokenizationTokenDetailInfo';
import TokenizationTokenStandard from '../model/TokenizationTokenStandard';
import TokenizationUnpauseTokenRequest from '../model/TokenizationUnpauseTokenRequest';
import TokenizationUpdateAllowlistAddressesRequest from '../model/TokenizationUpdateAllowlistAddressesRequest';
import TokenizationUpdateBlocklistAddressesRequest from '../model/TokenizationUpdateBlocklistAddressesRequest';

/**
* Tokenization service.
* @module api/TokenizationApi
*/
export default class TokenizationApi {

    /**
    * Constructs a new TokenizationApi. 
    * @alias module:api/TokenizationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Burn tokens
     * This operation burns tokens from a specified address. Creates a burn transaction that will decrease the token supply. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @param {Object} opts Optional parameters
     * @param {module:model/TokenizationBurnTokenRequest} [TokenizationBurnTokenRequest] The request body for burning tokens.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenizationOperationResponse} and HTTP response
     */
    burnTokenizationWithHttpInfo(token_id, opts) {
      opts = opts || {};
      let postBody = opts['TokenizationBurnTokenRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling burnTokenization");
      }

      let pathParams = {
        'token_id': token_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TokenizationOperationResponse;
      return this.apiClient.callApi(
        '/tokenization/tokens/{token_id}/burn', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Burn tokens
     * This operation burns tokens from a specified address. Creates a burn transaction that will decrease the token supply. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @param {Object} opts Optional parameters
     * @param {module:model/TokenizationBurnTokenRequest} opts.TokenizationBurnTokenRequest The request body for burning tokens.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenizationOperationResponse}
     */
    burnTokenization(token_id, opts) {
      return this.burnTokenizationWithHttpInfo(token_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Estimate tokenization operation fee
     * This operation estimates the fee required for tokenization operations. For EVM-based chains, this calculates the gas cost for the specified operation. 
     * @param {module:model/TokenizationEstimateFeeRequest} TokenizationEstimateFeeRequest The request body to estimate tokenization operation fee.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EstimatedFee} and HTTP response
     */
    estimateTokenizationFeeWithHttpInfo(TokenizationEstimateFeeRequest) {
      let postBody = TokenizationEstimateFeeRequest;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'TokenizationEstimateFeeRequest' is set
      if (TokenizationEstimateFeeRequest === undefined || TokenizationEstimateFeeRequest === null) {
        throw new Error("Missing the required parameter 'TokenizationEstimateFeeRequest' when calling estimateTokenizationFee");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EstimatedFee;
      return this.apiClient.callApi(
        '/tokenization/estimate_fee', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Estimate tokenization operation fee
     * This operation estimates the fee required for tokenization operations. For EVM-based chains, this calculates the gas cost for the specified operation. 
     * @param {module:model/TokenizationEstimateFeeRequest} TokenizationEstimateFeeRequest The request body to estimate tokenization operation fee.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EstimatedFee}
     */
    estimateTokenizationFee(TokenizationEstimateFeeRequest) {
      return this.estimateTokenizationFeeWithHttpInfo(TokenizationEstimateFeeRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get tokenization activity details
     * This operation retrieves the detailed information for a specific tokenization activity by its ID. 
     * @param {String} activity_id The ID of the activity.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenizationActivityInfo} and HTTP response
     */
    getTokenizationActivityWithHttpInfo(activity_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'activity_id' is set
      if (activity_id === undefined || activity_id === null) {
        throw new Error("Missing the required parameter 'activity_id' when calling getTokenizationActivity");
      }

      let pathParams = {
        'activity_id': activity_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TokenizationActivityInfo;
      return this.apiClient.callApi(
        '/tokenization/activities/{activity_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get tokenization activity details
     * This operation retrieves the detailed information for a specific tokenization activity by its ID. 
     * @param {String} activity_id The ID of the activity.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenizationActivityInfo}
     */
    getTokenizationActivity(activity_id) {
      return this.getTokenizationActivityWithHttpInfo(activity_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get allowlist activation status
     * This operation retrieves the allowlist activation status of the token contract. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetTokenizationAllowlistActivation200Response} and HTTP response
     */
    getTokenizationAllowlistActivationWithHttpInfo(token_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling getTokenizationAllowlistActivation");
      }

      let pathParams = {
        'token_id': token_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTokenizationAllowlistActivation200Response;
      return this.apiClient.callApi(
        '/tokenization/tokens/{token_id}/allowlist/activation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get allowlist activation status
     * This operation retrieves the allowlist activation status of the token contract. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetTokenizationAllowlistActivation200Response}
     */
    getTokenizationAllowlistActivation(token_id) {
      return this.getTokenizationAllowlistActivationWithHttpInfo(token_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get token details
     * This operation retrieves the detailed information for a specific issued token by its ID. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenizationTokenDetailInfo} and HTTP response
     */
    getTokenizationInfoWithHttpInfo(token_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling getTokenizationInfo");
      }

      let pathParams = {
        'token_id': token_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TokenizationTokenDetailInfo;
      return this.apiClient.callApi(
        '/tokenization/tokens/{token_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get token details
     * This operation retrieves the detailed information for a specific issued token by its ID. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenizationTokenDetailInfo}
     */
    getTokenizationInfo(token_id) {
      return this.getTokenizationInfoWithHttpInfo(token_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Issue token
     * This operation issues a new token contract. It supports various blockchain platforms.  For EVM-based chains, this involves issuing a new smart contract from a template. 
     * @param {module:model/TokenizationIssuedTokenRequest} TokenizationIssuedTokenRequest The request body to issue a new token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenizationOperationResponse} and HTTP response
     */
    issueTokenWithHttpInfo(TokenizationIssuedTokenRequest) {
      let postBody = TokenizationIssuedTokenRequest;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'TokenizationIssuedTokenRequest' is set
      if (TokenizationIssuedTokenRequest === undefined || TokenizationIssuedTokenRequest === null) {
        throw new Error("Missing the required parameter 'TokenizationIssuedTokenRequest' when calling issueToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TokenizationOperationResponse;
      return this.apiClient.callApi(
        '/tokenization/tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Issue token
     * This operation issues a new token contract. It supports various blockchain platforms.  For EVM-based chains, this involves issuing a new smart contract from a template. 
     * @param {module:model/TokenizationIssuedTokenRequest} TokenizationIssuedTokenRequest The request body to issue a new token.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenizationOperationResponse}
     */
    issueToken(TokenizationIssuedTokenRequest) {
      return this.issueTokenWithHttpInfo(TokenizationIssuedTokenRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List issued tokens
     * This operation retrieves a list of tokens issued by the organization. Returns issued token information including total supply, holdings, and token status. 
     * @param {Object} opts Optional parameters
     * @param {String} [chain_id] The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).
     * @param {String} [token_id] The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).
     * @param {module:model/TokenizationTokenStandard} [token_standard] Filter by token standard.
     * @param {module:model/TokenizationStatus} [status] Filter by token status.
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenizationListTokenInfoResponse} and HTTP response
     */
    listIssuedTokensWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'chain_id': opts['chain_id'],
        'token_id': opts['token_id'],
        'token_standard': opts['token_standard'],
        'status': opts['status'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TokenizationListTokenInfoResponse;
      return this.apiClient.callApi(
        '/tokenization/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List issued tokens
     * This operation retrieves a list of tokens issued by the organization. Returns issued token information including total supply, holdings, and token status. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.chain_id The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).
     * @param {String} opts.token_id The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).
     * @param {module:model/TokenizationTokenStandard} opts.token_standard Filter by token standard.
     * @param {module:model/TokenizationStatus} opts.status Filter by token status.
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenizationListTokenInfoResponse}
     */
    listIssuedTokens(opts) {
      return this.listIssuedTokensWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List tokenization activities
     * This operation retrieves a list of tokenization activities. 
     * @param {Object} opts Optional parameters
     * @param {String} [token_id] The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).
     * @param {module:model/TokenizationOperationType} [activity_type] Filter by tokenization activity type.
     * @param {module:model/TokenizationActivityStatus} [activity_status] Filter by tokenization activity status.
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {module:model/String} [direction = 'ASC')] The sort direction. Possible values include:   - `ASC`: Sort the results in ascending order.   - `DESC`: Sort the results in descending order. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenizationListActivitiesResponse} and HTTP response
     */
    listTokenizationActivitiesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'token_id': opts['token_id'],
        'activity_type': opts['activity_type'],
        'activity_status': opts['activity_status'],
        'limit': opts['limit'],
        'after': opts['after'],
        'before': opts['before'],
        'direction': opts['direction']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TokenizationListActivitiesResponse;
      return this.apiClient.callApi(
        '/tokenization/activities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List tokenization activities
     * This operation retrieves a list of tokenization activities. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.token_id The token ID, which is the unique identifier of a token. You can retrieve the IDs of all the tokens you can use by calling [List enabled tokens](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-tokens).
     * @param {module:model/TokenizationOperationType} opts.activity_type Filter by tokenization activity type.
     * @param {module:model/TokenizationActivityStatus} opts.activity_status Filter by tokenization activity status.
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {module:model/String} opts.direction The sort direction. Possible values include:   - `ASC`: Sort the results in ascending order.   - `DESC`: Sort the results in descending order.  (default to 'ASC')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenizationListActivitiesResponse}
     */
    listTokenizationActivities(opts) {
      return this.listTokenizationActivitiesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List addresses on allowlist
     * This operation lists addresses on the allowlist. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {module:model/String} [direction = 'ASC')] The sort direction. Possible values include:   - `ASC`: Sort the results in ascending order.   - `DESC`: Sort the results in descending order. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenizationAllowlistAddressesResponse} and HTTP response
     */
    listTokenizationAllowlistAddressesWithHttpInfo(token_id, opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling listTokenizationAllowlistAddresses");
      }

      let pathParams = {
        'token_id': token_id
      };
      let queryParams = {
        'limit': opts['limit'],
        'after': opts['after'],
        'before': opts['before'],
        'direction': opts['direction']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TokenizationAllowlistAddressesResponse;
      return this.apiClient.callApi(
        '/tokenization/tokens/{token_id}/allowlist/addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List addresses on allowlist
     * This operation lists addresses on the allowlist. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {module:model/String} opts.direction The sort direction. Possible values include:   - `ASC`: Sort the results in ascending order.   - `DESC`: Sort the results in descending order.  (default to 'ASC')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenizationAllowlistAddressesResponse}
     */
    listTokenizationAllowlistAddresses(token_id, opts) {
      return this.listTokenizationAllowlistAddressesWithHttpInfo(token_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List addresses on blocklist
     * This operation lists addresses on the blocklist. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {module:model/String} [direction = 'ASC')] The sort direction. Possible values include:   - `ASC`: Sort the results in ascending order.   - `DESC`: Sort the results in descending order. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTokenizationBlocklistAddresses200Response} and HTTP response
     */
    listTokenizationBlocklistAddressesWithHttpInfo(token_id, opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling listTokenizationBlocklistAddresses");
      }

      let pathParams = {
        'token_id': token_id
      };
      let queryParams = {
        'limit': opts['limit'],
        'after': opts['after'],
        'before': opts['before'],
        'direction': opts['direction']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTokenizationBlocklistAddresses200Response;
      return this.apiClient.callApi(
        '/tokenization/tokens/{token_id}/blocklist/addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List addresses on blocklist
     * This operation lists addresses on the blocklist. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {module:model/String} opts.direction The sort direction. Possible values include:   - `ASC`: Sort the results in ascending order.   - `DESC`: Sort the results in descending order.  (default to 'ASC')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTokenizationBlocklistAddresses200Response}
     */
    listTokenizationBlocklistAddresses(token_id, opts) {
      return this.listTokenizationBlocklistAddressesWithHttpInfo(token_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get token holdings information
     * This operation retrieves the holdings information for a specific issued token, showing which wallets hold the token and their respective balances. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenizationListHoldingsResponse} and HTTP response
     */
    listTokenizationHoldingsWithHttpInfo(token_id, opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling listTokenizationHoldings");
      }

      let pathParams = {
        'token_id': token_id
      };
      let queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TokenizationListHoldingsResponse;
      return this.apiClient.callApi(
        '/tokenization/tokens/{token_id}/holdings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get token holdings information
     * This operation retrieves the holdings information for a specific issued token, showing which wallets hold the token and their respective balances. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenizationListHoldingsResponse}
     */
    listTokenizationHoldings(token_id, opts) {
      return this.listTokenizationHoldingsWithHttpInfo(token_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List supported chains for tokenization
     * This operation retrieves a list of tokenization supported chains. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenizationListEnabledChainsResponse} and HTTP response
     */
    listTokenizationSupportedChainsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'after': opts['after'],
        'before': opts['before']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TokenizationListEnabledChainsResponse;
      return this.apiClient.callApi(
        '/tokenization/enabled_chains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List supported chains for tokenization
     * This operation retrieves a list of tokenization supported chains. 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenizationListEnabledChainsResponse}
     */
    listTokenizationSupportedChains(opts) {
      return this.listTokenizationSupportedChainsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Mint tokens
     * This operation mints new tokens to a specified address. Creates a mint transaction that will increase the token supply. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @param {module:model/TokenizationMintTokenRequest} TokenizationMintTokenRequest The request body for minting tokens.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenizationOperationResponse} and HTTP response
     */
    mintTokenizationWithHttpInfo(token_id, TokenizationMintTokenRequest) {
      let postBody = TokenizationMintTokenRequest;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling mintTokenization");
      }
      // verify the required parameter 'TokenizationMintTokenRequest' is set
      if (TokenizationMintTokenRequest === undefined || TokenizationMintTokenRequest === null) {
        throw new Error("Missing the required parameter 'TokenizationMintTokenRequest' when calling mintTokenization");
      }

      let pathParams = {
        'token_id': token_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TokenizationOperationResponse;
      return this.apiClient.callApi(
        '/tokenization/tokens/{token_id}/mint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Mint tokens
     * This operation mints new tokens to a specified address. Creates a mint transaction that will increase the token supply. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @param {module:model/TokenizationMintTokenRequest} TokenizationMintTokenRequest The request body for minting tokens.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenizationOperationResponse}
     */
    mintTokenization(token_id, TokenizationMintTokenRequest) {
      return this.mintTokenizationWithHttpInfo(token_id, TokenizationMintTokenRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Pause token contract
     * This operation pauses the token contract, temporarily halting token operations and transfers. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @param {Object} opts Optional parameters
     * @param {module:model/TokenizationPauseTokenRequest} [TokenizationPauseTokenRequest] The request body for pausing tokens.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenizationOperationResponse} and HTTP response
     */
    pauseTokenizationWithHttpInfo(token_id, opts) {
      opts = opts || {};
      let postBody = opts['TokenizationPauseTokenRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling pauseTokenization");
      }

      let pathParams = {
        'token_id': token_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TokenizationOperationResponse;
      return this.apiClient.callApi(
        '/tokenization/tokens/{token_id}/pause', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Pause token contract
     * This operation pauses the token contract, temporarily halting token operations and transfers. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @param {Object} opts Optional parameters
     * @param {module:model/TokenizationPauseTokenRequest} opts.TokenizationPauseTokenRequest The request body for pausing tokens.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenizationOperationResponse}
     */
    pauseTokenization(token_id, opts) {
      return this.pauseTokenizationWithHttpInfo(token_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Call token contract
     * This operation performs a contract call on the token contract. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @param {Object} opts Optional parameters
     * @param {module:model/TokenizationContractCallRequest} [TokenizationContractCallRequest] The request body for contract call.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenizationOperationResponse} and HTTP response
     */
    tokenizationContractCallWithHttpInfo(token_id, opts) {
      opts = opts || {};
      let postBody = opts['TokenizationContractCallRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling tokenizationContractCall");
      }

      let pathParams = {
        'token_id': token_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TokenizationOperationResponse;
      return this.apiClient.callApi(
        '/tokenization/tokens/{token_id}/contract_call', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Call token contract
     * This operation performs a contract call on the token contract. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @param {Object} opts Optional parameters
     * @param {module:model/TokenizationContractCallRequest} opts.TokenizationContractCallRequest The request body for contract call.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenizationOperationResponse}
     */
    tokenizationContractCall(token_id, opts) {
      return this.tokenizationContractCallWithHttpInfo(token_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Unpause token contract
     * This operation unpauses the token contract, resuming token operations and transfers. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @param {Object} opts Optional parameters
     * @param {module:model/TokenizationUnpauseTokenRequest} [TokenizationUnpauseTokenRequest] The request body for unpausing tokens.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenizationOperationResponse} and HTTP response
     */
    unpauseTokenizationWithHttpInfo(token_id, opts) {
      opts = opts || {};
      let postBody = opts['TokenizationUnpauseTokenRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling unpauseTokenization");
      }

      let pathParams = {
        'token_id': token_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TokenizationOperationResponse;
      return this.apiClient.callApi(
        '/tokenization/tokens/{token_id}/unpause', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Unpause token contract
     * This operation unpauses the token contract, resuming token operations and transfers. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @param {Object} opts Optional parameters
     * @param {module:model/TokenizationUnpauseTokenRequest} opts.TokenizationUnpauseTokenRequest The request body for unpausing tokens.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenizationOperationResponse}
     */
    unpauseTokenization(token_id, opts) {
      return this.unpauseTokenizationWithHttpInfo(token_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Activate or deactivate allowlist
     * This operation activates or deactivates the allowlist. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @param {Object} opts Optional parameters
     * @param {module:model/TokenizationAllowlistActivationRequest} [TokenizationAllowlistActivationRequest] The request body for activating or deactivating the allowlist.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenizationOperationResponse} and HTTP response
     */
    updateTokenizationAllowlistActivationWithHttpInfo(token_id, opts) {
      opts = opts || {};
      let postBody = opts['TokenizationAllowlistActivationRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling updateTokenizationAllowlistActivation");
      }

      let pathParams = {
        'token_id': token_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TokenizationOperationResponse;
      return this.apiClient.callApi(
        '/tokenization/tokens/{token_id}/allowlist/activation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Activate or deactivate allowlist
     * This operation activates or deactivates the allowlist. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @param {Object} opts Optional parameters
     * @param {module:model/TokenizationAllowlistActivationRequest} opts.TokenizationAllowlistActivationRequest The request body for activating or deactivating the allowlist.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenizationOperationResponse}
     */
    updateTokenizationAllowlistActivation(token_id, opts) {
      return this.updateTokenizationAllowlistActivationWithHttpInfo(token_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update addresses on allowlist
     * This operation updates addresses on the allowlist. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @param {Object} opts Optional parameters
     * @param {module:model/TokenizationUpdateAllowlistAddressesRequest} [TokenizationUpdateAllowlistAddressesRequest] The request body for adding or removing multiple addresses on the allowlist.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenizationOperationResponse} and HTTP response
     */
    updateTokenizationAllowlistAddressesWithHttpInfo(token_id, opts) {
      opts = opts || {};
      let postBody = opts['TokenizationUpdateAllowlistAddressesRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling updateTokenizationAllowlistAddresses");
      }

      let pathParams = {
        'token_id': token_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TokenizationOperationResponse;
      return this.apiClient.callApi(
        '/tokenization/tokens/{token_id}/allowlist/addresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update addresses on allowlist
     * This operation updates addresses on the allowlist. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @param {Object} opts Optional parameters
     * @param {module:model/TokenizationUpdateAllowlistAddressesRequest} opts.TokenizationUpdateAllowlistAddressesRequest The request body for adding or removing multiple addresses on the allowlist.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenizationOperationResponse}
     */
    updateTokenizationAllowlistAddresses(token_id, opts) {
      return this.updateTokenizationAllowlistAddressesWithHttpInfo(token_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update addresses on blocklist
     * This operation updates addresses on the blocklist. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @param {Object} opts Optional parameters
     * @param {module:model/TokenizationUpdateBlocklistAddressesRequest} [TokenizationUpdateBlocklistAddressesRequest] The request body for adding or removing multiple addresses on the blocklist.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TokenizationOperationResponse} and HTTP response
     */
    updateTokenizationBlocklistAddressesWithHttpInfo(token_id, opts) {
      opts = opts || {};
      let postBody = opts['TokenizationUpdateBlocklistAddressesRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling updateTokenizationBlocklistAddresses");
      }

      let pathParams = {
        'token_id': token_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TokenizationOperationResponse;
      return this.apiClient.callApi(
        '/tokenization/tokens/{token_id}/blocklist/addresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update addresses on blocklist
     * This operation updates addresses on the blocklist. 
     * @param {String} token_id The token ID, which is the unique identifier of a token.
     * @param {Object} opts Optional parameters
     * @param {module:model/TokenizationUpdateBlocklistAddressesRequest} opts.TokenizationUpdateBlocklistAddressesRequest The request body for adding or removing multiple addresses on the blocklist.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TokenizationOperationResponse}
     */
    updateTokenizationBlocklistAddresses(token_id, opts) {
      return this.updateTokenizationBlocklistAddressesWithHttpInfo(token_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
