/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateKeyShareHolderGroupRequest from '../model/CreateKeyShareHolderGroupRequest';
import CreateMpcProjectRequest from '../model/CreateMpcProjectRequest';
import CreateMpcVaultRequest from '../model/CreateMpcVaultRequest';
import CreateTssRequestRequest from '../model/CreateTssRequestRequest';
import DeleteKeyShareHolderGroupById201Response from '../model/DeleteKeyShareHolderGroupById201Response';
import ErrorResponse from '../model/ErrorResponse';
import KeyShareHolder from '../model/KeyShareHolder';
import KeyShareHolderGroup from '../model/KeyShareHolderGroup';
import KeyShareHolderGroupType from '../model/KeyShareHolderGroupType';
import ListKeyShareHolderGroups200Response from '../model/ListKeyShareHolderGroups200Response';
import ListKeyShareHolders200Response from '../model/ListKeyShareHolders200Response';
import ListMpcProjects200Response from '../model/ListMpcProjects200Response';
import ListMpcVaults200Response from '../model/ListMpcVaults200Response';
import ListTssRequests200Response from '../model/ListTssRequests200Response';
import MPCProject from '../model/MPCProject';
import MPCVault from '../model/MPCVault';
import MPCVaultType from '../model/MPCVaultType';
import TSSRequest from '../model/TSSRequest';
import UpdateKeyShareHolderGroupByIdRequest from '../model/UpdateKeyShareHolderGroupByIdRequest';
import UpdateMpcProjectByIdRequest from '../model/UpdateMpcProjectByIdRequest';
import UpdateMpcVaultByIdRequest from '../model/UpdateMpcVaultByIdRequest';

/**
* WalletsMPCWallets service.
* @module api/WalletsMPCWalletsApi
*/
export default class WalletsMPCWalletsApi {

    /**
    * Constructs a new WalletsMPCWalletsApi. 
    * @alias module:api/WalletsMPCWalletsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Cancel TSS request
     * This operation cancels a TSS request. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} tss_request_id The TSS request ID, which you can retrieve by calling [List TSS requests](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TSSRequest} and HTTP response
     */
    cancelTssRequestByIdWithHttpInfo(vault_id, tss_request_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling cancelTssRequestById");
      }
      // verify the required parameter 'tss_request_id' is set
      if (tss_request_id === undefined || tss_request_id === null) {
        throw new Error("Missing the required parameter 'tss_request_id' when calling cancelTssRequestById");
      }

      let pathParams = {
        'vault_id': vault_id,
        'tss_request_id': tss_request_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TSSRequest;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Cancel TSS request
     * This operation cancels a TSS request. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} tss_request_id The TSS request ID, which you can retrieve by calling [List TSS requests](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TSSRequest}
     */
    cancelTssRequestById(vault_id, tss_request_id) {
      return this.cancelTssRequestByIdWithHttpInfo(vault_id, tss_request_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create key share holder group
     * This operation creates a key share holder group for a specified vault. <Note>This operation will not return the `tss_key_share_groups` property until key shares have been created using the [Create TSS request](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/create-tss-request) operation. Creating a wallet with the [Create wallet](https://www.cobo.com/developers/v2/api-references/wallets/create-wallet) operation is only possible after you've completed the previous actions.</Note> 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateKeyShareHolderGroupRequest} [CreateKeyShareHolderGroupRequest] The request body to create a key share holder group.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KeyShareHolderGroup} and HTTP response
     */
    createKeyShareHolderGroupWithHttpInfo(vault_id, opts) {
      opts = opts || {};
      let postBody = opts['CreateKeyShareHolderGroupRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling createKeyShareHolderGroup");
      }

      let pathParams = {
        'vault_id': vault_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeyShareHolderGroup;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/key_share_holder_groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create key share holder group
     * This operation creates a key share holder group for a specified vault. <Note>This operation will not return the `tss_key_share_groups` property until key shares have been created using the [Create TSS request](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/create-tss-request) operation. Creating a wallet with the [Create wallet](https://www.cobo.com/developers/v2/api-references/wallets/create-wallet) operation is only possible after you've completed the previous actions.</Note> 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateKeyShareHolderGroupRequest} opts.CreateKeyShareHolderGroupRequest The request body to create a key share holder group.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KeyShareHolderGroup}
     */
    createKeyShareHolderGroup(vault_id, opts) {
      return this.createKeyShareHolderGroupWithHttpInfo(vault_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create project
     * This operation creates a project.  <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note> 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMpcProjectRequest} [CreateMpcProjectRequest] The request body to create a project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MPCProject} and HTTP response
     */
    createMpcProjectWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['CreateMpcProjectRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MPCProject;
      return this.apiClient.callApi(
        '/wallets/mpc/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create project
     * This operation creates a project.  <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note> 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMpcProjectRequest} opts.CreateMpcProjectRequest The request body to create a project.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MPCProject}
     */
    createMpcProject(opts) {
      return this.createMpcProjectWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create vault
     * This operation creates a vault.  <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info> 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMpcVaultRequest} [CreateMpcVaultRequest] The request body to create a vault.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MPCVault} and HTTP response
     */
    createMpcVaultWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['CreateMpcVaultRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MPCVault;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create vault
     * This operation creates a vault.  <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info> 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateMpcVaultRequest} opts.CreateMpcVaultRequest The request body to create a vault.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MPCVault}
     */
    createMpcVault(opts) {
      return this.createMpcVaultWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create TSS request
     * This operation creates a TSS request under a specified vault. You can use this operation to perform actions such as key generation and recovery. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateTssRequestRequest} [CreateTssRequestRequest] The request body to create a TSS request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TSSRequest} and HTTP response
     */
    createTssRequestWithHttpInfo(vault_id, opts) {
      opts = opts || {};
      let postBody = opts['CreateTssRequestRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling createTssRequest");
      }

      let pathParams = {
        'vault_id': vault_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TSSRequest;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/tss_requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create TSS request
     * This operation creates a TSS request under a specified vault. You can use this operation to perform actions such as key generation and recovery. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateTssRequestRequest} opts.CreateTssRequestRequest The request body to create a TSS request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TSSRequest}
     */
    createTssRequest(vault_id, opts) {
      return this.createTssRequestWithHttpInfo(vault_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete key share holder group
     * This operation deletes a specified key share holder group.
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} key_share_holder_group_id The key share holder group ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteKeyShareHolderGroupById201Response} and HTTP response
     */
    deleteKeyShareHolderGroupByIdWithHttpInfo(vault_id, key_share_holder_group_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling deleteKeyShareHolderGroupById");
      }
      // verify the required parameter 'key_share_holder_group_id' is set
      if (key_share_holder_group_id === undefined || key_share_holder_group_id === null) {
        throw new Error("Missing the required parameter 'key_share_holder_group_id' when calling deleteKeyShareHolderGroupById");
      }

      let pathParams = {
        'vault_id': vault_id,
        'key_share_holder_group_id': key_share_holder_group_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteKeyShareHolderGroupById201Response;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/key_share_holder_groups/{key_share_holder_group_id}/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete key share holder group
     * This operation deletes a specified key share holder group.
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} key_share_holder_group_id The key share holder group ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteKeyShareHolderGroupById201Response}
     */
    deleteKeyShareHolderGroupById(vault_id, key_share_holder_group_id) {
      return this.deleteKeyShareHolderGroupByIdWithHttpInfo(vault_id, key_share_holder_group_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get key share holder information
     * This operation retrieves detailed information about a specified key share holder. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} tss_node_id The TSS Node ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KeyShareHolder} and HTTP response
     */
    getKeyShareHolderByTssNodeIdWithHttpInfo(vault_id, tss_node_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling getKeyShareHolderByTssNodeId");
      }
      // verify the required parameter 'tss_node_id' is set
      if (tss_node_id === undefined || tss_node_id === null) {
        throw new Error("Missing the required parameter 'tss_node_id' when calling getKeyShareHolderByTssNodeId");
      }

      let pathParams = {
        'vault_id': vault_id,
        'tss_node_id': tss_node_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KeyShareHolder;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/key_share_holders/{tss_node_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get key share holder information
     * This operation retrieves detailed information about a specified key share holder. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} tss_node_id The TSS Node ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KeyShareHolder}
     */
    getKeyShareHolderByTssNodeId(vault_id, tss_node_id) {
      return this.getKeyShareHolderByTssNodeIdWithHttpInfo(vault_id, tss_node_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get key share holder group information
     * This operation retrieves detailed information about a specified key share holder group. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} key_share_holder_group_id The key share holder group ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KeyShareHolderGroup} and HTTP response
     */
    getKeyShareHolderGroupByIdWithHttpInfo(vault_id, key_share_holder_group_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling getKeyShareHolderGroupById");
      }
      // verify the required parameter 'key_share_holder_group_id' is set
      if (key_share_holder_group_id === undefined || key_share_holder_group_id === null) {
        throw new Error("Missing the required parameter 'key_share_holder_group_id' when calling getKeyShareHolderGroupById");
      }

      let pathParams = {
        'vault_id': vault_id,
        'key_share_holder_group_id': key_share_holder_group_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KeyShareHolderGroup;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/key_share_holder_groups/{key_share_holder_group_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get key share holder group information
     * This operation retrieves detailed information about a specified key share holder group. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} key_share_holder_group_id The key share holder group ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KeyShareHolderGroup}
     */
    getKeyShareHolderGroupById(vault_id, key_share_holder_group_id) {
      return this.getKeyShareHolderGroupByIdWithHttpInfo(vault_id, key_share_holder_group_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get project information
     * This operation retrieves detailed information about a project. <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note> 
     * @param {String} project_id The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MPCProject} and HTTP response
     */
    getMpcProjectByIdWithHttpInfo(project_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'project_id' is set
      if (project_id === undefined || project_id === null) {
        throw new Error("Missing the required parameter 'project_id' when calling getMpcProjectById");
      }

      let pathParams = {
        'project_id': project_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MPCProject;
      return this.apiClient.callApi(
        '/wallets/mpc/projects/{project_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get project information
     * This operation retrieves detailed information about a project. <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note> 
     * @param {String} project_id The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MPCProject}
     */
    getMpcProjectById(project_id) {
      return this.getMpcProjectByIdWithHttpInfo(project_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get vault information
     * This operation retrieves detailed information about a vault.  <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info> 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MPCVault} and HTTP response
     */
    getMpcVaultByIdWithHttpInfo(vault_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling getMpcVaultById");
      }

      let pathParams = {
        'vault_id': vault_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MPCVault;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get vault information
     * This operation retrieves detailed information about a vault.  <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info> 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MPCVault}
     */
    getMpcVaultById(vault_id) {
      return this.getMpcVaultByIdWithHttpInfo(vault_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get TSS request
     * This operation retrieves detailed information about a TSS request. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} tss_request_id The TSS request ID, which you can retrieve by calling [List TSS requests](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TSSRequest} and HTTP response
     */
    getTssRequestByIdWithHttpInfo(vault_id, tss_request_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling getTssRequestById");
      }
      // verify the required parameter 'tss_request_id' is set
      if (tss_request_id === undefined || tss_request_id === null) {
        throw new Error("Missing the required parameter 'tss_request_id' when calling getTssRequestById");
      }

      let pathParams = {
        'vault_id': vault_id,
        'tss_request_id': tss_request_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TSSRequest;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get TSS request
     * This operation retrieves detailed information about a TSS request. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} tss_request_id The TSS request ID, which you can retrieve by calling [List TSS requests](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-tss-requests).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TSSRequest}
     */
    getTssRequestById(vault_id, tss_request_id) {
      return this.getTssRequestByIdWithHttpInfo(vault_id, tss_request_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all Cobo key share holders
     * This operation retrieves a list of all Cobo key share holders and their information.   <Info>When using this operation, `type` will only return `Cobo` and will never return `Mobile` or `API`.</Info> 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/KeyShareHolder>} and HTTP response
     */
    listCoboKeyHoldersWithHttpInfo() {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [KeyShareHolder];
      return this.apiClient.callApi(
        '/wallets/mpc/cobo_key_share_holders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all Cobo key share holders
     * This operation retrieves a list of all Cobo key share holders and their information.   <Info>When using this operation, `type` will only return `Cobo` and will never return `Mobile` or `API`.</Info> 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/KeyShareHolder>}
     */
    listCoboKeyHolders() {
      return this.listCoboKeyHoldersWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all key share holder groups
     * This operation retrieves all key share holder groups under a specified vault. You can filter the result by group type. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/KeyShareHolderGroupType} [key_share_holder_group_type] The key share holder group type. Possible values include: - `MainGroup`: The [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#main-group).  - `SigningGroup`: The [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#signing-group).  - `RecoveryGroup`: The [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#recovery-group).  **Note**: If this parameter is left empty, all key share holder group types will be retrieved. 
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} [after] This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListKeyShareHolderGroups200Response} and HTTP response
     */
    listKeyShareHolderGroupsWithHttpInfo(vault_id, opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling listKeyShareHolderGroups");
      }

      let pathParams = {
        'vault_id': vault_id
      };
      let queryParams = {
        'key_share_holder_group_type': opts['key_share_holder_group_type'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListKeyShareHolderGroups200Response;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/key_share_holder_groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all key share holder groups
     * This operation retrieves all key share holder groups under a specified vault. You can filter the result by group type. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/KeyShareHolderGroupType} opts.key_share_holder_group_type The key share holder group type. Possible values include: - `MainGroup`: The [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#main-group).  - `SigningGroup`: The [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#signing-group).  - `RecoveryGroup`: The [Recovery Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups#recovery-group).  **Note**: If this parameter is left empty, all key share holder group types will be retrieved. 
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} opts.after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListKeyShareHolderGroups200Response}
     */
    listKeyShareHolderGroups(vault_id, opts) {
      return this.listKeyShareHolderGroupsWithHttpInfo(vault_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all key share holders
     * This operation retrieves a list of all key share holders under a specified vault. You can filter the result by key share holder group ID. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {Object} opts Optional parameters
     * @param {String} [key_share_holder_group_ids] A list of key share holder group IDs, separated by comma. You can retrieve the IDs of all the key share holder groups by calling [List all key share holder groups](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups).
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} [after] This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListKeyShareHolders200Response} and HTTP response
     */
    listKeyShareHoldersWithHttpInfo(vault_id, opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling listKeyShareHolders");
      }

      let pathParams = {
        'vault_id': vault_id
      };
      let queryParams = {
        'key_share_holder_group_ids': opts['key_share_holder_group_ids'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListKeyShareHolders200Response;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/key_share_holders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all key share holders
     * This operation retrieves a list of all key share holders under a specified vault. You can filter the result by key share holder group ID. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {Object} opts Optional parameters
     * @param {String} opts.key_share_holder_group_ids A list of key share holder group IDs, separated by comma. You can retrieve the IDs of all the key share holder groups by calling [List all key share holder groups](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups).
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} opts.after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListKeyShareHolders200Response}
     */
    listKeyShareHolders(vault_id, opts) {
      return this.listKeyShareHoldersWithHttpInfo(vault_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all projects
     * This operation retrieves a list of all projects.  <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note> 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} [after] This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMpcProjects200Response} and HTTP response
     */
    listMpcProjectsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMpcProjects200Response;
      return this.apiClient.callApi(
        '/wallets/mpc/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all projects
     * This operation retrieves a list of all projects.  <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note> 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} opts.after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMpcProjects200Response}
     */
    listMpcProjects(opts) {
      return this.listMpcProjectsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all vaults
     * This operation retrieves a list of all vaults. You can filter the result by project ID.  **Notes for query parameters**: 1. `project_id` is required when `vault_type` is set to `User-Controlled`. 2. `project_id` must be left blank when `vault_type` is set to `Org-Controlled`.  <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info> 
     * @param {module:model/MPCVaultType} vault_type The vault type. Possible values include: - `Org-Controlled`: This vault is a collection of [Organization-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#organization-controlled-wallets).  - `User-Controlled`: This vault is a collection of [User-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#user-controlled-wallets). 
     * @param {Object} opts Optional parameters
     * @param {String} [project_id] The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects). 
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} [after] This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListMpcVaults200Response} and HTTP response
     */
    listMpcVaultsWithHttpInfo(vault_type, opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'vault_type' is set
      if (vault_type === undefined || vault_type === null) {
        throw new Error("Missing the required parameter 'vault_type' when calling listMpcVaults");
      }

      let pathParams = {
      };
      let queryParams = {
        'vault_type': vault_type,
        'project_id': opts['project_id'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMpcVaults200Response;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all vaults
     * This operation retrieves a list of all vaults. You can filter the result by project ID.  **Notes for query parameters**: 1. `project_id` is required when `vault_type` is set to `User-Controlled`. 2. `project_id` must be left blank when `vault_type` is set to `Org-Controlled`.  <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info> 
     * @param {module:model/MPCVaultType} vault_type The vault type. Possible values include: - `Org-Controlled`: This vault is a collection of [Organization-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#organization-controlled-wallets).  - `User-Controlled`: This vault is a collection of [User-Controlled Wallets](https://manuals.cobo.com/en/portal/mpc-wallets/introduction#user-controlled-wallets). 
     * @param {Object} opts Optional parameters
     * @param {String} opts.project_id The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects). 
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} opts.after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListMpcVaults200Response}
     */
    listMpcVaults(vault_type, opts) {
      return this.listMpcVaultsWithHttpInfo(vault_type, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List TSS requests
     * This operation retrieves a list of TSS requests and their details. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} key_share_holder_group_id The key share holder group ID of the TSS request, which you can retrieve by calling [List all key share holder groups](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups).
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} [after] This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListTssRequests200Response} and HTTP response
     */
    listTssRequestsWithHttpInfo(vault_id, key_share_holder_group_id, opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling listTssRequests");
      }
      // verify the required parameter 'key_share_holder_group_id' is set
      if (key_share_holder_group_id === undefined || key_share_holder_group_id === null) {
        throw new Error("Missing the required parameter 'key_share_holder_group_id' when calling listTssRequests");
      }

      let pathParams = {
        'vault_id': vault_id
      };
      let queryParams = {
        'key_share_holder_group_id': key_share_holder_group_id,
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTssRequests200Response;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/tss_requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List TSS requests
     * This operation retrieves a list of TSS requests and their details. 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} key_share_holder_group_id The key share holder group ID of the TSS request, which you can retrieve by calling [List all key share holder groups](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-key-share-holder-groups).
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} opts.after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListTssRequests200Response}
     */
    listTssRequests(vault_id, key_share_holder_group_id, opts) {
      return this.listTssRequestsWithHttpInfo(vault_id, key_share_holder_group_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update key share holder group
     * This operation updates a specified active [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). For example, you can use this operation to upgrade a Signing Group to the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} key_share_holder_group_id The key share holder group ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateKeyShareHolderGroupByIdRequest} [UpdateKeyShareHolderGroupByIdRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/KeyShareHolderGroup} and HTTP response
     */
    updateKeyShareHolderGroupByIdWithHttpInfo(vault_id, key_share_holder_group_id, opts) {
      opts = opts || {};
      let postBody = opts['UpdateKeyShareHolderGroupByIdRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling updateKeyShareHolderGroupById");
      }
      // verify the required parameter 'key_share_holder_group_id' is set
      if (key_share_holder_group_id === undefined || key_share_holder_group_id === null) {
        throw new Error("Missing the required parameter 'key_share_holder_group_id' when calling updateKeyShareHolderGroupById");
      }

      let pathParams = {
        'vault_id': vault_id,
        'key_share_holder_group_id': key_share_holder_group_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeyShareHolderGroup;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}/key_share_holder_groups/{key_share_holder_group_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update key share holder group
     * This operation updates a specified active [Signing Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). For example, you can use this operation to upgrade a Signing Group to the [Main Group](https://manuals.cobo.com/en/portal/mpc-wallets/ocw/create-key-share-groups). 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {String} key_share_holder_group_id The key share holder group ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateKeyShareHolderGroupByIdRequest} opts.UpdateKeyShareHolderGroupByIdRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/KeyShareHolderGroup}
     */
    updateKeyShareHolderGroupById(vault_id, key_share_holder_group_id, opts) {
      return this.updateKeyShareHolderGroupByIdWithHttpInfo(vault_id, key_share_holder_group_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update project name
     * This operation updates a project's name.  <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note> 
     * @param {String} project_id The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMpcProjectByIdRequest} [UpdateMpcProjectByIdRequest] The request body to update a project's name.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MPCProject} and HTTP response
     */
    updateMpcProjectByIdWithHttpInfo(project_id, opts) {
      opts = opts || {};
      let postBody = opts['UpdateMpcProjectByIdRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'project_id' is set
      if (project_id === undefined || project_id === null) {
        throw new Error("Missing the required parameter 'project_id' when calling updateMpcProjectById");
      }

      let pathParams = {
        'project_id': project_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MPCProject;
      return this.apiClient.callApi(
        '/wallets/mpc/projects/{project_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update project name
     * This operation updates a project's name.  <Note>This operation applies to MPC Wallets (User-Controlled Wallets) only.</Note> 
     * @param {String} project_id The project ID, which you can retrieve by calling [List all projects](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-projects).
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMpcProjectByIdRequest} opts.UpdateMpcProjectByIdRequest The request body to update a project's name.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MPCProject}
     */
    updateMpcProjectById(project_id, opts) {
      return this.updateMpcProjectByIdWithHttpInfo(project_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update vault name
     * This operation updates a vault's name.  <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info> 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMpcVaultByIdRequest} [UpdateMpcVaultByIdRequest] The request body to update a vault's name.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MPCVault} and HTTP response
     */
    updateMpcVaultByIdWithHttpInfo(vault_id, opts) {
      opts = opts || {};
      let postBody = opts['UpdateMpcVaultByIdRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'vault_id' is set
      if (vault_id === undefined || vault_id === null) {
        throw new Error("Missing the required parameter 'vault_id' when calling updateMpcVaultById");
      }

      let pathParams = {
        'vault_id': vault_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MPCVault;
      return this.apiClient.callApi(
        '/wallets/mpc/vaults/{vault_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update vault name
     * This operation updates a vault's name.  <Info>To learn what a vault is and how it relates to MPC Wallets, see [Get started with MPC Wallets](https://www.cobo.com/developers/v2/guides/mpc-wallets/get-started-ocw#technical-architecture).</Info> 
     * @param {String} vault_id The vault ID, which you can retrieve by calling [List all vaults](https://www.cobo.com/developers/v2/api-references/wallets--mpc-wallets/list-all-vaults).
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateMpcVaultByIdRequest} opts.UpdateMpcVaultByIdRequest The request body to update a vault's name.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MPCVault}
     */
    updateMpcVaultById(vault_id, opts) {
      return this.updateMpcVaultByIdWithHttpInfo(vault_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
