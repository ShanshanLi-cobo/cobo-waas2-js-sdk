/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppWorkflow from '../model/AppWorkflow';
import ApprovalRequestDetail from '../model/ApprovalRequestDetail';
import CreateApprovalRequest201Response from '../model/CreateApprovalRequest201Response';
import ErrorResponse from '../model/ErrorResponse';
import ListApprovalRequests200Response from '../model/ListApprovalRequests200Response';
import RequestApproval from '../model/RequestApproval';
import RevokeApprovalRequest201Response from '../model/RevokeApprovalRequest201Response';
import RevokeApprovalRequestRequest from '../model/RevokeApprovalRequestRequest';

/**
* AppWorkflows service.
* @module api/AppWorkflowsApi
*/
export default class AppWorkflowsApi {

    /**
    * Constructs a new AppWorkflowsApi. 
    * @alias module:api/AppWorkflowsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Request app workflow approval
     * This operation is request approval from app workflow with idempotency checks. 
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestApproval} [RequestApproval] The request body to app workflow approval.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateApprovalRequest201Response} and HTTP response
     */
    createApprovalRequestWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['RequestApproval'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateApprovalRequest201Response;
      return this.apiClient.callApi(
        '/app/workflows/approval_requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Request app workflow approval
     * This operation is request approval from app workflow with idempotency checks. 
     * @param {Object} opts Optional parameters
     * @param {module:model/RequestApproval} opts.RequestApproval The request body to app workflow approval.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateApprovalRequest201Response}
     */
    createApprovalRequest(opts) {
      return this.createApprovalRequestWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get app workflow approval request by approval id
     * This operation is retrieves approval request from app workflow. 
     * @param {String} approval_id The approval ID that is used to track a workflow approval request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApprovalRequestDetail} and HTTP response
     */
    getApprovalRequestByIdWithHttpInfo(approval_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'approval_id' is set
      if (approval_id === undefined || approval_id === null) {
        throw new Error("Missing the required parameter 'approval_id' when calling getApprovalRequestById");
      }

      let pathParams = {
        'approval_id': approval_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApprovalRequestDetail;
      return this.apiClient.callApi(
        '/app/workflows/approval_requests/{approval_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get app workflow approval request by approval id
     * This operation is retrieves approval request from app workflow. 
     * @param {String} approval_id The approval ID that is used to track a workflow approval request.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApprovalRequestDetail}
     */
    getApprovalRequestById(approval_id) {
      return this.getApprovalRequestByIdWithHttpInfo(approval_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * list app workflows
     * This operation is list app workflows of app. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/AppWorkflow>} and HTTP response
     */
    listAppWorkflowsWithHttpInfo() {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AppWorkflow];
      return this.apiClient.callApi(
        '/app/workflows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * list app workflows
     * This operation is list app workflows of app. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/AppWorkflow>}
     */
    listAppWorkflows() {
      return this.listAppWorkflowsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List app workflow approval requests by operation_id
     * This operation is retrieves list approval requests from app workflow. 
     * @param {String} operation_id The operation ID that is used to track a workflow. The operation ID is provided by you and must be unique within your app.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} [after] This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListApprovalRequests200Response} and HTTP response
     */
    listApprovalRequestsWithHttpInfo(operation_id, opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'operation_id' is set
      if (operation_id === undefined || operation_id === null) {
        throw new Error("Missing the required parameter 'operation_id' when calling listApprovalRequests");
      }

      let pathParams = {
      };
      let queryParams = {
        'operation_id': operation_id,
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListApprovalRequests200Response;
      return this.apiClient.callApi(
        '/app/workflows/approval_requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List app workflow approval requests by operation_id
     * This operation is retrieves list approval requests from app workflow. 
     * @param {String} operation_id The operation ID that is used to track a workflow. The operation ID is provided by you and must be unique within your app.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before This parameter specifies an object ID as a starting point for pagination, retrieving data before the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C.  If you set `before` to the ID of Object C (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object A.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. - If you set it to `infinity`, the last page of data is returned. 
     * @param {String} opts.after This parameter specifies an object ID as a starting point for pagination, retrieving data after the specified object relative to the current dataset.    Suppose the current data is ordered as Object A, Object B, and Object C. If you set `after` to the ID of Object A (`RqeEoTkgKG5rpzqYzg2Hd3szmPoj2cE7w5jWwShz3C1vyGSAk`), the response will include Object B and Object C.    **Notes**:   - If you set both `after` and `before`, an error will occur. - If you leave both `before` and `after` empty, the first page of data is returned. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListApprovalRequests200Response}
     */
    listApprovalRequests(operation_id, opts) {
      return this.listApprovalRequestsWithHttpInfo(operation_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Revoke an app workflow approval request by request initiator.
     * This operation is revoke approval request from app workflow. 
     * @param {String} approval_id The approval ID that is used to track a workflow approval request.
     * @param {Object} opts Optional parameters
     * @param {module:model/RevokeApprovalRequestRequest} [RevokeApprovalRequestRequest] The revoke request body to app workflow approval.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RevokeApprovalRequest201Response} and HTTP response
     */
    revokeApprovalRequestWithHttpInfo(approval_id, opts) {
      opts = opts || {};
      let postBody = opts['RevokeApprovalRequestRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'approval_id' is set
      if (approval_id === undefined || approval_id === null) {
        throw new Error("Missing the required parameter 'approval_id' when calling revokeApprovalRequest");
      }

      let pathParams = {
        'approval_id': approval_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RevokeApprovalRequest201Response;
      return this.apiClient.callApi(
        '/app/workflows/approval_requests/{approval_id}/revoke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Revoke an app workflow approval request by request initiator.
     * This operation is revoke approval request from app workflow. 
     * @param {String} approval_id The approval ID that is used to track a workflow approval request.
     * @param {Object} opts Optional parameters
     * @param {module:model/RevokeApprovalRequestRequest} opts.RevokeApprovalRequestRequest The revoke request body to app workflow approval.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RevokeApprovalRequest201Response}
     */
    revokeApprovalRequest(approval_id, opts) {
      return this.revokeApprovalRequestWithHttpInfo(approval_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
