/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GraphQLRequest from '../model/GraphQLRequest';
import GraphQLResponse from '../model/GraphQLResponse';

/**
* GraphQL service.
* @module api/GraphQLApi
*/
export default class GraphQLApi {

    /**
    * Constructs a new GraphQLApi. 
    * @alias module:api/GraphQLApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Execute a GraphQL query or mutation
     * This endpoint executes a GraphQL query or mutation. The request body must include a valid GraphQL query string. 
     * @param {Object} opts Optional parameters
     * @param {module:model/GraphQLRequest} [GraphQLRequest] The request body to generate addresses within a specified wallet.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GraphQLResponse} and HTTP response
     */
    executeGraphqlWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['GraphQLRequest'];
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboNonce', 'OAuth2', 'CoboAuth', 'CoboSignature'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GraphQLResponse;
      return this.apiClient.callApi(
        '/graphql', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Execute a GraphQL query or mutation
     * This endpoint executes a GraphQL query or mutation. The request body must include a valid GraphQL query string. 
     * @param {Object} opts Optional parameters
     * @param {module:model/GraphQLRequest} opts.GraphQLRequest The request body to generate addresses within a specified wallet.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GraphQLResponse}
     */
    executeGraphql(opts) {
      return this.executeGraphqlWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
