/**
 * Cobo Wallet as a Service 2.0
 *
 * Contact: help@cobo.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateSwapActivityRequest from '../model/CreateSwapActivityRequest';
import ErrorResponse from '../model/ErrorResponse';
import EstimatedFee from '../model/EstimatedFee';
import ListSwapActivities200Response from '../model/ListSwapActivities200Response';
import ListSwapEnabledTokens200Response from '../model/ListSwapEnabledTokens200Response';
import SwapActivityDetail from '../model/SwapActivityDetail';
import SwapActivityStatus from '../model/SwapActivityStatus';
import SwapEstimateFee from '../model/SwapEstimateFee';
import SwapQuote from '../model/SwapQuote';
import SwapType from '../model/SwapType';

/**
* Swaps service.
* @module api/SwapsApi
*/
export default class SwapsApi {

    /**
    * Constructs a new SwapsApi. 
    * @alias module:api/SwapsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create swap activity
     * This operation creates a swap activity. A swap activity can be either a bridge (cross-chain transfer) or an exchange (token-to-token swap on the same chain). 
     * @param {module:model/CreateSwapActivityRequest} CreateSwapActivityRequest The request body for creating a swap activity.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SwapActivityDetail} and HTTP response
     */
    createSwapActivityWithHttpInfo(CreateSwapActivityRequest) {
      let postBody = CreateSwapActivityRequest;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'CreateSwapActivityRequest' is set
      if (CreateSwapActivityRequest === undefined || CreateSwapActivityRequest === null) {
        throw new Error("Missing the required parameter 'CreateSwapActivityRequest' when calling createSwapActivity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SwapActivityDetail;
      return this.apiClient.callApi(
        '/swaps/swap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create swap activity
     * This operation creates a swap activity. A swap activity can be either a bridge (cross-chain transfer) or an exchange (token-to-token swap on the same chain). 
     * @param {module:model/CreateSwapActivityRequest} CreateSwapActivityRequest The request body for creating a swap activity.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SwapActivityDetail}
     */
    createSwapActivity(CreateSwapActivityRequest) {
      return this.createSwapActivityWithHttpInfo(CreateSwapActivityRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Estimate swap fee
     * This operation estimates the network fee of a swap activity. You can use this operation to estimate the network fee before initiating swap activities from MPC Wallets or Web3 Wallets.  It requires a valid `wallet_id` and `quote_id`, so you need to [get a swap quote](https://www.cobo.com/developers/v2/api-references/swaps/get-swap-quote) first. 
     * @param {module:model/SwapEstimateFee} SwapEstimateFee The request body for estimating the network fee of a swap activity.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EstimatedFee} and HTTP response
     */
    estimateSwapFeeWithHttpInfo(SwapEstimateFee) {
      let postBody = SwapEstimateFee;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'SwapEstimateFee' is set
      if (SwapEstimateFee === undefined || SwapEstimateFee === null) {
        throw new Error("Missing the required parameter 'SwapEstimateFee' when calling estimateSwapFee");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2', 'CoboAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EstimatedFee;
      return this.apiClient.callApi(
        '/swaps/estimate_fee', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Estimate swap fee
     * This operation estimates the network fee of a swap activity. You can use this operation to estimate the network fee before initiating swap activities from MPC Wallets or Web3 Wallets.  It requires a valid `wallet_id` and `quote_id`, so you need to [get a swap quote](https://www.cobo.com/developers/v2/api-references/swaps/get-swap-quote) first. 
     * @param {module:model/SwapEstimateFee} SwapEstimateFee The request body for estimating the network fee of a swap activity.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EstimatedFee}
     */
    estimateSwapFee(SwapEstimateFee) {
      return this.estimateSwapFeeWithHttpInfo(SwapEstimateFee)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get swap activity
     * This operation retrieves detailed information about a specified swap activity. 
     * @param {String} activity_id The unique identifier of the swap activity.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SwapActivityDetail} and HTTP response
     */
    getSwapActivityWithHttpInfo(activity_id) {
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'activity_id' is set
      if (activity_id === undefined || activity_id === null) {
        throw new Error("Missing the required parameter 'activity_id' when calling getSwapActivity");
      }

      let pathParams = {
        'activity_id': activity_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SwapActivityDetail;
      return this.apiClient.callApi(
        '/swaps/activities/{activity_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get swap activity
     * This operation retrieves detailed information about a specified swap activity. 
     * @param {String} activity_id The unique identifier of the swap activity.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SwapActivityDetail}
     */
    getSwapActivity(activity_id) {
      return this.getSwapActivityWithHttpInfo(activity_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get swap quote
     * This operation retrieves the current market exchange rate and estimated service fee. You need to provide `wallet_id`, `pay_token_id`, and `receive_token_id`, along with either `pay_amount` or `receive_amount`. 
     * @param {String} wallet_id The wallet ID.
     * @param {String} pay_token_id The ID of the token to pay.
     * @param {String} receive_token_id The ID of the token to receive.
     * @param {Object} opts Optional parameters
     * @param {String} [pay_amount] The amount of the token to pay.
     * @param {String} [receive_amount] The amount of the token to receive.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SwapQuote} and HTTP response
     */
    getSwapQuoteWithHttpInfo(wallet_id, pay_token_id, receive_token_id, opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }
      // verify the required parameter 'wallet_id' is set
      if (wallet_id === undefined || wallet_id === null) {
        throw new Error("Missing the required parameter 'wallet_id' when calling getSwapQuote");
      }
      // verify the required parameter 'pay_token_id' is set
      if (pay_token_id === undefined || pay_token_id === null) {
        throw new Error("Missing the required parameter 'pay_token_id' when calling getSwapQuote");
      }
      // verify the required parameter 'receive_token_id' is set
      if (receive_token_id === undefined || receive_token_id === null) {
        throw new Error("Missing the required parameter 'receive_token_id' when calling getSwapQuote");
      }

      let pathParams = {
      };
      let queryParams = {
        'wallet_id': wallet_id,
        'pay_token_id': pay_token_id,
        'receive_token_id': receive_token_id,
        'pay_amount': opts['pay_amount'],
        'receive_amount': opts['receive_amount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SwapQuote;
      return this.apiClient.callApi(
        '/swaps/quote', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get swap quote
     * This operation retrieves the current market exchange rate and estimated service fee. You need to provide `wallet_id`, `pay_token_id`, and `receive_token_id`, along with either `pay_amount` or `receive_amount`. 
     * @param {String} wallet_id The wallet ID.
     * @param {String} pay_token_id The ID of the token to pay.
     * @param {String} receive_token_id The ID of the token to receive.
     * @param {Object} opts Optional parameters
     * @param {String} opts.pay_amount The amount of the token to pay.
     * @param {String} opts.receive_amount The amount of the token to receive.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SwapQuote}
     */
    getSwapQuote(wallet_id, pay_token_id, receive_token_id, opts) {
      return this.getSwapQuoteWithHttpInfo(wallet_id, pay_token_id, receive_token_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List swap activities
     * This operation retrieves a list of swap activities. You can filter the results by swap type, status, initiator, and time range. 
     * @param {Object} opts Optional parameters
     * @param {module:model/SwapType} [type] 
     * @param {module:model/SwapActivityStatus} [status] 
     * @param {Number} [min_updated_timestamp] The start time of the query. All swap activities updated after the specified time will be retrieved. The time is in Unix timestamp format, measured in milliseconds.
     * @param {Number} [max_updated_timestamp] The end time of the query. All swap activities updated before the specified time will be retrieved. The time is in Unix timestamp format, measured in milliseconds.
     * @param {String} [initiator] The initiator of the swap activity. It is optional when creating the activity and defaults to your API key if not specified.
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {module:model/String} [sort_by] The field to sort the results by.   Possible values include: - `created_timestamp`: Sort by the time when the data was created. - `updated_timestamp`: Sort by the time when the data was last updated. 
     * @param {module:model/String} [direction = 'ASC')] The sort direction. Possible values include:   - `ASC`: Sort the results in ascending order.   - `DESC`: Sort the results in descending order. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListSwapActivities200Response} and HTTP response
     */
    listSwapActivitiesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type'],
        'status': opts['status'],
        'min_updated_timestamp': opts['min_updated_timestamp'],
        'max_updated_timestamp': opts['max_updated_timestamp'],
        'initiator': opts['initiator'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after'],
        'sort_by': opts['sort_by'],
        'direction': opts['direction']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSwapActivities200Response;
      return this.apiClient.callApi(
        '/swaps/activities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List swap activities
     * This operation retrieves a list of swap activities. You can filter the results by swap type, status, initiator, and time range. 
     * @param {Object} opts Optional parameters
     * @param {module:model/SwapType} opts.type 
     * @param {module:model/SwapActivityStatus} opts.status 
     * @param {Number} opts.min_updated_timestamp The start time of the query. All swap activities updated after the specified time will be retrieved. The time is in Unix timestamp format, measured in milliseconds.
     * @param {Number} opts.max_updated_timestamp The end time of the query. All swap activities updated before the specified time will be retrieved. The time is in Unix timestamp format, measured in milliseconds.
     * @param {String} opts.initiator The initiator of the swap activity. It is optional when creating the activity and defaults to your API key if not specified.
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @param {module:model/String} opts.sort_by The field to sort the results by.   Possible values include: - `created_timestamp`: Sort by the time when the data was created. - `updated_timestamp`: Sort by the time when the data was last updated. 
     * @param {module:model/String} opts.direction The sort direction. Possible values include:   - `ASC`: Sort the results in ascending order.   - `DESC`: Sort the results in descending order.  (default to 'ASC')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSwapActivities200Response}
     */
    listSwapActivities(opts) {
      return this.listSwapActivitiesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List enabled tokens for swap
     * This operation retrieves a list of tokens that are enabled for the swap feature. You can filter the results by swap type, asset ID, and chain ID. 
     * @param {Object} opts Optional parameters
     * @param {module:model/SwapType} [type] 
     * @param {String} [asset_id] (This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account.
     * @param {String} [chain_id] The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).
     * @param {Number} [limit = 10)] The maximum number of objects to return. For most operations, the value range is [1, 50].
     * @param {String} [before] A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} [after] A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ListSwapEnabledTokens200Response} and HTTP response
     */
    listSwapEnabledTokensWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;
      if (postBody && postBody.toJSON) {
          postBody = postBody.toJSON()
      }

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type'],
        'asset_id': opts['asset_id'],
        'chain_id': opts['chain_id'],
        'limit': opts['limit'],
        'before': opts['before'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['CoboAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSwapEnabledTokens200Response;
      return this.apiClient.callApi(
        '/swaps/enabled_tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List enabled tokens for swap
     * This operation retrieves a list of tokens that are enabled for the swap feature. You can filter the results by swap type, asset ID, and chain ID. 
     * @param {Object} opts Optional parameters
     * @param {module:model/SwapType} opts.type 
     * @param {String} opts.asset_id (This concept applies to Exchange Wallets only) The asset ID. An asset ID is the unique identifier of the asset held within your linked exchange account.
     * @param {String} opts.chain_id The chain ID, which is the unique identifier of a blockchain. You can retrieve the IDs of all the chains you can use by calling [List enabled chains](https://www.cobo.com/developers/v2/api-references/wallets/list-enabled-chains).
     * @param {Number} opts.limit The maximum number of objects to return. For most operations, the value range is [1, 50]. (default to 10)
     * @param {String} opts.before A cursor indicating the position before the current page. This value is generated by Cobo and returned in the response. If you are paginating forward from the beginning, you do not need to provide it on the first request. When paginating backward (to the previous page), you should pass the before value returned from the last response. 
     * @param {String} opts.after A cursor indicating the position after the current page. This value is generated by Cobo and returned in the response. You do not need to provide it on the first request. When paginating forward (to the next page), you should pass the after value returned from the last response. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ListSwapEnabledTokens200Response}
     */
    listSwapEnabledTokens(opts) {
      return this.listSwapEnabledTokensWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
